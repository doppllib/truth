//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/dopplJavaMain/com/google/common/truth/IterableSubject.java
//

#include "ComGoogleCommonTruthCorrespondence.h"
#include "ComGoogleCommonTruthFailureStrategy.h"
#include "ComGoogleCommonTruthGraphMatching.h"
#include "ComGoogleCommonTruthIterableSubject.h"
#include "ComGoogleCommonTruthOrdered.h"
#include "ComGoogleCommonTruthStringUtil.h"
#include "ComGoogleCommonTruthSubject.h"
#include "ComGoogleCommonTruthSubjectUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Objects.h"
#include "com/google/common/base/Optional.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/BiMap.h"
#include "com/google/common/collect/ImmutableBiMap.h"
#include "com/google/common/collect/ImmutableList.h"
#include "com/google/common/collect/ImmutableMultimap.h"
#include "com/google/common/collect/ImmutableSet.h"
#include "com/google/common/collect/ImmutableSetMultimap.h"
#include "com/google/common/collect/Iterables.h"
#include "com/google/common/collect/Iterators.h"
#include "com/google/common/collect/LinkedHashMultiset.h"
#include "com/google/common/collect/Lists.h"
#include "com/google/common/collect/Multiset.h"
#include "com/google/common/collect/Ordering.h"
#include "com/google/common/collect/Sets.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/SafeVarargs.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "javax/annotation/Nullable.h"

@protocol ComGoogleCommonTruthIterableSubject_PairwiseChecker;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleCommonTruthIterableSubject ()

- (void)containsAnyWithNSString:(NSString * __nonnull)failVerb
           withJavaLangIterable:(id<JavaLangIterable> __nonnull)expected;

+ (id<JavaUtilCollection>)iterableToCollectionWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

+ (id<JavaUtilList>)iterableToListWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

- (id<ComGoogleCommonTruthOrdered>)containsAllWithNSString:(NSString * __nonnull)failVerb
                                      withJavaLangIterable:(id<JavaLangIterable> __nonnull)expectedIterable;

+ (void)moveElementsWithJavaUtilList:(id<JavaUtilList> __nonnull)input
              withJavaUtilCollection:(id<JavaUtilCollection> __nonnull)output
                             withInt:(jint)maxElements;

- (id<ComGoogleCommonTruthOrdered>)containsExactlyElementsInWithJavaLangIterable:(id<JavaLangIterable> __nonnull)required
                                                                     withBoolean:(jboolean)addElementsInWarning;

- (void)containsNoneWithNSString:(NSString * __nonnull)failVerb
            withJavaLangIterable:(id<JavaLangIterable> __nonnull)excluded;

- (void)pairwiseCheckWithComGoogleCommonTruthIterableSubject_PairwiseChecker:(id<ComGoogleCommonTruthIterableSubject_PairwiseChecker> __nonnull)checker;

@end

inline id<ComGoogleCommonTruthOrdered> ComGoogleCommonTruthIterableSubject_get_IN_ORDER(void);
static id<ComGoogleCommonTruthOrdered> ComGoogleCommonTruthIterableSubject_IN_ORDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonTruthIterableSubject, IN_ORDER, id<ComGoogleCommonTruthOrdered>)

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_containsAnyWithNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *self, NSString *failVerb, id<JavaLangIterable> expected);

__attribute__((unused)) static id<JavaUtilCollection> ComGoogleCommonTruthIterableSubject_iterableToCollectionWithJavaLangIterable_(id<JavaLangIterable> iterable);

__attribute__((unused)) static id<JavaUtilList> ComGoogleCommonTruthIterableSubject_iterableToListWithJavaLangIterable_(id<JavaLangIterable> iterable);

__attribute__((unused)) static id<ComGoogleCommonTruthOrdered> ComGoogleCommonTruthIterableSubject_containsAllWithNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *self, NSString *failVerb, id<JavaLangIterable> expectedIterable);

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_moveElementsWithJavaUtilList_withJavaUtilCollection_withInt_(id<JavaUtilList> input, id<JavaUtilCollection> output, jint maxElements);

__attribute__((unused)) static id<ComGoogleCommonTruthOrdered> ComGoogleCommonTruthIterableSubject_containsExactlyElementsInWithJavaLangIterable_withBoolean_(ComGoogleCommonTruthIterableSubject *self, id<JavaLangIterable> required, jboolean addElementsInWarning);

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_failWithBadResultsAndSuffixWithNSString_withId_withNSString_withId_withNSString_(ComGoogleCommonTruthIterableSubject *self, NSString *verb, id expected, NSString *failVerb, id actual, NSString *suffix);

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_containsNoneWithNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *self, NSString *failVerb, id<JavaLangIterable> excluded);

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_isStrictlyOrderedWithJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *self, id<JavaUtilComparator> comparator);

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_isOrdered(ComGoogleCommonTruthIterableSubject *self);

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_isOrderedWithJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *self, id<JavaUtilComparator> comparator);

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_pairwiseCheckWithComGoogleCommonTruthIterableSubject_PairwiseChecker_(ComGoogleCommonTruthIterableSubject *self, id<ComGoogleCommonTruthIterableSubject_PairwiseChecker> checker);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$5(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$6(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$7(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$8(void);

@interface ComGoogleCommonTruthIterableSubject_NotInOrder : NSObject < ComGoogleCommonTruthOrdered > {
 @public
  ComGoogleCommonTruthIterableSubject *this$0_;
  NSString *check_;
  id<JavaLangIterable> required_;
}

- (instancetype)initWithComGoogleCommonTruthIterableSubject:(ComGoogleCommonTruthIterableSubject * __nonnull)outer$
                                               withNSString:(NSString * __nonnull)check
                                       withJavaLangIterable:(id<JavaLangIterable> __nonnull)required;

- (void)inOrder;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthIterableSubject_NotInOrder)

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthIterableSubject_NotInOrder, check_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleCommonTruthIterableSubject_NotInOrder, required_, id<JavaLangIterable>)

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject_NotInOrder *self, ComGoogleCommonTruthIterableSubject *outer$, NSString *check, id<JavaLangIterable> required);

__attribute__((unused)) static ComGoogleCommonTruthIterableSubject_NotInOrder *new_ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *outer$, NSString *check, id<JavaLangIterable> required) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthIterableSubject_NotInOrder *create_ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *outer$, NSString *check, id<JavaLangIterable> required);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthIterableSubject_NotInOrder)

@interface ComGoogleCommonTruthIterableSubject_1 : NSObject < ComGoogleCommonTruthOrdered >

- (instancetype)init;

- (void)inOrder;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthIterableSubject_1)

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_1_init(ComGoogleCommonTruthIterableSubject_1 *self);

__attribute__((unused)) static ComGoogleCommonTruthIterableSubject_1 *new_ComGoogleCommonTruthIterableSubject_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthIterableSubject_1 *create_ComGoogleCommonTruthIterableSubject_1_init(void);

@protocol ComGoogleCommonTruthIterableSubject_PairwiseChecker < JavaObject >

- (void)checkWithId:(id __nonnull)prev
             withId:(id __nonnull)next;

@end

@interface ComGoogleCommonTruthIterableSubject_PairwiseChecker : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthIterableSubject_PairwiseChecker)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthIterableSubject_PairwiseChecker)

@interface ComGoogleCommonTruthIterableSubject_2 : NSObject < ComGoogleCommonTruthIterableSubject_PairwiseChecker > {
 @public
  ComGoogleCommonTruthIterableSubject *this$0_;
  id<JavaUtilComparator> val$comparator_;
}

- (instancetype)initWithComGoogleCommonTruthIterableSubject:(ComGoogleCommonTruthIterableSubject * __nonnull)outer$
                                     withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)capture$0;

- (void)checkWithId:(id __nonnull)prev
             withId:(id __nonnull)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthIterableSubject_2)

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_2_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject_2 *self, ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0);

__attribute__((unused)) static ComGoogleCommonTruthIterableSubject_2 *new_ComGoogleCommonTruthIterableSubject_2_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthIterableSubject_2 *create_ComGoogleCommonTruthIterableSubject_2_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0);

@interface ComGoogleCommonTruthIterableSubject_3 : NSObject < ComGoogleCommonTruthIterableSubject_PairwiseChecker > {
 @public
  ComGoogleCommonTruthIterableSubject *this$0_;
  id<JavaUtilComparator> val$comparator_;
}

- (instancetype)initWithComGoogleCommonTruthIterableSubject:(ComGoogleCommonTruthIterableSubject * __nonnull)outer$
                                     withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)capture$0;

- (void)checkWithId:(id __nonnull)prev
             withId:(id __nonnull)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthIterableSubject_3)

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_3_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject_3 *self, ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0);

__attribute__((unused)) static ComGoogleCommonTruthIterableSubject_3 *new_ComGoogleCommonTruthIterableSubject_3_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthIterableSubject_3 *create_ComGoogleCommonTruthIterableSubject_3_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0);

@interface ComGoogleCommonTruthIterableSubject_UsingCorrespondence () {
 @public
  ComGoogleCommonTruthIterableSubject *this$0_;
  ComGoogleCommonTruthCorrespondence *correspondence_;
}

- (instancetype)initWithComGoogleCommonTruthIterableSubject:(ComGoogleCommonTruthIterableSubject * __nonnull)outer$
                     withComGoogleCommonTruthCorrespondence:(ComGoogleCommonTruthCorrespondence * __nonnull)correspondence;

- (jboolean)correspondInOrderExactlyWithJavaUtilIterator:(id<JavaUtilIterator> __nonnull)actual
                                    withJavaUtilIterator:(id<JavaUtilIterator> __nonnull)expected;

- (ComGoogleCommonCollectImmutableSetMultimap *)findCandidateMappingWithJavaUtilList:(id<JavaUtilList> __nonnull)actual
                                                                    withJavaUtilList:(id<JavaUtilList> __nonnull)expected;

- (ComGoogleCommonBaseOptional *)describeMissingOrExtraWithJavaUtilList:(id<JavaUtilList> __nonnull)extra
                                                       withJavaUtilList:(id<JavaUtilList> __nonnull)missing;

- (id<JavaUtilList>)findNotIndexedWithJavaUtilList:(id<JavaUtilList> __nonnull)list
                                   withJavaUtilSet:(id<JavaUtilSet> __nonnull)indexes;

- (NSString *)formatMissingWithJavaUtilList:(id<JavaUtilList> __nonnull)missing;

- (ComGoogleCommonCollectImmutableBiMap *)findMaximalOneToOneMappingWithComGoogleCommonCollectImmutableMultimap:(ComGoogleCommonCollectImmutableMultimap * __nonnull)edges;

- (jboolean)correspondInOrderAllInWithJavaUtilIterator:(id<JavaUtilIterator> __nonnull)actual
                                  withJavaUtilIterator:(id<JavaUtilIterator> __nonnull)expected;

- (jboolean)findCorrespondingWithJavaUtilIterator:(id<JavaUtilIterator> __nonnull)actual
                                           withId:(id __nonnull)expectedElement;

- (void)containsAnyWithNSString:(NSString * __nonnull)failVerb
           withJavaLangIterable:(id<JavaLangIterable> __nonnull)expected;

- (void)containsNoneWithNSString:(NSString * __nonnull)excludedPrefix
            withJavaLangIterable:(id<JavaLangIterable> __nonnull)excluded;

- (id<JavaLangIterable>)getCastActual;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthIterableSubject_UsingCorrespondence, correspondence_, ComGoogleCommonTruthCorrespondence *)

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_UsingCorrespondence_initWithComGoogleCommonTruthIterableSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, ComGoogleCommonTruthIterableSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence);

__attribute__((unused)) static ComGoogleCommonTruthIterableSubject_UsingCorrespondence *new_ComGoogleCommonTruthIterableSubject_UsingCorrespondence_initWithComGoogleCommonTruthIterableSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthIterableSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthIterableSubject_UsingCorrespondence *create_ComGoogleCommonTruthIterableSubject_UsingCorrespondence_initWithComGoogleCommonTruthIterableSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthIterableSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence);

__attribute__((unused)) static jboolean ComGoogleCommonTruthIterableSubject_UsingCorrespondence_correspondInOrderExactlyWithJavaUtilIterator_withJavaUtilIterator_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilIterator> actual, id<JavaUtilIterator> expected);

__attribute__((unused)) static ComGoogleCommonCollectImmutableSetMultimap *ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findCandidateMappingWithJavaUtilList_withJavaUtilList_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilList> actual, id<JavaUtilList> expected);

__attribute__((unused)) static ComGoogleCommonBaseOptional *ComGoogleCommonTruthIterableSubject_UsingCorrespondence_describeMissingOrExtraWithJavaUtilList_withJavaUtilList_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilList> extra, id<JavaUtilList> missing);

__attribute__((unused)) static id<JavaUtilList> ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findNotIndexedWithJavaUtilList_withJavaUtilSet_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilList> list, id<JavaUtilSet> indexes);

__attribute__((unused)) static NSString *ComGoogleCommonTruthIterableSubject_UsingCorrespondence_formatMissingWithJavaUtilList_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilList> missing);

__attribute__((unused)) static ComGoogleCommonCollectImmutableBiMap *ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findMaximalOneToOneMappingWithComGoogleCommonCollectImmutableMultimap_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, ComGoogleCommonCollectImmutableMultimap *edges);

__attribute__((unused)) static jboolean ComGoogleCommonTruthIterableSubject_UsingCorrespondence_correspondInOrderAllInWithJavaUtilIterator_withJavaUtilIterator_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilIterator> actual, id<JavaUtilIterator> expected);

__attribute__((unused)) static jboolean ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findCorrespondingWithJavaUtilIterator_withId_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilIterator> actual, id expectedElement);

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_UsingCorrespondence_containsAnyWithNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, NSString *failVerb, id<JavaLangIterable> expected);

__attribute__((unused)) static void ComGoogleCommonTruthIterableSubject_UsingCorrespondence_containsNoneWithNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, NSString *excludedPrefix, id<JavaLangIterable> excluded);

__attribute__((unused)) static id<JavaLangIterable> ComGoogleCommonTruthIterableSubject_UsingCorrespondence_getCastActual(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$5(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$6(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$7(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$8(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$9(void);

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonTruthIterableSubject)

@implementation ComGoogleCommonTruthIterableSubject

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy * __nonnull)failureStrategy
                                       withJavaLangIterable:(id<JavaLangIterable> __nullable)list {
  ComGoogleCommonTruthIterableSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangIterable_(self, failureStrategy, list);
  return self;
}

- (void)isEmpty {
  if (!ComGoogleCommonCollectIterables_isEmptyWithJavaLangIterable_([self actual])) {
    [self failWithNSString:@"is empty"];
  }
}

- (void)isNotEmpty {
  if (ComGoogleCommonCollectIterables_isEmptyWithJavaLangIterable_([self actual])) {
    [self failWithNSString:@"is not empty"];
  }
}

- (void)hasSizeWithInt:(jint)expectedSize {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withNSObjectArray_(expectedSize >= 0, @"expectedSize(%s) must be >= 0", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(expectedSize) } count:1 type:NSObject_class_()]);
  jint actualSize = ComGoogleCommonCollectIterables_sizeWithJavaLangIterable_([self actual]);
  if (actualSize != expectedSize) {
    [self failWithBadResultsWithNSString:@"has a size of" withId:JavaLangInteger_valueOfWithInt_(expectedSize) withNSString:@"is" withId:JavaLangInteger_valueOfWithInt_(actualSize)];
  }
}

- (void)containsWithId:(id __nullable)element {
  if (!ComGoogleCommonCollectIterables_containsWithJavaLangIterable_withId_([self actual], element)) {
    [self failWithRawMessageWithNSString:@"%s should have contained <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], element } count:2 type:NSObject_class_()]];
  }
}

- (void)doesNotContainWithId:(id __nullable)element {
  if (ComGoogleCommonCollectIterables_containsWithJavaLangIterable_withId_([self actual], element)) {
    [self failWithRawMessageWithNSString:@"%s should not have contained <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], element } count:2 type:NSObject_class_()]];
  }
}

- (void)containsNoDuplicates {
  id<JavaUtilList> duplicates = ComGoogleCommonCollectLists_newArrayList();
  for (id<ComGoogleCommonCollectMultiset_Entry> __strong entry_ in nil_chk([((ComGoogleCommonCollectLinkedHashMultiset *) nil_chk(ComGoogleCommonCollectLinkedHashMultiset_createWithJavaLangIterable_([self actual]))) entrySet])) {
    if ([((id<ComGoogleCommonCollectMultiset_Entry>) nil_chk(entry_)) getCount] > 1) {
      [((id<JavaUtilList>) nil_chk(duplicates)) addWithId:entry_];
    }
  }
  if (![((id<JavaUtilList>) nil_chk(duplicates)) isEmpty]) {
    [self failWithRawMessageWithNSString:@"%s has the following duplicates: <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], duplicates } count:2 type:NSObject_class_()]];
  }
}

- (void)containsAnyOfWithId:(id __nullable)first
                     withId:(id __nullable)second
          withNSObjectArray:(IOSObjectArray * __nullable)rest {
  ComGoogleCommonTruthIterableSubject_containsAnyWithNSString_withJavaLangIterable_(self, @"contains any of", ComGoogleCommonTruthSubjectUtils_accumulateWithId_withId_withNSObjectArray_(first, second, rest));
}

- (void)containsAnyInWithJavaLangIterable:(id<JavaLangIterable> __nonnull)expected {
  ComGoogleCommonTruthIterableSubject_containsAnyWithNSString_withJavaLangIterable_(self, @"contains any element in", expected);
}

- (void)containsAnyWithNSString:(NSString * __nonnull)failVerb
           withJavaLangIterable:(id<JavaLangIterable> __nonnull)expected {
  ComGoogleCommonTruthIterableSubject_containsAnyWithNSString_withJavaLangIterable_(self, failVerb, expected);
}

+ (id<JavaUtilCollection>)iterableToCollectionWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable {
  return ComGoogleCommonTruthIterableSubject_iterableToCollectionWithJavaLangIterable_(iterable);
}

+ (id<JavaUtilList>)iterableToListWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable {
  return ComGoogleCommonTruthIterableSubject_iterableToListWithJavaLangIterable_(iterable);
}

- (id<ComGoogleCommonTruthOrdered>)containsAllOfWithId:(id __nullable)firstExpected
                                                withId:(id __nullable)secondExpected
                                     withNSObjectArray:(IOSObjectArray * __nullable)restOfExpected {
  return ComGoogleCommonTruthIterableSubject_containsAllWithNSString_withJavaLangIterable_(self, @"contains all of", ComGoogleCommonTruthSubjectUtils_accumulateWithId_withId_withNSObjectArray_(firstExpected, secondExpected, restOfExpected));
}

- (id<ComGoogleCommonTruthOrdered>)containsAllInWithJavaLangIterable:(id<JavaLangIterable> __nonnull)expected {
  return ComGoogleCommonTruthIterableSubject_containsAllWithNSString_withJavaLangIterable_(self, @"contains all elements in", expected);
}

- (id<ComGoogleCommonTruthOrdered>)containsAllWithNSString:(NSString * __nonnull)failVerb
                                      withJavaLangIterable:(id<JavaLangIterable> __nonnull)expectedIterable {
  return ComGoogleCommonTruthIterableSubject_containsAllWithNSString_withJavaLangIterable_(self, failVerb, expectedIterable);
}

+ (void)moveElementsWithJavaUtilList:(id<JavaUtilList> __nonnull)input
              withJavaUtilCollection:(id<JavaUtilCollection> __nonnull)output
                             withInt:(jint)maxElements {
  ComGoogleCommonTruthIterableSubject_moveElementsWithJavaUtilList_withJavaUtilCollection_withInt_(input, output, maxElements);
}

- (id<ComGoogleCommonTruthOrdered>)containsExactlyWithNSObjectArray:(IOSObjectArray * __nullable)varargs {
  id<JavaUtilList> expected = (varargs == nil) ? ComGoogleCommonCollectLists_newArrayListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSObject_class_()]) : JavaUtilArrays_asListWithNSObjectArray_(varargs);
  return ComGoogleCommonTruthIterableSubject_containsExactlyElementsInWithJavaLangIterable_withBoolean_(self, expected, varargs != nil && varargs->size_ == 1 && [JavaLangIterable_class_() isInstance:IOSObjectArray_Get(varargs, 0)]);
}

- (id<ComGoogleCommonTruthOrdered>)containsExactlyElementsInWithJavaLangIterable:(id<JavaLangIterable> __nonnull)expected {
  return ComGoogleCommonTruthIterableSubject_containsExactlyElementsInWithJavaLangIterable_withBoolean_(self, expected, false);
}

- (id<ComGoogleCommonTruthOrdered>)containsExactlyElementsInWithJavaLangIterable:(id<JavaLangIterable> __nonnull)required
                                                                     withBoolean:(jboolean)addElementsInWarning {
  return ComGoogleCommonTruthIterableSubject_containsExactlyElementsInWithJavaLangIterable_withBoolean_(self, required, addElementsInWarning);
}

- (void)failWithBadResultsAndSuffixWithNSString:(NSString * __nonnull)verb
                                         withId:(id __nonnull)expected
                                   withNSString:(NSString * __nonnull)failVerb
                                         withId:(id __nonnull)actual
                                   withNSString:(NSString * __nonnull)suffix {
  ComGoogleCommonTruthIterableSubject_failWithBadResultsAndSuffixWithNSString_withId_withNSString_withId_withNSString_(self, verb, expected, failVerb, actual, suffix);
}

- (void)containsNoneOfWithId:(id __nullable)firstExcluded
                      withId:(id __nullable)secondExcluded
           withNSObjectArray:(IOSObjectArray * __nullable)restOfExcluded {
  ComGoogleCommonTruthIterableSubject_containsNoneWithNSString_withJavaLangIterable_(self, @"contains none of", ComGoogleCommonTruthSubjectUtils_accumulateWithId_withId_withNSObjectArray_(firstExcluded, secondExcluded, restOfExcluded));
}

- (void)containsNoneInWithJavaLangIterable:(id<JavaLangIterable> __nonnull)excluded {
  ComGoogleCommonTruthIterableSubject_containsNoneWithNSString_withJavaLangIterable_(self, @"contains no elements in", excluded);
}

- (void)containsNoneWithNSString:(NSString * __nonnull)failVerb
            withJavaLangIterable:(id<JavaLangIterable> __nonnull)excluded {
  ComGoogleCommonTruthIterableSubject_containsNoneWithNSString_withJavaLangIterable_(self, failVerb, excluded);
}

- (void)isStrictlyOrdered {
  ComGoogleCommonTruthIterableSubject_isStrictlyOrderedWithJavaUtilComparator_(self, ComGoogleCommonCollectOrdering_natural());
}

- (void)isStrictlyOrderedWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator {
  ComGoogleCommonTruthIterableSubject_isStrictlyOrderedWithJavaUtilComparator_(self, comparator);
}

- (void)isOrdered {
  ComGoogleCommonTruthIterableSubject_isOrdered(self);
}

- (void)isPartiallyOrdered {
  ComGoogleCommonTruthIterableSubject_isOrdered(self);
}

- (void)isOrderedWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator {
  ComGoogleCommonTruthIterableSubject_isOrderedWithJavaUtilComparator_(self, comparator);
}

- (void)isPartiallyOrderedWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator {
  ComGoogleCommonTruthIterableSubject_isOrderedWithJavaUtilComparator_(self, comparator);
}

- (void)pairwiseCheckWithComGoogleCommonTruthIterableSubject_PairwiseChecker:(id<ComGoogleCommonTruthIterableSubject_PairwiseChecker> __nonnull)checker {
  ComGoogleCommonTruthIterableSubject_pairwiseCheckWithComGoogleCommonTruthIterableSubject_PairwiseChecker_(self, checker);
}

- (ComGoogleCommonTruthIterableSubject_UsingCorrespondence *)comparingElementsUsingWithComGoogleCommonTruthCorrespondence:(ComGoogleCommonTruthCorrespondence * __nonnull)correspondence {
  return create_ComGoogleCommonTruthIterableSubject_UsingCorrespondence_initWithComGoogleCommonTruthIterableSubject_withComGoogleCommonTruthCorrespondence_(self, correspondence);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, 2 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, -1, -1, 7 },
    { NULL, "V", 0x11, 8, 6, -1, -1, -1, 9 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x91, 10, 11, -1, -1, -1, 12 },
    { NULL, "V", 0x11, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xa, 19, 14, -1, 20, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 21, 14, -1, 22, -1, -1 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x91, 23, 11, -1, -1, -1, 24 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x11, 25, 14, -1, 26, -1, -1 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x2, 27, 17, -1, 28, -1, -1 },
    { NULL, "V", 0xa, 29, 30, -1, 31, -1, -1 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x91, 32, 33, -1, -1, -1, 34 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x11, 35, 14, -1, 26, -1, -1 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x2, 35, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x14, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x91, 40, 11, -1, -1, -1, 41 },
    { NULL, "V", 0x11, 42, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x2, 43, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 44, 45, -1, 46, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 47, -1 },
    { NULL, "V", 0x11, 48, 45, -1, 46, -1, -1 },
    { NULL, "V", 0x11, 49, 45, -1, 46, 50, -1 },
    { NULL, "V", 0x2, 51, 52, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonTruthIterableSubject_UsingCorrespondence;", 0x1, 53, 54, -1, 55, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthFailureStrategy:withJavaLangIterable:);
  methods[1].selector = @selector(isEmpty);
  methods[2].selector = @selector(isNotEmpty);
  methods[3].selector = @selector(hasSizeWithInt:);
  methods[4].selector = @selector(containsWithId:);
  methods[5].selector = @selector(doesNotContainWithId:);
  methods[6].selector = @selector(containsNoDuplicates);
  methods[7].selector = @selector(containsAnyOfWithId:withId:withNSObjectArray:);
  methods[8].selector = @selector(containsAnyInWithJavaLangIterable:);
  methods[9].selector = @selector(containsAnyWithNSString:withJavaLangIterable:);
  methods[10].selector = @selector(iterableToCollectionWithJavaLangIterable:);
  methods[11].selector = @selector(iterableToListWithJavaLangIterable:);
  methods[12].selector = @selector(containsAllOfWithId:withId:withNSObjectArray:);
  methods[13].selector = @selector(containsAllInWithJavaLangIterable:);
  methods[14].selector = @selector(containsAllWithNSString:withJavaLangIterable:);
  methods[15].selector = @selector(moveElementsWithJavaUtilList:withJavaUtilCollection:withInt:);
  methods[16].selector = @selector(containsExactlyWithNSObjectArray:);
  methods[17].selector = @selector(containsExactlyElementsInWithJavaLangIterable:);
  methods[18].selector = @selector(containsExactlyElementsInWithJavaLangIterable:withBoolean:);
  methods[19].selector = @selector(failWithBadResultsAndSuffixWithNSString:withId:withNSString:withId:withNSString:);
  methods[20].selector = @selector(containsNoneOfWithId:withId:withNSObjectArray:);
  methods[21].selector = @selector(containsNoneInWithJavaLangIterable:);
  methods[22].selector = @selector(containsNoneWithNSString:withJavaLangIterable:);
  methods[23].selector = @selector(isStrictlyOrdered);
  methods[24].selector = @selector(isStrictlyOrderedWithJavaUtilComparator:);
  methods[25].selector = @selector(isOrdered);
  methods[26].selector = @selector(isPartiallyOrdered);
  methods[27].selector = @selector(isOrderedWithJavaUtilComparator:);
  methods[28].selector = @selector(isPartiallyOrderedWithJavaUtilComparator:);
  methods[29].selector = @selector(pairwiseCheckWithComGoogleCommonTruthIterableSubject_PairwiseChecker:);
  methods[30].selector = @selector(comparingElementsUsingWithComGoogleCommonTruthCorrespondence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IN_ORDER", "LComGoogleCommonTruthOrdered;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonTruthFailureStrategy;LJavaLangIterable;", "(Lcom/google/common/truth/FailureStrategy;Ljava/lang/Iterable<*>;)V", (void *)&ComGoogleCommonTruthIterableSubject__Annotations$0, "hasSize", "I", "contains", "LNSObject;", (void *)&ComGoogleCommonTruthIterableSubject__Annotations$1, "doesNotContain", (void *)&ComGoogleCommonTruthIterableSubject__Annotations$2, "containsAnyOf", "LNSObject;LNSObject;[LNSObject;", (void *)&ComGoogleCommonTruthIterableSubject__Annotations$3, "containsAnyIn", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)V", "containsAny", "LNSString;LJavaLangIterable;", "(Ljava/lang/String;Ljava/lang/Iterable<*>;)V", "iterableToCollection", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;)Ljava/util/Collection<TT;>;", "iterableToList", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;)Ljava/util/List<TT;>;", "containsAllOf", (void *)&ComGoogleCommonTruthIterableSubject__Annotations$4, "containsAllIn", "(Ljava/lang/Iterable<*>;)Lcom/google/common/truth/Ordered;", "containsAll", "(Ljava/lang/String;Ljava/lang/Iterable<*>;)Lcom/google/common/truth/Ordered;", "moveElements", "LJavaUtilList;LJavaUtilCollection;I", "(Ljava/util/List<*>;Ljava/util/Collection<Ljava/lang/Object;>;I)V", "containsExactly", "[LNSObject;", (void *)&ComGoogleCommonTruthIterableSubject__Annotations$5, "containsExactlyElementsIn", "LJavaLangIterable;Z", "(Ljava/lang/Iterable<*>;Z)Lcom/google/common/truth/Ordered;", "failWithBadResultsAndSuffix", "LNSString;LNSObject;LNSString;LNSObject;LNSString;", "containsNoneOf", (void *)&ComGoogleCommonTruthIterableSubject__Annotations$6, "containsNoneIn", "containsNone", "isStrictlyOrdered", "LJavaUtilComparator;", "(Ljava/util/Comparator<*>;)V", (void *)&ComGoogleCommonTruthIterableSubject__Annotations$7, "isOrdered", "isPartiallyOrdered", (void *)&ComGoogleCommonTruthIterableSubject__Annotations$8, "pairwiseCheck", "LComGoogleCommonTruthIterableSubject_PairwiseChecker;", "comparingElementsUsing", "LComGoogleCommonTruthCorrespondence;", "<A:Ljava/lang/Object;E:Ljava/lang/Object;>(Lcom/google/common/truth/Correspondence<TA;TE;>;)Lcom/google/common/truth/IterableSubject$UsingCorrespondence<TA;TE;>;", &ComGoogleCommonTruthIterableSubject_IN_ORDER, "LComGoogleCommonTruthIterableSubject_NotInOrder;LComGoogleCommonTruthIterableSubject_PairwiseChecker;LComGoogleCommonTruthIterableSubject_UsingCorrespondence;", "Lcom/google/common/truth/Subject<Lcom/google/common/truth/IterableSubject;Ljava/lang/Iterable<*>;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthIterableSubject = { "IterableSubject", "com.google.common.truth", ptrTable, methods, fields, 7, 0x1, 31, 1, -1, 57, -1, 58, -1 };
  return &_ComGoogleCommonTruthIterableSubject;
}

+ (void)initialize {
  if (self == [ComGoogleCommonTruthIterableSubject class]) {
    JreStrongAssignAndConsume(&ComGoogleCommonTruthIterableSubject_IN_ORDER, new_ComGoogleCommonTruthIterableSubject_1_init());
    J2OBJC_SET_INITIALIZED(ComGoogleCommonTruthIterableSubject)
  }
}

@end

void ComGoogleCommonTruthIterableSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, id<JavaLangIterable> list) {
  ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureStrategy_withId_(self, failureStrategy, list);
}

ComGoogleCommonTruthIterableSubject *new_ComGoogleCommonTruthIterableSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangIterable_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<JavaLangIterable> list) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthIterableSubject, initWithComGoogleCommonTruthFailureStrategy_withJavaLangIterable_, failureStrategy, list)
}

ComGoogleCommonTruthIterableSubject *create_ComGoogleCommonTruthIterableSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangIterable_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<JavaLangIterable> list) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthIterableSubject, initWithComGoogleCommonTruthFailureStrategy_withJavaLangIterable_, failureStrategy, list)
}

void ComGoogleCommonTruthIterableSubject_containsAnyWithNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *self, NSString *failVerb, id<JavaLangIterable> expected) {
  id<JavaUtilCollection> actual = ComGoogleCommonTruthIterableSubject_iterableToCollectionWithJavaLangIterable_([self actual]);
  for (id __strong item in nil_chk(expected)) {
    if ([((id<JavaUtilCollection>) nil_chk(actual)) containsWithId:item]) {
      return;
    }
  }
  [self failWithNSString:failVerb withId:expected];
}

id<JavaUtilCollection> ComGoogleCommonTruthIterableSubject_iterableToCollectionWithJavaLangIterable_(id<JavaLangIterable> iterable) {
  ComGoogleCommonTruthIterableSubject_initialize();
  if ([JavaUtilCollection_class_() isInstance:iterable]) {
    return (id<JavaUtilCollection>) cast_check(iterable, JavaUtilCollection_class_());
  }
  else {
    return ComGoogleCommonCollectLists_newArrayListWithJavaLangIterable_(iterable);
  }
}

id<JavaUtilList> ComGoogleCommonTruthIterableSubject_iterableToListWithJavaLangIterable_(id<JavaLangIterable> iterable) {
  ComGoogleCommonTruthIterableSubject_initialize();
  if ([JavaUtilList_class_() isInstance:iterable]) {
    return (id<JavaUtilList>) cast_check(iterable, JavaUtilList_class_());
  }
  else {
    return ComGoogleCommonCollectLists_newArrayListWithJavaLangIterable_(iterable);
  }
}

id<ComGoogleCommonTruthOrdered> ComGoogleCommonTruthIterableSubject_containsAllWithNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *self, NSString *failVerb, id<JavaLangIterable> expectedIterable) {
  id<JavaUtilList> actual = ComGoogleCommonCollectLists_newLinkedListWithJavaLangIterable_([self actual]);
  id<JavaUtilCollection> expected = ComGoogleCommonTruthIterableSubject_iterableToCollectionWithJavaLangIterable_(expectedIterable);
  id<JavaUtilList> missing = ComGoogleCommonCollectLists_newArrayList();
  id<JavaUtilList> actualNotInOrder = ComGoogleCommonCollectLists_newArrayList();
  jboolean ordered = true;
  for (id __strong e in nil_chk(expected)) {
    jint index = [((id<JavaUtilList>) nil_chk(actual)) indexOfWithId:e];
    if (index != -1) {
      ComGoogleCommonTruthIterableSubject_moveElementsWithJavaUtilList_withJavaUtilCollection_withInt_(actual, actualNotInOrder, index);
      [actual removeWithInt:0];
    }
    else {
      if ([((id<JavaUtilList>) nil_chk(actualNotInOrder)) removeWithId:e]) {
        ordered = false;
      }
      else {
        [((id<JavaUtilList>) nil_chk(missing)) addWithId:e];
      }
    }
  }
  if (![((id<JavaUtilList>) nil_chk(missing)) isEmpty]) {
    [self failWithBadResultsWithNSString:failVerb withId:expected withNSString:@"is missing" withId:ComGoogleCommonTruthSubjectUtils_countDuplicatesWithJavaUtilCollection_(missing)];
  }
  return ordered ? ComGoogleCommonTruthIterableSubject_IN_ORDER : create_ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(self, @"contains all elements in order", expected);
}

void ComGoogleCommonTruthIterableSubject_moveElementsWithJavaUtilList_withJavaUtilCollection_withInt_(id<JavaUtilList> input, id<JavaUtilCollection> output, jint maxElements) {
  ComGoogleCommonTruthIterableSubject_initialize();
  for (jint i = 0; i < maxElements; i++) {
    [((id<JavaUtilCollection>) nil_chk(output)) addWithId:[((id<JavaUtilList>) nil_chk(input)) removeWithInt:0]];
  }
}

id<ComGoogleCommonTruthOrdered> ComGoogleCommonTruthIterableSubject_containsExactlyElementsInWithJavaLangIterable_withBoolean_(ComGoogleCommonTruthIterableSubject *self, id<JavaLangIterable> required, jboolean addElementsInWarning) {
  NSString *failSuffix = addElementsInWarning ? @". Passing an iterable to the varargs method containsExactly(Object...) is often not the correct thing to do. Did you mean to call containsExactlyElementsIn(Iterable) instead?" : @"";
  id<JavaUtilIterator> actualIter = [((id<JavaLangIterable>) nil_chk([self actual])) iterator];
  id<JavaUtilIterator> requiredIter = [((id<JavaLangIterable>) nil_chk(required)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(actualIter)) hasNext] && [((id<JavaUtilIterator>) nil_chk(requiredIter)) hasNext]) {
    id actualElement = [actualIter next];
    id requiredElement = [((id<JavaUtilIterator>) nil_chk(requiredIter)) next];
    if (!ComGoogleCommonBaseObjects_equalWithId_withId_(actualElement, requiredElement)) {
      id<JavaUtilCollection> missing = ComGoogleCommonCollectLists_newArrayList();
      [((id<JavaUtilCollection>) nil_chk(missing)) addWithId:requiredElement];
      ComGoogleCommonCollectIterators_addAllWithJavaUtilCollection_withJavaUtilIterator_(missing, requiredIter);
      id<JavaUtilCollection> extra = ComGoogleCommonCollectLists_newArrayList();
      if (![missing removeWithId:actualElement]) {
        [((id<JavaUtilCollection>) nil_chk(extra)) addWithId:actualElement];
      }
      while ([actualIter hasNext]) {
        id item = [actualIter next];
        if (![missing removeWithId:item]) {
          [((id<JavaUtilCollection>) nil_chk(extra)) addWithId:item];
        }
      }
      if (![missing isEmpty]) {
        if (![((id<JavaUtilCollection>) nil_chk(extra)) isEmpty]) {
          [self failWithRawMessageWithNSString:@"Not true that %s contains exactly <%s>. It is missing <%s> and has unexpected items <%s>%s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], required, ComGoogleCommonTruthSubjectUtils_countDuplicatesWithJavaUtilCollection_(missing), ComGoogleCommonTruthSubjectUtils_countDuplicatesWithJavaUtilCollection_(extra), failSuffix } count:5 type:NSObject_class_()]];
        }
        else {
          ComGoogleCommonTruthIterableSubject_failWithBadResultsAndSuffixWithNSString_withId_withNSString_withId_withNSString_(self, @"contains exactly", required, @"is missing", ComGoogleCommonTruthSubjectUtils_countDuplicatesWithJavaUtilCollection_(missing), failSuffix);
        }
      }
      if (![((id<JavaUtilCollection>) nil_chk(extra)) isEmpty]) {
        ComGoogleCommonTruthIterableSubject_failWithBadResultsAndSuffixWithNSString_withId_withNSString_withId_withNSString_(self, @"contains exactly", required, @"has unexpected items", ComGoogleCommonTruthSubjectUtils_countDuplicatesWithJavaUtilCollection_(extra), failSuffix);
      }
      return create_ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(self, @"contains exactly these elements in order", required);
    }
  }
  if ([actualIter hasNext]) {
    ComGoogleCommonTruthIterableSubject_failWithBadResultsAndSuffixWithNSString_withId_withNSString_withId_withNSString_(self, @"contains exactly", required, @"has unexpected items", ComGoogleCommonTruthSubjectUtils_countDuplicatesWithJavaUtilCollection_(ComGoogleCommonCollectLists_newArrayListWithJavaUtilIterator_(actualIter)), failSuffix);
  }
  else if ([((id<JavaUtilIterator>) nil_chk(requiredIter)) hasNext]) {
    ComGoogleCommonTruthIterableSubject_failWithBadResultsAndSuffixWithNSString_withId_withNSString_withId_withNSString_(self, @"contains exactly", required, @"is missing", ComGoogleCommonTruthSubjectUtils_countDuplicatesWithJavaUtilCollection_(ComGoogleCommonCollectLists_newArrayListWithJavaUtilIterator_(requiredIter)), failSuffix);
  }
  return ComGoogleCommonTruthIterableSubject_IN_ORDER;
}

void ComGoogleCommonTruthIterableSubject_failWithBadResultsAndSuffixWithNSString_withId_withNSString_withId_withNSString_(ComGoogleCommonTruthIterableSubject *self, NSString *verb, id expected, NSString *failVerb, id actual, NSString *suffix) {
  [self failWithRawMessageWithNSString:@"Not true that %s %s <%s>. It %s <%s>%s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], verb, expected, failVerb, (actual == nil) ? @"null reference" : actual, suffix } count:6 type:NSObject_class_()]];
}

void ComGoogleCommonTruthIterableSubject_containsNoneWithNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *self, NSString *failVerb, id<JavaLangIterable> excluded) {
  id<JavaUtilCollection> actual = ComGoogleCommonTruthIterableSubject_iterableToCollectionWithJavaLangIterable_([self actual]);
  id<JavaUtilCollection> present = create_JavaUtilArrayList_init();
  for (id __strong item in nil_chk(ComGoogleCommonCollectSets_newLinkedHashSetWithJavaLangIterable_(excluded))) {
    if ([((id<JavaUtilCollection>) nil_chk(actual)) containsWithId:item]) {
      [present addWithId:item];
    }
  }
  if (![present isEmpty]) {
    [self failWithBadResultsWithNSString:failVerb withId:excluded withNSString:@"contains" withId:present];
  }
}

void ComGoogleCommonTruthIterableSubject_isStrictlyOrderedWithJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *self, id<JavaUtilComparator> comparator) {
  ComGoogleCommonBasePreconditions_checkNotNullWithId_(comparator);
  ComGoogleCommonTruthIterableSubject_pairwiseCheckWithComGoogleCommonTruthIterableSubject_PairwiseChecker_(self, create_ComGoogleCommonTruthIterableSubject_2_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(self, comparator));
}

void ComGoogleCommonTruthIterableSubject_isOrdered(ComGoogleCommonTruthIterableSubject *self) {
  ComGoogleCommonTruthIterableSubject_isOrderedWithJavaUtilComparator_(self, ComGoogleCommonCollectOrdering_natural());
}

void ComGoogleCommonTruthIterableSubject_isOrderedWithJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *self, id<JavaUtilComparator> comparator) {
  ComGoogleCommonBasePreconditions_checkNotNullWithId_(comparator);
  ComGoogleCommonTruthIterableSubject_pairwiseCheckWithComGoogleCommonTruthIterableSubject_PairwiseChecker_(self, create_ComGoogleCommonTruthIterableSubject_3_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(self, comparator));
}

void ComGoogleCommonTruthIterableSubject_pairwiseCheckWithComGoogleCommonTruthIterableSubject_PairwiseChecker_(ComGoogleCommonTruthIterableSubject *self, id<ComGoogleCommonTruthIterableSubject_PairwiseChecker> checker) {
  id<JavaUtilIterator> iterator = [((id<JavaLangIterable>) nil_chk([self actual])) iterator];
  if ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    id prev = [iterator next];
    while ([iterator hasNext]) {
      id next = [iterator next];
      [((id<ComGoogleCommonTruthIterableSubject_PairwiseChecker>) nil_chk(checker)) checkWithId:prev withId:next];
      prev = next;
    }
  }
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthIterableSubject)

@implementation ComGoogleCommonTruthIterableSubject_NotInOrder

- (instancetype)initWithComGoogleCommonTruthIterableSubject:(ComGoogleCommonTruthIterableSubject * __nonnull)outer$
                                               withNSString:(NSString * __nonnull)check
                                       withJavaLangIterable:(id<JavaLangIterable> __nonnull)required {
  ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(self, outer$, check, required);
  return self;
}

- (void)inOrder {
  [this$0_ failWithNSString:check_ withId:required_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(check_);
  RELEASE_(required_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthIterableSubject:withNSString:withJavaLangIterable:);
  methods[1].selector = @selector(inOrder);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonTruthIterableSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "check_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "required_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaLangIterable;", "(Ljava/lang/String;Ljava/lang/Iterable<*>;)V", "Ljava/lang/Iterable<*>;", "LComGoogleCommonTruthIterableSubject;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthIterableSubject_NotInOrder = { "NotInOrder", "com.google.common.truth", ptrTable, methods, fields, 7, 0x2, 2, 3, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonTruthIterableSubject_NotInOrder;
}

@end

void ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject_NotInOrder *self, ComGoogleCommonTruthIterableSubject *outer$, NSString *check, id<JavaLangIterable> required) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->check_, check);
  JreStrongAssign(&self->required_, required);
}

ComGoogleCommonTruthIterableSubject_NotInOrder *new_ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *outer$, NSString *check, id<JavaLangIterable> required) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthIterableSubject_NotInOrder, initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_, outer$, check, required)
}

ComGoogleCommonTruthIterableSubject_NotInOrder *create_ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject *outer$, NSString *check, id<JavaLangIterable> required) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthIterableSubject_NotInOrder, initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_, outer$, check, required)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthIterableSubject_NotInOrder)

@implementation ComGoogleCommonTruthIterableSubject_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonTruthIterableSubject_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)inOrder {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(inOrder);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonTruthIterableSubject;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthIterableSubject_1 = { "", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonTruthIterableSubject_1;
}

@end

void ComGoogleCommonTruthIterableSubject_1_init(ComGoogleCommonTruthIterableSubject_1 *self) {
  NSObject_init(self);
}

ComGoogleCommonTruthIterableSubject_1 *new_ComGoogleCommonTruthIterableSubject_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthIterableSubject_1, init)
}

ComGoogleCommonTruthIterableSubject_1 *create_ComGoogleCommonTruthIterableSubject_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthIterableSubject_1, init)
}

@implementation ComGoogleCommonTruthIterableSubject_PairwiseChecker

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(checkWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "check", "LNSObject;LNSObject;", "LComGoogleCommonTruthIterableSubject;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthIterableSubject_PairwiseChecker = { "PairwiseChecker", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x60a, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonTruthIterableSubject_PairwiseChecker;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthIterableSubject_PairwiseChecker)

@implementation ComGoogleCommonTruthIterableSubject_2

- (instancetype)initWithComGoogleCommonTruthIterableSubject:(ComGoogleCommonTruthIterableSubject * __nonnull)outer$
                                     withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)capture$0 {
  ComGoogleCommonTruthIterableSubject_2_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(self, outer$, capture$0);
  return self;
}

- (void)checkWithId:(id __nonnull)prev
             withId:(id __nonnull)next {
  if ([((id<JavaUtilComparator>) nil_chk((val$comparator_))) compareWithId:prev withId:next] >= 0) {
    [this$0_ failWithNSString:@"is strictly ordered" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ prev, next } count:2 type:NSObject_class_()]];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$comparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthIterableSubject:withJavaUtilComparator:);
  methods[1].selector = @selector(checkWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonTruthIterableSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "check", "LNSObject;LNSObject;", "Ljava/util/Comparator<*>;", "LComGoogleCommonTruthIterableSubject;", "isStrictlyOrderedWithJavaUtilComparator:" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthIterableSubject_2 = { "", "com.google.common.truth", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, -1, -1 };
  return &_ComGoogleCommonTruthIterableSubject_2;
}

@end

void ComGoogleCommonTruthIterableSubject_2_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject_2 *self, ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$comparator_, capture$0);
  NSObject_init(self);
}

ComGoogleCommonTruthIterableSubject_2 *new_ComGoogleCommonTruthIterableSubject_2_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthIterableSubject_2, initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_, outer$, capture$0)
}

ComGoogleCommonTruthIterableSubject_2 *create_ComGoogleCommonTruthIterableSubject_2_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthIterableSubject_2, initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_, outer$, capture$0)
}

@implementation ComGoogleCommonTruthIterableSubject_3

- (instancetype)initWithComGoogleCommonTruthIterableSubject:(ComGoogleCommonTruthIterableSubject * __nonnull)outer$
                                     withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)capture$0 {
  ComGoogleCommonTruthIterableSubject_3_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(self, outer$, capture$0);
  return self;
}

- (void)checkWithId:(id __nonnull)prev
             withId:(id __nonnull)next {
  if ([((id<JavaUtilComparator>) nil_chk((val$comparator_))) compareWithId:prev withId:next] > 0) {
    [this$0_ failWithNSString:@"is ordered" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ prev, next } count:2 type:NSObject_class_()]];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$comparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthIterableSubject:withJavaUtilComparator:);
  methods[1].selector = @selector(checkWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonTruthIterableSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "check", "LNSObject;LNSObject;", "Ljava/util/Comparator<*>;", "LComGoogleCommonTruthIterableSubject;", "isOrderedWithJavaUtilComparator:" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthIterableSubject_3 = { "", "com.google.common.truth", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, -1, -1 };
  return &_ComGoogleCommonTruthIterableSubject_3;
}

@end

void ComGoogleCommonTruthIterableSubject_3_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject_3 *self, ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$comparator_, capture$0);
  NSObject_init(self);
}

ComGoogleCommonTruthIterableSubject_3 *new_ComGoogleCommonTruthIterableSubject_3_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthIterableSubject_3, initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_, outer$, capture$0)
}

ComGoogleCommonTruthIterableSubject_3 *create_ComGoogleCommonTruthIterableSubject_3_initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_(ComGoogleCommonTruthIterableSubject *outer$, id<JavaUtilComparator> capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthIterableSubject_3, initWithComGoogleCommonTruthIterableSubject_withJavaUtilComparator_, outer$, capture$0)
}

@implementation ComGoogleCommonTruthIterableSubject_UsingCorrespondence

- (instancetype)initWithComGoogleCommonTruthIterableSubject:(ComGoogleCommonTruthIterableSubject * __nonnull)outer$
                     withComGoogleCommonTruthCorrespondence:(ComGoogleCommonTruthCorrespondence * __nonnull)correspondence {
  ComGoogleCommonTruthIterableSubject_UsingCorrespondence_initWithComGoogleCommonTruthIterableSubject_withComGoogleCommonTruthCorrespondence_(self, outer$, correspondence);
  return self;
}

- (void)containsWithId:(id __nullable)expected {
  for (id __strong actual in nil_chk(ComGoogleCommonTruthIterableSubject_UsingCorrespondence_getCastActual(self))) {
    if ([((ComGoogleCommonTruthCorrespondence *) nil_chk(correspondence_)) compareWithId:actual withId:expected]) {
      return;
    }
  }
  [this$0_ failWithNSString:JreStrcat("$@", @"contains at least one element that ", correspondence_) withId:expected];
}

- (void)doesNotContainWithId:(id __nullable)excluded {
  id<JavaUtilList> matchingElements = create_JavaUtilArrayList_init();
  for (id __strong actual in nil_chk(ComGoogleCommonTruthIterableSubject_UsingCorrespondence_getCastActual(self))) {
    if ([((ComGoogleCommonTruthCorrespondence *) nil_chk(correspondence_)) compareWithId:actual withId:excluded]) {
      [matchingElements addWithId:actual];
    }
  }
  if (![matchingElements isEmpty]) {
    [this$0_ failWithRawMessageWithNSString:@"%s should not have contained an element that %s <%s>. It contained the following such elements: <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], correspondence_, excluded, matchingElements } count:4 type:NSObject_class_()]];
  }
}

- (id<ComGoogleCommonTruthOrdered>)containsExactlyWithNSObjectArray:(IOSObjectArray * __nullable)expected {
  return [self containsExactlyElementsInWithJavaLangIterable:(expected == nil) ? ComGoogleCommonCollectLists_newArrayListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSObject_class_()]) : JavaUtilArrays_asListWithNSObjectArray_(expected)];
}

- (id<ComGoogleCommonTruthOrdered>)containsExactlyElementsInWithJavaLangIterable:(id<JavaLangIterable> __nonnull)expected {
  id<JavaUtilList> actualList = ComGoogleCommonTruthIterableSubject_iterableToListWithJavaLangIterable_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence_getCastActual(self));
  id<JavaUtilList> expectedList = ComGoogleCommonTruthIterableSubject_iterableToListWithJavaLangIterable_(expected);
  if (ComGoogleCommonTruthIterableSubject_UsingCorrespondence_correspondInOrderExactlyWithJavaUtilIterator_withJavaUtilIterator_(self, [((id<JavaUtilList>) nil_chk(actualList)) iterator], [((id<JavaUtilList>) nil_chk(expectedList)) iterator])) {
    return JreLoadStatic(ComGoogleCommonTruthIterableSubject, IN_ORDER);
  }
  ComGoogleCommonCollectImmutableSetMultimap *candidateMapping = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findCandidateMappingWithJavaUtilList_withJavaUtilList_(self, actualList, expectedList);
  [self failIfCandidateMappingHasMissingOrExtraWithJavaUtilList:actualList withJavaUtilList:expectedList withComGoogleCommonCollectImmutableMultimap:candidateMapping];
  ComGoogleCommonCollectImmutableBiMap *maximalOneToOneMapping = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findMaximalOneToOneMappingWithComGoogleCommonCollectImmutableMultimap_(self, candidateMapping);
  [self failIfOneToOneMappingHasMissingOrExtraWithJavaUtilList:actualList withJavaUtilList:expectedList withComGoogleCommonCollectBiMap:maximalOneToOneMapping];
  return create_ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(this$0_, JreStrcat("$@$", @"contains, in order, exactly one element that ", correspondence_, @" each element of"), expected);
}

- (jboolean)correspondInOrderExactlyWithJavaUtilIterator:(id<JavaUtilIterator> __nonnull)actual
                                    withJavaUtilIterator:(id<JavaUtilIterator> __nonnull)expected {
  return ComGoogleCommonTruthIterableSubject_UsingCorrespondence_correspondInOrderExactlyWithJavaUtilIterator_withJavaUtilIterator_(self, actual, expected);
}

- (ComGoogleCommonCollectImmutableSetMultimap *)findCandidateMappingWithJavaUtilList:(id<JavaUtilList> __nonnull)actual
                                                                    withJavaUtilList:(id<JavaUtilList> __nonnull)expected {
  return ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findCandidateMappingWithJavaUtilList_withJavaUtilList_(self, actual, expected);
}

- (void)failIfCandidateMappingHasMissingOrExtraWithJavaUtilList:(id<JavaUtilList> __nonnull)actual
                                               withJavaUtilList:(id<JavaUtilList> __nonnull)expected
                    withComGoogleCommonCollectImmutableMultimap:(ComGoogleCommonCollectImmutableMultimap * __nonnull)mapping {
  id<JavaUtilList> extra = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findNotIndexedWithJavaUtilList_withJavaUtilSet_(self, actual, [((ComGoogleCommonCollectImmutableMultimap *) nil_chk(mapping)) keySet]);
  id<JavaUtilList> missing = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findNotIndexedWithJavaUtilList_withJavaUtilSet_(self, expected, [((ComGoogleCommonCollectImmutableMultimap *) nil_chk([mapping inverse])) keySet]);
  ComGoogleCommonBaseOptional *missingOrExtraMessage = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_describeMissingOrExtraWithJavaUtilList_withJavaUtilList_(self, extra, missing);
  if ([((ComGoogleCommonBaseOptional *) nil_chk(missingOrExtraMessage)) isPresent]) {
    [this$0_ failWithRawMessageWithNSString:@"Not true that %s contains exactly one element that %s each element of <%s>. It %s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], correspondence_, expected, [missingOrExtraMessage get] } count:4 type:NSObject_class_()]];
  }
}

- (ComGoogleCommonBaseOptional *)describeMissingOrExtraWithJavaUtilList:(id<JavaUtilList> __nonnull)extra
                                                       withJavaUtilList:(id<JavaUtilList> __nonnull)missing {
  return ComGoogleCommonTruthIterableSubject_UsingCorrespondence_describeMissingOrExtraWithJavaUtilList_withJavaUtilList_(self, extra, missing);
}

- (id<JavaUtilList>)findNotIndexedWithJavaUtilList:(id<JavaUtilList> __nonnull)list
                                   withJavaUtilSet:(id<JavaUtilSet> __nonnull)indexes {
  return ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findNotIndexedWithJavaUtilList_withJavaUtilSet_(self, list, indexes);
}

- (NSString *)formatMissingWithJavaUtilList:(id<JavaUtilList> __nonnull)missing {
  return ComGoogleCommonTruthIterableSubject_UsingCorrespondence_formatMissingWithJavaUtilList_(self, missing);
}

- (ComGoogleCommonCollectImmutableBiMap *)findMaximalOneToOneMappingWithComGoogleCommonCollectImmutableMultimap:(ComGoogleCommonCollectImmutableMultimap * __nonnull)edges {
  return ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findMaximalOneToOneMappingWithComGoogleCommonCollectImmutableMultimap_(self, edges);
}

- (void)failIfOneToOneMappingHasMissingOrExtraWithJavaUtilList:(id<JavaUtilList> __nonnull)actual
                                              withJavaUtilList:(id<JavaUtilList> __nonnull)expected
                               withComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap> __nonnull)mapping {
  id<JavaUtilList> extra = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findNotIndexedWithJavaUtilList_withJavaUtilSet_(self, actual, [((id<ComGoogleCommonCollectBiMap>) nil_chk(mapping)) keySet]);
  id<JavaUtilList> missing = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findNotIndexedWithJavaUtilList_withJavaUtilSet_(self, expected, [mapping values]);
  ComGoogleCommonBaseOptional *missingOrExtraMessage = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_describeMissingOrExtraWithJavaUtilList_withJavaUtilList_(self, extra, missing);
  if ([((ComGoogleCommonBaseOptional *) nil_chk(missingOrExtraMessage)) isPresent]) {
    [this$0_ failWithRawMessageWithNSString:@"Not true that %s contains exactly one element that %s each element of <%s>. It contains at least one element that matches each expected element, and every element it contains matches at least one expected element, but there was no 1:1 mapping between all the actual and expected elements. Using the most complete 1:1 mapping (or one such mapping, if there is a tie), it %s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], correspondence_, expected, [missingOrExtraMessage get] } count:4 type:NSObject_class_()]];
  }
}

- (id<ComGoogleCommonTruthOrdered>)containsAllOfWithId:(id __nullable)first
                                                withId:(id __nullable)second
                                     withNSObjectArray:(IOSObjectArray * __nullable)rest {
  return [self containsAllInWithJavaLangIterable:ComGoogleCommonTruthSubjectUtils_accumulateWithId_withId_withNSObjectArray_(first, second, rest)];
}

- (id<ComGoogleCommonTruthOrdered>)containsAllInWithJavaLangIterable:(id<JavaLangIterable> __nonnull)expected {
  id<JavaUtilList> actualList = ComGoogleCommonTruthIterableSubject_iterableToListWithJavaLangIterable_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence_getCastActual(self));
  id<JavaUtilList> expectedList = ComGoogleCommonTruthIterableSubject_iterableToListWithJavaLangIterable_(expected);
  if (ComGoogleCommonTruthIterableSubject_UsingCorrespondence_correspondInOrderAllInWithJavaUtilIterator_withJavaUtilIterator_(self, [((id<JavaUtilList>) nil_chk(actualList)) iterator], [((id<JavaUtilList>) nil_chk(expectedList)) iterator])) {
    return JreLoadStatic(ComGoogleCommonTruthIterableSubject, IN_ORDER);
  }
  ComGoogleCommonCollectImmutableSetMultimap *candidateMapping = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findCandidateMappingWithJavaUtilList_withJavaUtilList_(self, actualList, expectedList);
  [self failIfCandidateMappingHasMissingWithJavaUtilList:expectedList withComGoogleCommonCollectImmutableMultimap:candidateMapping];
  ComGoogleCommonCollectImmutableBiMap *maximalOneToOneMapping = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findMaximalOneToOneMappingWithComGoogleCommonCollectImmutableMultimap_(self, candidateMapping);
  [self failIfOneToOneMappingHasMissingWithJavaUtilList:expectedList withComGoogleCommonCollectBiMap:maximalOneToOneMapping];
  return create_ComGoogleCommonTruthIterableSubject_NotInOrder_initWithComGoogleCommonTruthIterableSubject_withNSString_withJavaLangIterable_(this$0_, JreStrcat("$@$", @"contains, in order, at least one element that ", correspondence_, @" each element of"), expected);
}

- (jboolean)correspondInOrderAllInWithJavaUtilIterator:(id<JavaUtilIterator> __nonnull)actual
                                  withJavaUtilIterator:(id<JavaUtilIterator> __nonnull)expected {
  return ComGoogleCommonTruthIterableSubject_UsingCorrespondence_correspondInOrderAllInWithJavaUtilIterator_withJavaUtilIterator_(self, actual, expected);
}

- (jboolean)findCorrespondingWithJavaUtilIterator:(id<JavaUtilIterator> __nonnull)actual
                                           withId:(id __nonnull)expectedElement {
  return ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findCorrespondingWithJavaUtilIterator_withId_(self, actual, expectedElement);
}

- (void)failIfCandidateMappingHasMissingWithJavaUtilList:(id<JavaUtilList> __nonnull)expected
             withComGoogleCommonCollectImmutableMultimap:(ComGoogleCommonCollectImmutableMultimap * __nonnull)mapping {
  id<JavaUtilList> missing = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findNotIndexedWithJavaUtilList_withJavaUtilSet_(self, expected, [((ComGoogleCommonCollectImmutableMultimap *) nil_chk([((ComGoogleCommonCollectImmutableMultimap *) nil_chk(mapping)) inverse])) keySet]);
  if (![((id<JavaUtilList>) nil_chk(missing)) isEmpty]) {
    [this$0_ failWithRawMessageWithNSString:@"Not true that %s contains at least one element that %s each element of <%s>. It is missing an element that %s %s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], correspondence_, expected, correspondence_, ComGoogleCommonTruthIterableSubject_UsingCorrespondence_formatMissingWithJavaUtilList_(self, missing) } count:5 type:NSObject_class_()]];
  }
}

- (void)failIfOneToOneMappingHasMissingWithJavaUtilList:(id<JavaUtilList> __nonnull)expected
                        withComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap> __nonnull)mapping {
  id<JavaUtilList> missing = ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findNotIndexedWithJavaUtilList_withJavaUtilSet_(self, expected, [((id<ComGoogleCommonCollectBiMap>) nil_chk(mapping)) values]);
  if (![((id<JavaUtilList>) nil_chk(missing)) isEmpty]) {
    [this$0_ failWithRawMessageWithNSString:@"Not true that %s contains at least one element that %s each element of <%s>. It contains at least one element that matches each expected element, but there was no 1:1 mapping between all the expected elements and any subset of the actual elements. Using the most complete 1:1 mapping (or one such mapping, if there is a tie), it is missing an element that %s %s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], correspondence_, expected, correspondence_, ComGoogleCommonTruthIterableSubject_UsingCorrespondence_formatMissingWithJavaUtilList_(self, missing) } count:5 type:NSObject_class_()]];
  }
}

- (void)containsAnyOfWithId:(id __nullable)first
                     withId:(id __nullable)second
          withNSObjectArray:(IOSObjectArray * __nullable)rest {
  ComGoogleCommonTruthIterableSubject_UsingCorrespondence_containsAnyWithNSString_withJavaLangIterable_(self, ComGoogleCommonTruthStringUtil_formatWithNSString_withNSObjectArray_(@"contains at least one element that %s any of", [IOSObjectArray arrayWithObjects:(id[]){ correspondence_ } count:1 type:NSObject_class_()]), ComGoogleCommonTruthSubjectUtils_accumulateWithId_withId_withNSObjectArray_(first, second, rest));
}

- (void)containsAnyInWithJavaLangIterable:(id<JavaLangIterable> __nonnull)expected {
  ComGoogleCommonTruthIterableSubject_UsingCorrespondence_containsAnyWithNSString_withJavaLangIterable_(self, ComGoogleCommonTruthStringUtil_formatWithNSString_withNSObjectArray_(@"contains at least one element that %s any element in", [IOSObjectArray arrayWithObjects:(id[]){ correspondence_ } count:1 type:NSObject_class_()]), expected);
}

- (void)containsAnyWithNSString:(NSString * __nonnull)failVerb
           withJavaLangIterable:(id<JavaLangIterable> __nonnull)expected {
  ComGoogleCommonTruthIterableSubject_UsingCorrespondence_containsAnyWithNSString_withJavaLangIterable_(self, failVerb, expected);
}

- (void)containsNoneOfWithId:(id __nullable)firstExcluded
                      withId:(id __nullable)secondExcluded
           withNSObjectArray:(IOSObjectArray * __nullable)restOfExcluded {
  ComGoogleCommonTruthIterableSubject_UsingCorrespondence_containsNoneWithNSString_withJavaLangIterable_(self, @"any of", ComGoogleCommonTruthSubjectUtils_accumulateWithId_withId_withNSObjectArray_(firstExcluded, secondExcluded, restOfExcluded));
}

- (void)containsNoneInWithJavaLangIterable:(id<JavaLangIterable> __nonnull)excluded {
  ComGoogleCommonTruthIterableSubject_UsingCorrespondence_containsNoneWithNSString_withJavaLangIterable_(self, @"any element in", excluded);
}

- (void)containsNoneWithNSString:(NSString * __nonnull)excludedPrefix
            withJavaLangIterable:(id<JavaLangIterable> __nonnull)excluded {
  ComGoogleCommonTruthIterableSubject_UsingCorrespondence_containsNoneWithNSString_withJavaLangIterable_(self, excludedPrefix, excluded);
}

- (id<JavaLangIterable>)getCastActual {
  return ComGoogleCommonTruthIterableSubject_UsingCorrespondence_getCastActual(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(correspondence_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, 5 },
    { NULL, "V", 0x1, 6, 3, -1, 4, -1, 7 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x91, 8, 9, -1, 10, 11, 12 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "Z", 0x2, 16, 17, -1, 18, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableSetMultimap;", 0x2, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x0, 22, 23, -1, 24, -1, -1 },
    { NULL, "LComGoogleCommonBaseOptional;", 0x2, 25, 20, -1, 26, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 27, 28, -1, 29, -1, -1 },
    { NULL, "LNSString;", 0x2, 30, 31, -1, 32, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableBiMap;", 0x2, 33, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x0, 36, 37, -1, 38, -1, -1 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x91, 39, 40, -1, 41, 42, 43 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x1, 44, 14, -1, 15, -1, -1 },
    { NULL, "Z", 0x2, 45, 17, -1, 18, -1, -1 },
    { NULL, "Z", 0x2, 46, 47, -1, 48, -1, -1 },
    { NULL, "V", 0x0, 49, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x0, 52, 53, -1, 54, -1, -1 },
    { NULL, "V", 0x91, 55, 40, -1, 56, 57, 58 },
    { NULL, "V", 0x1, 59, 14, -1, 60, -1, -1 },
    { NULL, "V", 0x2, 61, 62, -1, 63, -1, -1 },
    { NULL, "V", 0x91, 64, 40, -1, 56, 65, 66 },
    { NULL, "V", 0x1, 67, 14, -1, 60, -1, -1 },
    { NULL, "V", 0x2, 68, 62, -1, 63, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x2, -1, -1, -1, 69, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthIterableSubject:withComGoogleCommonTruthCorrespondence:);
  methods[1].selector = @selector(containsWithId:);
  methods[2].selector = @selector(doesNotContainWithId:);
  methods[3].selector = @selector(containsExactlyWithNSObjectArray:);
  methods[4].selector = @selector(containsExactlyElementsInWithJavaLangIterable:);
  methods[5].selector = @selector(correspondInOrderExactlyWithJavaUtilIterator:withJavaUtilIterator:);
  methods[6].selector = @selector(findCandidateMappingWithJavaUtilList:withJavaUtilList:);
  methods[7].selector = @selector(failIfCandidateMappingHasMissingOrExtraWithJavaUtilList:withJavaUtilList:withComGoogleCommonCollectImmutableMultimap:);
  methods[8].selector = @selector(describeMissingOrExtraWithJavaUtilList:withJavaUtilList:);
  methods[9].selector = @selector(findNotIndexedWithJavaUtilList:withJavaUtilSet:);
  methods[10].selector = @selector(formatMissingWithJavaUtilList:);
  methods[11].selector = @selector(findMaximalOneToOneMappingWithComGoogleCommonCollectImmutableMultimap:);
  methods[12].selector = @selector(failIfOneToOneMappingHasMissingOrExtraWithJavaUtilList:withJavaUtilList:withComGoogleCommonCollectBiMap:);
  methods[13].selector = @selector(containsAllOfWithId:withId:withNSObjectArray:);
  methods[14].selector = @selector(containsAllInWithJavaLangIterable:);
  methods[15].selector = @selector(correspondInOrderAllInWithJavaUtilIterator:withJavaUtilIterator:);
  methods[16].selector = @selector(findCorrespondingWithJavaUtilIterator:withId:);
  methods[17].selector = @selector(failIfCandidateMappingHasMissingWithJavaUtilList:withComGoogleCommonCollectImmutableMultimap:);
  methods[18].selector = @selector(failIfOneToOneMappingHasMissingWithJavaUtilList:withComGoogleCommonCollectBiMap:);
  methods[19].selector = @selector(containsAnyOfWithId:withId:withNSObjectArray:);
  methods[20].selector = @selector(containsAnyInWithJavaLangIterable:);
  methods[21].selector = @selector(containsAnyWithNSString:withJavaLangIterable:);
  methods[22].selector = @selector(containsNoneOfWithId:withId:withNSObjectArray:);
  methods[23].selector = @selector(containsNoneInWithJavaLangIterable:);
  methods[24].selector = @selector(containsNoneWithNSString:withJavaLangIterable:);
  methods[25].selector = @selector(getCastActual);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonTruthIterableSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "correspondence_", "LComGoogleCommonTruthCorrespondence;", .constantValue.asLong = 0, 0x12, -1, -1, 70, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonTruthCorrespondence;", "(Lcom/google/common/truth/Correspondence<TA;TE;>;)V", "contains", "LNSObject;", "(TE;)V", (void *)&ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$0, "doesNotContain", (void *)&ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$1, "containsExactly", "[LNSObject;", "([TE;)Lcom/google/common/truth/Ordered;", (void *)&ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$2, (void *)&ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$3, "containsExactlyElementsIn", "LJavaLangIterable;", "(Ljava/lang/Iterable<+TE;>;)Lcom/google/common/truth/Ordered;", "correspondInOrderExactly", "LJavaUtilIterator;LJavaUtilIterator;", "(Ljava/util/Iterator<+TA;>;Ljava/util/Iterator<+TE;>;)Z", "findCandidateMapping", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<+TA;>;Ljava/util/List<+TE;>;)Lcom/google/common/collect/ImmutableSetMultimap<Ljava/lang/Integer;Ljava/lang/Integer;>;", "failIfCandidateMappingHasMissingOrExtra", "LJavaUtilList;LJavaUtilList;LComGoogleCommonCollectImmutableMultimap;", "(Ljava/util/List<+TA;>;Ljava/util/List<+TE;>;Lcom/google/common/collect/ImmutableMultimap<Ljava/lang/Integer;Ljava/lang/Integer;>;)V", "describeMissingOrExtra", "(Ljava/util/List<+TA;>;Ljava/util/List<+TE;>;)Lcom/google/common/base/Optional<Ljava/lang/String;>;", "findNotIndexed", "LJavaUtilList;LJavaUtilSet;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;Ljava/util/Set<Ljava/lang/Integer;>;)Ljava/util/List<TT;>;", "formatMissing", "LJavaUtilList;", "(Ljava/util/List<*>;)Ljava/lang/String;", "findMaximalOneToOneMapping", "LComGoogleCommonCollectImmutableMultimap;", "(Lcom/google/common/collect/ImmutableMultimap<Ljava/lang/Integer;Ljava/lang/Integer;>;)Lcom/google/common/collect/ImmutableBiMap<Ljava/lang/Integer;Ljava/lang/Integer;>;", "failIfOneToOneMappingHasMissingOrExtra", "LJavaUtilList;LJavaUtilList;LComGoogleCommonCollectBiMap;", "(Ljava/util/List<+TA;>;Ljava/util/List<+TE;>;Lcom/google/common/collect/BiMap<Ljava/lang/Integer;Ljava/lang/Integer;>;)V", "containsAllOf", "LNSObject;LNSObject;[LNSObject;", "(TE;TE;[TE;)Lcom/google/common/truth/Ordered;", (void *)&ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$4, (void *)&ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$5, "containsAllIn", "correspondInOrderAllIn", "findCorresponding", "LJavaUtilIterator;LNSObject;", "(Ljava/util/Iterator<+TA;>;TE;)Z", "failIfCandidateMappingHasMissing", "LJavaUtilList;LComGoogleCommonCollectImmutableMultimap;", "(Ljava/util/List<+TE;>;Lcom/google/common/collect/ImmutableMultimap<Ljava/lang/Integer;Ljava/lang/Integer;>;)V", "failIfOneToOneMappingHasMissing", "LJavaUtilList;LComGoogleCommonCollectBiMap;", "(Ljava/util/List<+TE;>;Lcom/google/common/collect/BiMap<Ljava/lang/Integer;Ljava/lang/Integer;>;)V", "containsAnyOf", "(TE;TE;[TE;)V", (void *)&ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$6, (void *)&ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$7, "containsAnyIn", "(Ljava/lang/Iterable<+TE;>;)V", "containsAny", "LNSString;LJavaLangIterable;", "(Ljava/lang/String;Ljava/lang/Iterable<+TE;>;)V", "containsNoneOf", (void *)&ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$8, (void *)&ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$9, "containsNoneIn", "containsNone", "()Ljava/lang/Iterable<TA;>;", "Lcom/google/common/truth/Correspondence<TA;TE;>;", "LComGoogleCommonTruthIterableSubject;", "<A:Ljava/lang/Object;E:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthIterableSubject_UsingCorrespondence = { "UsingCorrespondence", "com.google.common.truth", ptrTable, methods, fields, 7, 0x11, 26, 2, 71, -1, -1, 72, -1 };
  return &_ComGoogleCommonTruthIterableSubject_UsingCorrespondence;
}

@end

void ComGoogleCommonTruthIterableSubject_UsingCorrespondence_initWithComGoogleCommonTruthIterableSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, ComGoogleCommonTruthIterableSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->correspondence_, ComGoogleCommonBasePreconditions_checkNotNullWithId_(correspondence));
}

ComGoogleCommonTruthIterableSubject_UsingCorrespondence *new_ComGoogleCommonTruthIterableSubject_UsingCorrespondence_initWithComGoogleCommonTruthIterableSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthIterableSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthIterableSubject_UsingCorrespondence, initWithComGoogleCommonTruthIterableSubject_withComGoogleCommonTruthCorrespondence_, outer$, correspondence)
}

ComGoogleCommonTruthIterableSubject_UsingCorrespondence *create_ComGoogleCommonTruthIterableSubject_UsingCorrespondence_initWithComGoogleCommonTruthIterableSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthIterableSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthIterableSubject_UsingCorrespondence, initWithComGoogleCommonTruthIterableSubject_withComGoogleCommonTruthCorrespondence_, outer$, correspondence)
}

jboolean ComGoogleCommonTruthIterableSubject_UsingCorrespondence_correspondInOrderExactlyWithJavaUtilIterator_withJavaUtilIterator_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilIterator> actual, id<JavaUtilIterator> expected) {
  while ([((id<JavaUtilIterator>) nil_chk(actual)) hasNext] && [((id<JavaUtilIterator>) nil_chk(expected)) hasNext]) {
    id actualElement = [actual next];
    id expectedElement = [((id<JavaUtilIterator>) nil_chk(expected)) next];
    if (![((ComGoogleCommonTruthCorrespondence *) nil_chk(self->correspondence_)) compareWithId:actualElement withId:expectedElement]) {
      return false;
    }
  }
  return !([actual hasNext] || [((id<JavaUtilIterator>) nil_chk(expected)) hasNext]);
}

ComGoogleCommonCollectImmutableSetMultimap *ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findCandidateMappingWithJavaUtilList_withJavaUtilList_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilList> actual, id<JavaUtilList> expected) {
  ComGoogleCommonCollectImmutableSetMultimap_Builder *mapping = ComGoogleCommonCollectImmutableSetMultimap_builder();
  for (jint actualIndex = 0; actualIndex < [((id<JavaUtilList>) nil_chk(actual)) size]; actualIndex++) {
    for (jint expectedIndex = 0; expectedIndex < [((id<JavaUtilList>) nil_chk(expected)) size]; expectedIndex++) {
      if ([((ComGoogleCommonTruthCorrespondence *) nil_chk(self->correspondence_)) compareWithId:[actual getWithInt:actualIndex] withId:[expected getWithInt:expectedIndex]]) {
        [((ComGoogleCommonCollectImmutableSetMultimap_Builder *) nil_chk(mapping)) putWithId:JavaLangInteger_valueOfWithInt_(actualIndex) withId:JavaLangInteger_valueOfWithInt_(expectedIndex)];
      }
    }
  }
  return [((ComGoogleCommonCollectImmutableSetMultimap_Builder *) nil_chk(mapping)) build];
}

ComGoogleCommonBaseOptional *ComGoogleCommonTruthIterableSubject_UsingCorrespondence_describeMissingOrExtraWithJavaUtilList_withJavaUtilList_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilList> extra, id<JavaUtilList> missing) {
  if (![((id<JavaUtilList>) nil_chk(missing)) isEmpty] && ![((id<JavaUtilList>) nil_chk(extra)) isEmpty]) {
    return ComGoogleCommonBaseOptional_ofWithId_(ComGoogleCommonTruthStringUtil_formatWithNSString_withNSObjectArray_(@"is missing an element that %s %s and has unexpected elements <%s>", [IOSObjectArray arrayWithObjects:(id[]){ self->correspondence_, ComGoogleCommonTruthIterableSubject_UsingCorrespondence_formatMissingWithJavaUtilList_(self, missing), extra } count:3 type:NSObject_class_()]));
  }
  else if (![missing isEmpty]) {
    return ComGoogleCommonBaseOptional_ofWithId_(ComGoogleCommonTruthStringUtil_formatWithNSString_withNSObjectArray_(@"is missing an element that %s %s", [IOSObjectArray arrayWithObjects:(id[]){ self->correspondence_, ComGoogleCommonTruthIterableSubject_UsingCorrespondence_formatMissingWithJavaUtilList_(self, missing) } count:2 type:NSObject_class_()]));
  }
  else if (![((id<JavaUtilList>) nil_chk(extra)) isEmpty]) {
    return ComGoogleCommonBaseOptional_ofWithId_(ComGoogleCommonTruthStringUtil_formatWithNSString_withNSObjectArray_(@"has unexpected elements <%s>", [IOSObjectArray arrayWithObjects:(id[]){ extra } count:1 type:NSObject_class_()]));
  }
  else {
    return ComGoogleCommonBaseOptional_absent();
  }
}

id<JavaUtilList> ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findNotIndexedWithJavaUtilList_withJavaUtilSet_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilList> list, id<JavaUtilSet> indexes) {
  if ([((id<JavaUtilSet>) nil_chk(indexes)) size] == [((id<JavaUtilList>) nil_chk(list)) size]) {
    return ComGoogleCommonCollectImmutableList_of();
  }
  id<JavaUtilList> notIndexed = ComGoogleCommonCollectLists_newArrayList();
  for (jint index = 0; index < [list size]; index++) {
    if (![indexes containsWithId:JavaLangInteger_valueOfWithInt_(index)]) {
      [((id<JavaUtilList>) nil_chk(notIndexed)) addWithId:[list getWithInt:index]];
    }
  }
  return notIndexed;
}

NSString *ComGoogleCommonTruthIterableSubject_UsingCorrespondence_formatMissingWithJavaUtilList_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilList> missing) {
  if ([((id<JavaUtilList>) nil_chk(missing)) size] == 1) {
    return JreStrcat("C@C", '<', [missing getWithInt:0], '>');
  }
  else {
    return JreStrcat("$@C", @"each of <", missing, '>');
  }
}

ComGoogleCommonCollectImmutableBiMap *ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findMaximalOneToOneMappingWithComGoogleCommonCollectImmutableMultimap_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, ComGoogleCommonCollectImmutableMultimap *edges) {
  return ComGoogleCommonTruthGraphMatching_maximumCardinalityBipartiteMatchingWithComGoogleCommonCollectMultimap_(edges);
}

jboolean ComGoogleCommonTruthIterableSubject_UsingCorrespondence_correspondInOrderAllInWithJavaUtilIterator_withJavaUtilIterator_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilIterator> actual, id<JavaUtilIterator> expected) {
  while ([((id<JavaUtilIterator>) nil_chk(expected)) hasNext]) {
    id expectedElement = [expected next];
    if (!ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findCorrespondingWithJavaUtilIterator_withId_(self, actual, expectedElement)) {
      return false;
    }
  }
  return true;
}

jboolean ComGoogleCommonTruthIterableSubject_UsingCorrespondence_findCorrespondingWithJavaUtilIterator_withId_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, id<JavaUtilIterator> actual, id expectedElement) {
  while ([((id<JavaUtilIterator>) nil_chk(actual)) hasNext]) {
    id actualElement = [actual next];
    if ([((ComGoogleCommonTruthCorrespondence *) nil_chk(self->correspondence_)) compareWithId:actualElement withId:expectedElement]) {
      return true;
    }
  }
  return false;
}

void ComGoogleCommonTruthIterableSubject_UsingCorrespondence_containsAnyWithNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, NSString *failVerb, id<JavaLangIterable> expected) {
  id<JavaUtilCollection> actual = ComGoogleCommonTruthIterableSubject_iterableToCollectionWithJavaLangIterable_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence_getCastActual(self));
  for (id __strong expectedItem in nil_chk(expected)) {
    for (id __strong actualItem in nil_chk(actual)) {
      if ([((ComGoogleCommonTruthCorrespondence *) nil_chk(self->correspondence_)) compareWithId:actualItem withId:expectedItem]) {
        return;
      }
    }
  }
  [self->this$0_ failWithNSString:failVerb withId:expected];
}

void ComGoogleCommonTruthIterableSubject_UsingCorrespondence_containsNoneWithNSString_withJavaLangIterable_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self, NSString *excludedPrefix, id<JavaLangIterable> excluded) {
  id<JavaUtilCollection> actual = ComGoogleCommonTruthIterableSubject_iterableToCollectionWithJavaLangIterable_(ComGoogleCommonTruthIterableSubject_UsingCorrespondence_getCastActual(self));
  id<JavaUtilCollection> present = create_JavaUtilArrayList_init();
  for (id __strong excludedItem in nil_chk(ComGoogleCommonCollectSets_newLinkedHashSetWithJavaLangIterable_(excluded))) {
    for (id __strong actualItem in nil_chk(actual)) {
      if ([((ComGoogleCommonTruthCorrespondence *) nil_chk(self->correspondence_)) compareWithId:actualItem withId:excludedItem]) {
        [present addWithId:excludedItem];
      }
    }
  }
  if (![present isEmpty]) {
    [self->this$0_ failWithRawMessageWithNSString:@"Not true that %s contains no element that %s %s <%s>. It contains at least one element that %s each of <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self->this$0_ actualAsString], self->correspondence_, excludedPrefix, excluded, self->correspondence_, present } count:6 type:NSObject_class_()]];
  }
}

id<JavaLangIterable> ComGoogleCommonTruthIterableSubject_UsingCorrespondence_getCastActual(ComGoogleCommonTruthIterableSubject_UsingCorrespondence *self) {
  return [self->this$0_ actual];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthIterableSubject_UsingCorrespondence__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthIterableSubject_UsingCorrespondence)
