//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComGoogleCommonTruthGraphMatching.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Optional.h"
#include "com/google/common/collect/BiMap.h"
#include "com/google/common/collect/HashBiMap.h"
#include "com/google/common/collect/ImmutableBiMap.h"
#include "com/google/common/collect/Multimap.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"

@interface ComGoogleCommonTruthGraphMatching ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComGoogleCommonTruthGraphMatching_init(ComGoogleCommonTruthGraphMatching *self);

__attribute__((unused)) static ComGoogleCommonTruthGraphMatching *new_ComGoogleCommonTruthGraphMatching_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthGraphMatching *create_ComGoogleCommonTruthGraphMatching_init();

@interface ComGoogleCommonTruthGraphMatching_HopcroftKarp : NSObject {
 @public
  id<ComGoogleCommonCollectMultimap> graph_;
}

+ (ComGoogleCommonTruthGraphMatching_HopcroftKarp *)overBipartiteGraphWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap> __nonnull)graph;

- (instancetype)initWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap> __nonnull)graph;

- (ComGoogleCommonCollectImmutableBiMap *)perform;

- (ComGoogleCommonBaseOptional *)breadthFirstSearchWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap> __nonnull)matching
                                                                   withJavaUtilMap:(id<JavaUtilMap> __nonnull)layers;

- (jboolean)depthFirstSearchWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap> __nonnull)matching
                                            withJavaUtilMap:(id<JavaUtilMap> __nonnull)layers
                                                    withInt:(jint)freeRhsVertexLayer
                                                     withId:(id __nonnull)lhs;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthGraphMatching_HopcroftKarp)

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthGraphMatching_HopcroftKarp, graph_, id<ComGoogleCommonCollectMultimap>)

__attribute__((unused)) static ComGoogleCommonTruthGraphMatching_HopcroftKarp *ComGoogleCommonTruthGraphMatching_HopcroftKarp_overBipartiteGraphWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> graph);

__attribute__((unused)) static void ComGoogleCommonTruthGraphMatching_HopcroftKarp_initWithComGoogleCommonCollectMultimap_(ComGoogleCommonTruthGraphMatching_HopcroftKarp *self, id<ComGoogleCommonCollectMultimap> graph);

__attribute__((unused)) static ComGoogleCommonTruthGraphMatching_HopcroftKarp *new_ComGoogleCommonTruthGraphMatching_HopcroftKarp_initWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> graph) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthGraphMatching_HopcroftKarp *create_ComGoogleCommonTruthGraphMatching_HopcroftKarp_initWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> graph);

__attribute__((unused)) static ComGoogleCommonBaseOptional *ComGoogleCommonTruthGraphMatching_HopcroftKarp_breadthFirstSearchWithComGoogleCommonCollectBiMap_withJavaUtilMap_(ComGoogleCommonTruthGraphMatching_HopcroftKarp *self, id<ComGoogleCommonCollectBiMap> matching, id<JavaUtilMap> layers);

__attribute__((unused)) static jboolean ComGoogleCommonTruthGraphMatching_HopcroftKarp_depthFirstSearchWithComGoogleCommonCollectBiMap_withJavaUtilMap_withInt_withId_(ComGoogleCommonTruthGraphMatching_HopcroftKarp *self, id<ComGoogleCommonCollectBiMap> matching, id<JavaUtilMap> layers, jint freeRhsVertexLayer, id lhs);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthGraphMatching_HopcroftKarp)

@implementation ComGoogleCommonTruthGraphMatching

+ (ComGoogleCommonCollectImmutableBiMap *)maximumCardinalityBipartiteMatchingWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap> __nonnull)graph {
  return ComGoogleCommonTruthGraphMatching_maximumCardinalityBipartiteMatchingWithComGoogleCommonCollectMultimap_(graph);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonTruthGraphMatching_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonCollectImmutableBiMap;", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(maximumCardinalityBipartiteMatchingWithComGoogleCommonCollectMultimap:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "maximumCardinalityBipartiteMatching", "LComGoogleCommonCollectMultimap;", "<U:Ljava/lang/Object;V:Ljava/lang/Object;>(Lcom/google/common/collect/Multimap<TU;TV;>;)Lcom/google/common/collect/ImmutableBiMap<TU;TV;>;", "LComGoogleCommonTruthGraphMatching_HopcroftKarp;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthGraphMatching = { "GraphMatching", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x10, 2, 0, -1, 3, -1, -1, -1 };
  return &_ComGoogleCommonTruthGraphMatching;
}

@end

ComGoogleCommonCollectImmutableBiMap *ComGoogleCommonTruthGraphMatching_maximumCardinalityBipartiteMatchingWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> graph) {
  ComGoogleCommonTruthGraphMatching_initialize();
  return [((ComGoogleCommonTruthGraphMatching_HopcroftKarp *) nil_chk(ComGoogleCommonTruthGraphMatching_HopcroftKarp_overBipartiteGraphWithComGoogleCommonCollectMultimap_(graph))) perform];
}

void ComGoogleCommonTruthGraphMatching_init(ComGoogleCommonTruthGraphMatching *self) {
  NSObject_init(self);
}

ComGoogleCommonTruthGraphMatching *new_ComGoogleCommonTruthGraphMatching_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthGraphMatching, init)
}

ComGoogleCommonTruthGraphMatching *create_ComGoogleCommonTruthGraphMatching_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthGraphMatching, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthGraphMatching)

@implementation ComGoogleCommonTruthGraphMatching_HopcroftKarp

+ (ComGoogleCommonTruthGraphMatching_HopcroftKarp *)overBipartiteGraphWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap> __nonnull)graph {
  return ComGoogleCommonTruthGraphMatching_HopcroftKarp_overBipartiteGraphWithComGoogleCommonCollectMultimap_(graph);
}

- (instancetype)initWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap> __nonnull)graph {
  ComGoogleCommonTruthGraphMatching_HopcroftKarp_initWithComGoogleCommonCollectMultimap_(self, graph);
  return self;
}

- (ComGoogleCommonCollectImmutableBiMap *)perform {
  id<ComGoogleCommonCollectBiMap> matching = ComGoogleCommonCollectHashBiMap_create();
  while (true) {
    id<JavaUtilMap> layers = create_JavaUtilHashMap_init();
    ComGoogleCommonBaseOptional *freeRhsVertexLayer = ComGoogleCommonTruthGraphMatching_HopcroftKarp_breadthFirstSearchWithComGoogleCommonCollectBiMap_withJavaUtilMap_(self, matching, layers);
    if (![((ComGoogleCommonBaseOptional *) nil_chk(freeRhsVertexLayer)) isPresent]) {
      break;
    }
    for (id __strong lhs in nil_chk([((id<ComGoogleCommonCollectMultimap>) nil_chk(graph_)) keySet])) {
      if (![((id<ComGoogleCommonCollectBiMap>) nil_chk(matching)) containsKeyWithId:lhs]) {
        ComGoogleCommonTruthGraphMatching_HopcroftKarp_depthFirstSearchWithComGoogleCommonCollectBiMap_withJavaUtilMap_withInt_withId_(self, matching, layers, [((JavaLangInteger *) nil_chk([freeRhsVertexLayer get])) intValue], lhs);
      }
    }
  }
  return ComGoogleCommonCollectImmutableBiMap_copyOfWithJavaUtilMap_(matching);
}

- (ComGoogleCommonBaseOptional *)breadthFirstSearchWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap> __nonnull)matching
                                                                   withJavaUtilMap:(id<JavaUtilMap> __nonnull)layers {
  return ComGoogleCommonTruthGraphMatching_HopcroftKarp_breadthFirstSearchWithComGoogleCommonCollectBiMap_withJavaUtilMap_(self, matching, layers);
}

- (jboolean)depthFirstSearchWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap> __nonnull)matching
                                            withJavaUtilMap:(id<JavaUtilMap> __nonnull)layers
                                                    withInt:(jint)freeRhsVertexLayer
                                                     withId:(id __nonnull)lhs {
  return ComGoogleCommonTruthGraphMatching_HopcroftKarp_depthFirstSearchWithComGoogleCommonCollectBiMap_withJavaUtilMap_withInt_withId_(self, matching, layers, freeRhsVertexLayer, lhs);
}

- (void)dealloc {
  RELEASE_(graph_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonTruthGraphMatching_HopcroftKarp;", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 3, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableBiMap;", 0x0, -1, -1, -1, 4, -1, -1 },
    { NULL, "LComGoogleCommonBaseOptional;", 0x2, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(overBipartiteGraphWithComGoogleCommonCollectMultimap:);
  methods[1].selector = @selector(initWithComGoogleCommonCollectMultimap:);
  methods[2].selector = @selector(perform);
  methods[3].selector = @selector(breadthFirstSearchWithComGoogleCommonCollectBiMap:withJavaUtilMap:);
  methods[4].selector = @selector(depthFirstSearchWithComGoogleCommonCollectBiMap:withJavaUtilMap:withInt:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "graph_", "LComGoogleCommonCollectMultimap;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "overBipartiteGraph", "LComGoogleCommonCollectMultimap;", "<U:Ljava/lang/Object;V:Ljava/lang/Object;>(Lcom/google/common/collect/Multimap<TU;TV;>;)Lcom/google/common/truth/GraphMatching$HopcroftKarp<TU;TV;>;", "(Lcom/google/common/collect/Multimap<TU;TV;>;)V", "()Lcom/google/common/collect/ImmutableBiMap<TU;TV;>;", "breadthFirstSearch", "LComGoogleCommonCollectBiMap;LJavaUtilMap;", "(Lcom/google/common/collect/BiMap<TU;TV;>;Ljava/util/Map<TU;Ljava/lang/Integer;>;)Lcom/google/common/base/Optional<Ljava/lang/Integer;>;", "depthFirstSearch", "LComGoogleCommonCollectBiMap;LJavaUtilMap;ILNSObject;", "(Lcom/google/common/collect/BiMap<TU;TV;>;Ljava/util/Map<TU;Ljava/lang/Integer;>;ITU;)Z", "Lcom/google/common/collect/Multimap<TU;TV;>;", "LComGoogleCommonTruthGraphMatching;", "<U:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthGraphMatching_HopcroftKarp = { "HopcroftKarp", "com.google.common.truth", ptrTable, methods, fields, 7, 0xa, 5, 1, 12, -1, -1, 13, -1 };
  return &_ComGoogleCommonTruthGraphMatching_HopcroftKarp;
}

@end

ComGoogleCommonTruthGraphMatching_HopcroftKarp *ComGoogleCommonTruthGraphMatching_HopcroftKarp_overBipartiteGraphWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> graph) {
  ComGoogleCommonTruthGraphMatching_HopcroftKarp_initialize();
  return create_ComGoogleCommonTruthGraphMatching_HopcroftKarp_initWithComGoogleCommonCollectMultimap_(graph);
}

void ComGoogleCommonTruthGraphMatching_HopcroftKarp_initWithComGoogleCommonCollectMultimap_(ComGoogleCommonTruthGraphMatching_HopcroftKarp *self, id<ComGoogleCommonCollectMultimap> graph) {
  NSObject_init(self);
  JreStrongAssign(&self->graph_, graph);
}

ComGoogleCommonTruthGraphMatching_HopcroftKarp *new_ComGoogleCommonTruthGraphMatching_HopcroftKarp_initWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> graph) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthGraphMatching_HopcroftKarp, initWithComGoogleCommonCollectMultimap_, graph)
}

ComGoogleCommonTruthGraphMatching_HopcroftKarp *create_ComGoogleCommonTruthGraphMatching_HopcroftKarp_initWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> graph) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthGraphMatching_HopcroftKarp, initWithComGoogleCommonCollectMultimap_, graph)
}

ComGoogleCommonBaseOptional *ComGoogleCommonTruthGraphMatching_HopcroftKarp_breadthFirstSearchWithComGoogleCommonCollectBiMap_withJavaUtilMap_(ComGoogleCommonTruthGraphMatching_HopcroftKarp *self, id<ComGoogleCommonCollectBiMap> matching, id<JavaUtilMap> layers) {
  id<JavaUtilQueue> queue = create_JavaUtilArrayDeque_init();
  ComGoogleCommonBaseOptional *freeRhsVertexLayer = ComGoogleCommonBaseOptional_absent();
  for (id __strong lhs in nil_chk([((id<ComGoogleCommonCollectMultimap>) nil_chk(self->graph_)) keySet])) {
    if (![((id<ComGoogleCommonCollectBiMap>) nil_chk(matching)) containsKeyWithId:lhs]) {
      [((id<JavaUtilMap>) nil_chk(layers)) putWithId:lhs withId:JavaLangInteger_valueOfWithInt_(1)];
      [queue addWithId:lhs];
    }
  }
  while (![queue isEmpty]) {
    id lhs = [queue remove];
    jint layer = [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(layers)) getWithId:lhs])) intValue];
    if ([((ComGoogleCommonBaseOptional *) nil_chk(freeRhsVertexLayer)) isPresent] && layer > [((JavaLangInteger *) nil_chk([freeRhsVertexLayer get])) intValue]) {
      break;
    }
    for (id __strong rhs in nil_chk([self->graph_ getWithId:lhs])) {
      if (![((id<ComGoogleCommonCollectBiMap>) nil_chk(matching)) containsValueWithId:rhs]) {
        if (![((ComGoogleCommonBaseOptional *) nil_chk(freeRhsVertexLayer)) isPresent]) {
          freeRhsVertexLayer = ComGoogleCommonBaseOptional_ofWithId_(JavaLangInteger_valueOfWithInt_(layer));
        }
      }
      else {
        id nextLhs = [((id<ComGoogleCommonCollectBiMap>) nil_chk([matching inverse])) getWithId:rhs];
        if (![layers containsKeyWithId:nextLhs]) {
          [layers putWithId:nextLhs withId:JavaLangInteger_valueOfWithInt_(layer + 1)];
          [queue addWithId:nextLhs];
        }
      }
    }
  }
  return freeRhsVertexLayer;
}

jboolean ComGoogleCommonTruthGraphMatching_HopcroftKarp_depthFirstSearchWithComGoogleCommonCollectBiMap_withJavaUtilMap_withInt_withId_(ComGoogleCommonTruthGraphMatching_HopcroftKarp *self, id<ComGoogleCommonCollectBiMap> matching, id<JavaUtilMap> layers, jint freeRhsVertexLayer, id lhs) {
  jint layer = [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(layers)) getWithId:lhs])) intValue];
  if (layer > freeRhsVertexLayer) {
    return false;
  }
  for (id __strong rhs in nil_chk([((id<ComGoogleCommonCollectMultimap>) nil_chk(self->graph_)) getWithId:lhs])) {
    if (![((id<ComGoogleCommonCollectBiMap>) nil_chk(matching)) containsValueWithId:rhs]) {
      [matching forcePutWithId:lhs withId:rhs];
      return true;
    }
    else {
      id nextLhs = [((id<ComGoogleCommonCollectBiMap>) nil_chk([matching inverse])) getWithId:rhs];
      if ([layers containsKeyWithId:nextLhs] && [((JavaLangInteger *) nil_chk([layers getWithId:nextLhs])) intValue] == layer + 1) {
        if (ComGoogleCommonTruthGraphMatching_HopcroftKarp_depthFirstSearchWithComGoogleCommonCollectBiMap_withJavaUtilMap_withInt_withId_(self, matching, layers, freeRhsVertexLayer, nextLhs)) {
          [matching forcePutWithId:lhs withId:rhs];
          return true;
        }
      }
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthGraphMatching_HopcroftKarp)
