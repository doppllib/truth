//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComGoogleCommonTruthFailureStrategy.h"
#include "ComGoogleCommonTruthStringUtil.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/Throwable.h"
#include "java/util/Arrays.h"

@interface ComGoogleCommonTruthFailureStrategy ()

+ (void)stripTruthStackFramesWithJavaLangThrowable:(JavaLangThrowable * __nonnull)throwable;

@end

__attribute__((unused)) static void ComGoogleCommonTruthFailureStrategy_stripTruthStackFramesWithJavaLangThrowable_(JavaLangThrowable *throwable);

@implementation ComGoogleCommonTruthFailureStrategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonTruthFailureStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)failWithNSString:(NSString * __nonnull)message {
  [self failWithNSString:message withJavaLangThrowable:nil];
}

- (void)failWithNSString:(NSString * __nonnull)message
   withJavaLangThrowable:(JavaLangThrowable * __nonnull)cause {
  JavaLangAssertionError *up = create_JavaLangAssertionError_initWithId_(message);
  if (cause == nil) {
    cause = create_JavaLangAssertionError_initWithId_(message);
  }
  @try {
    [up initCauseWithJavaLangThrowable:cause];
  }
  @catch (JavaLangIllegalStateException *alreadyInitializedBecauseOfHarmonyBug) {
    @throw create_JavaLangAssertionError_initWithId_(cause);
  }
  ComGoogleCommonTruthFailureStrategy_stripTruthStackFramesWithJavaLangThrowable_(up);
  @throw up;
}

- (void)failComparingWithNSString:(NSString * __nonnull)message
         withJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)expected
         withJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)actual {
  [self failWithNSString:ComGoogleCommonTruthStringUtil_messageForWithNSString_withJavaLangCharSequence_withJavaLangCharSequence_(message, expected, actual)];
}

+ (void)stripTruthStackFramesWithJavaLangThrowable:(JavaLangThrowable * __nonnull)throwable {
  ComGoogleCommonTruthFailureStrategy_stripTruthStackFramesWithJavaLangThrowable_(throwable);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(failWithNSString:);
  methods[2].selector = @selector(failWithNSString:withJavaLangThrowable:);
  methods[3].selector = @selector(failComparingWithNSString:withJavaLangCharSequence:withJavaLangCharSequence:);
  methods[4].selector = @selector(stripTruthStackFramesWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "fail", "LNSString;", "LNSString;LJavaLangThrowable;", "failComparing", "LNSString;LJavaLangCharSequence;LJavaLangCharSequence;", "stripTruthStackFrames", "LJavaLangThrowable;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthFailureStrategy = { "FailureStrategy", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x401, 5, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonTruthFailureStrategy;
}

@end

void ComGoogleCommonTruthFailureStrategy_init(ComGoogleCommonTruthFailureStrategy *self) {
  NSObject_init(self);
}

void ComGoogleCommonTruthFailureStrategy_stripTruthStackFramesWithJavaLangThrowable_(JavaLangThrowable *throwable) {
  ComGoogleCommonTruthFailureStrategy_initialize();
  IOSObjectArray *stackTrace = [((JavaLangThrowable *) nil_chk(throwable)) getStackTrace];
  jint i = 0;
  while (i < ((IOSObjectArray *) nil_chk(stackTrace))->size_ && [((NSString *) nil_chk([((JavaLangStackTraceElement *) nil_chk(IOSObjectArray_Get(stackTrace, i))) getClassName])) java_hasPrefix:@"com.google.common.truth"]) {
    i++;
  }
  [throwable setStackTraceWithJavaLangStackTraceElementArray:JavaUtilArrays_copyOfRangeWithNSObjectArray_withInt_withInt_(stackTrace, i, stackTrace->size_)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthFailureStrategy)
