//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/truth/core/src/main/java/com/google/common/truth/PrimitiveFloatArraySubject.java
//

#include "ComGoogleCommonBasePreconditions.h"
#include "ComGoogleCommonCollectIterables.h"
#include "ComGoogleCommonPrimitivesFloats.h"
#include "ComGoogleCommonTruthAbstractArraySubject.h"
#include "ComGoogleCommonTruthCorrespondence.h"
#include "ComGoogleCommonTruthFailureStrategy.h"
#include "ComGoogleCommonTruthFloatSubject.h"
#include "ComGoogleCommonTruthIterableSubject.h"
#include "ComGoogleCommonTruthMathUtil.h"
#include "ComGoogleCommonTruthPrimitiveFloatArraySubject.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "javax/annotation/Nullable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline ComGoogleCommonTruthCorrespondence *ComGoogleCommonTruthPrimitiveFloatArraySubject_get_EXACT_EQUALITY_CORRESPONDENCE();
static ComGoogleCommonTruthCorrespondence *ComGoogleCommonTruthPrimitiveFloatArraySubject_EXACT_EQUALITY_CORRESPONDENCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonTruthPrimitiveFloatArraySubject, EXACT_EQUALITY_CORRESPONDENCE, ComGoogleCommonTruthCorrespondence *)

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$3();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$4();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$5();

@interface ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison_init(ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison *self);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison__Annotations$2();

@interface ComGoogleCommonTruthPrimitiveFloatArraySubject_$2 : ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison {
 @public
  ComGoogleCommonTruthPrimitiveFloatArraySubject *this$0_;
  jfloat val$tolerance_;
}

- (void)ofElementsInWithJavaLangIterable:(id<JavaLangIterable>)expected;

- (instancetype)initWithComGoogleCommonTruthPrimitiveFloatArraySubject:(ComGoogleCommonTruthPrimitiveFloatArraySubject *)outer$
                                                             withFloat:(jfloat)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthPrimitiveFloatArraySubject_$2)

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthPrimitiveFloatArraySubject_$2, this$0_, ComGoogleCommonTruthPrimitiveFloatArraySubject *)

__attribute__((unused)) static void ComGoogleCommonTruthPrimitiveFloatArraySubject_$2_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject_$2 *self, ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0);

__attribute__((unused)) static ComGoogleCommonTruthPrimitiveFloatArraySubject_$2 *new_ComGoogleCommonTruthPrimitiveFloatArraySubject_$2_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthPrimitiveFloatArraySubject_$2 *create_ComGoogleCommonTruthPrimitiveFloatArraySubject_$2_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0);

@interface ComGoogleCommonTruthPrimitiveFloatArraySubject_$3 : ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison {
 @public
  ComGoogleCommonTruthPrimitiveFloatArraySubject *this$0_;
  jfloat val$tolerance_;
}

- (void)ofElementsInWithJavaLangIterable:(id<JavaLangIterable>)expected;

- (instancetype)initWithComGoogleCommonTruthPrimitiveFloatArraySubject:(ComGoogleCommonTruthPrimitiveFloatArraySubject *)outer$
                                                             withFloat:(jfloat)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthPrimitiveFloatArraySubject_$3)

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthPrimitiveFloatArraySubject_$3, this$0_, ComGoogleCommonTruthPrimitiveFloatArraySubject *)

__attribute__((unused)) static void ComGoogleCommonTruthPrimitiveFloatArraySubject_$3_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject_$3 *self, ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0);

__attribute__((unused)) static ComGoogleCommonTruthPrimitiveFloatArraySubject_$3 *new_ComGoogleCommonTruthPrimitiveFloatArraySubject_$3_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthPrimitiveFloatArraySubject_$3 *create_ComGoogleCommonTruthPrimitiveFloatArraySubject_$3_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0);

@interface ComGoogleCommonTruthPrimitiveFloatArraySubject_$1 : ComGoogleCommonTruthCorrespondence

- (jboolean)compareWithId:(JavaLangFloat *)actual
                   withId:(JavaLangFloat *)expected;

- (NSString *)description;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthPrimitiveFloatArraySubject_$1)

__attribute__((unused)) static void ComGoogleCommonTruthPrimitiveFloatArraySubject_$1_init(ComGoogleCommonTruthPrimitiveFloatArraySubject_$1 *self);

__attribute__((unused)) static ComGoogleCommonTruthPrimitiveFloatArraySubject_$1 *new_ComGoogleCommonTruthPrimitiveFloatArraySubject_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthPrimitiveFloatArraySubject_$1 *create_ComGoogleCommonTruthPrimitiveFloatArraySubject_$1_init();

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonTruthPrimitiveFloatArraySubject)

@implementation ComGoogleCommonTruthPrimitiveFloatArraySubject

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                                             withFloatArray:(IOSFloatArray *)o {
  ComGoogleCommonTruthPrimitiveFloatArraySubject_initWithComGoogleCommonTruthFailureStrategy_withFloatArray_(self, failureStrategy, o);
  return self;
}

- (NSString *)underlyingType {
  return @"float";
}

- (id<JavaUtilList>)listRepresentation {
  return ComGoogleCommonPrimitivesFloats_asListWithFloatArray_([self actual]);
}

- (void)isEqualToWithId:(id)expected {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Comparing raw equality of floats is often unsafe. Use either usingTolerance(someTolerance).containsExactly(someValues).inOrder() to compare witha tolerance or usingExactEquality().containsExactly(someValues).inOrder() if youreally want exact equality instead.");
}

- (void)isEqualToWithId:(id)expected
              withFloat:(jfloat)tolerance {
  IOSFloatArray *actual = [self actual];
  if (actual == expected) {
    return;
  }
  @try {
    IOSFloatArray *expectedArray = (IOSFloatArray *) cast_chk(expected, [IOSFloatArray class]);
    if (((IOSFloatArray *) nil_chk(expectedArray))->size_ != ((IOSFloatArray *) nil_chk(actual))->size_) {
      [self failWithRawMessageWithNSString:@"Arrays are of different lengths. expected: %s, actual %s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ ComGoogleCommonPrimitivesFloats_asListWithFloatArray_(expectedArray), ComGoogleCommonPrimitivesFloats_asListWithFloatArray_(actual) } count:2 type:NSObject_class_()]];
    }
    id<JavaUtilList> unequalIndices = create_JavaUtilArrayList_init();
    for (jint i = 0; i < expectedArray->size_; i++) {
      if (!ComGoogleCommonTruthMathUtil_equalWithinToleranceWithFloat_withFloat_withFloat_(IOSFloatArray_Get(actual, i), IOSFloatArray_Get(expectedArray, i), tolerance)) {
        [unequalIndices addWithId:JavaLangInteger_valueOfWithInt_(i)];
      }
    }
    if (![unequalIndices isEmpty]) {
      [self failWithNSString:@"is equal to" withId:ComGoogleCommonPrimitivesFloats_asListWithFloatArray_(expectedArray)];
    }
  }
  @catch (JavaLangClassCastException *e) {
    [self failWithBadTypeWithId:expected];
  }
}

- (void)isNotEqualToWithId:(id)expected {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Comparing raw equality of floats is unsafe, use isNotEqualTo(float[] array, float tolerance) instead.");
}

- (void)isNotEqualToWithId:(id)expectedArray
                 withFloat:(jfloat)tolerance {
  IOSFloatArray *actual = [self actual];
  @try {
    IOSFloatArray *expected = (IOSFloatArray *) cast_chk(expectedArray, [IOSFloatArray class]);
    if (actual == expected) {
      [self failWithRawMessageWithNSString:@"%s unexpectedly equal to %s." withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], ComGoogleCommonPrimitivesFloats_asListWithFloatArray_(expected) } count:2 type:NSObject_class_()]];
    }
    if (((IOSFloatArray *) nil_chk(expected))->size_ != ((IOSFloatArray *) nil_chk(actual))->size_) {
      return;
    }
    id<JavaUtilList> unequalIndices = create_JavaUtilArrayList_init();
    for (jint i = 0; i < expected->size_; i++) {
      if (!ComGoogleCommonTruthMathUtil_equalWithinToleranceWithFloat_withFloat_withFloat_(IOSFloatArray_Get(actual, i), IOSFloatArray_Get(expected, i), tolerance)) {
        [unequalIndices addWithId:JavaLangInteger_valueOfWithInt_(i)];
      }
    }
    if ([unequalIndices isEmpty]) {
      [self failWithRawMessageWithNSString:@"%s unexpectedly equal to %s." withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], ComGoogleCommonPrimitivesFloats_asListWithFloatArray_(expected) } count:2 type:NSObject_class_()]];
    }
  }
  @catch (JavaLangClassCastException *ignored) {
  }
}

- (ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison *)hasValuesWithinWithFloat:(jfloat)tolerance {
  return create_ComGoogleCommonTruthPrimitiveFloatArraySubject_$2_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(self, tolerance);
}

- (ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison *)hasValuesNotWithinWithFloat:(jfloat)tolerance {
  return create_ComGoogleCommonTruthPrimitiveFloatArraySubject_$3_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(self, tolerance);
}

- (ComGoogleCommonTruthIterableSubject_UsingCorrespondence *)usingToleranceWithFloat:(jfloat)tolerance {
  return [create_ComGoogleCommonTruthIterableSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangIterable_(failureStrategy_, [self listRepresentation]) comparingElementsUsingWithComGoogleCommonTruthCorrespondence:ComGoogleCommonTruthCorrespondence_toleranceWithDouble_(tolerance)];
}

- (ComGoogleCommonTruthIterableSubject_UsingCorrespondence *)usingExactEquality {
  return [create_ComGoogleCommonTruthIterableSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangIterable_(failureStrategy_, [self listRepresentation]) comparingElementsUsingWithComGoogleCommonTruthCorrespondence:ComGoogleCommonTruthPrimitiveFloatArraySubject_EXACT_EQUALITY_CORRESPONDENCE];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, 2 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, -1, -1, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, 6, -1 },
    { NULL, "V", 0x1, 4, 7, -1, -1, 8, -1 },
    { NULL, "V", 0x1, 9, 5, -1, -1, 10, -1 },
    { NULL, "V", 0x1, 9, 7, -1, -1, 11, -1 },
    { NULL, "LComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison;", 0x1, 14, 13, -1, -1, 15, -1 },
    { NULL, "LComGoogleCommonTruthIterableSubject_UsingCorrespondence;", 0x1, 16, 13, -1, 17, -1, -1 },
    { NULL, "LComGoogleCommonTruthIterableSubject_UsingCorrespondence;", 0x1, -1, -1, -1, 18, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthFailureStrategy:withFloatArray:);
  methods[1].selector = @selector(underlyingType);
  methods[2].selector = @selector(listRepresentation);
  methods[3].selector = @selector(isEqualToWithId:);
  methods[4].selector = @selector(isEqualToWithId:withFloat:);
  methods[5].selector = @selector(isNotEqualToWithId:);
  methods[6].selector = @selector(isNotEqualToWithId:withFloat:);
  methods[7].selector = @selector(hasValuesWithinWithFloat:);
  methods[8].selector = @selector(hasValuesNotWithinWithFloat:);
  methods[9].selector = @selector(usingToleranceWithFloat:);
  methods[10].selector = @selector(usingExactEquality);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EXACT_EQUALITY_CORRESPONDENCE", "LComGoogleCommonTruthCorrespondence;", .constantValue.asLong = 0, 0x1a, -1, 19, 20, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonTruthFailureStrategy;[F", "(Lcom/google/common/truth/FailureStrategy;[F)V", (void *)&ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$0, "()Ljava/util/List<Ljava/lang/Float;>;", "isEqualTo", "LNSObject;", (void *)&ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$1, "LNSObject;F", (void *)&ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$2, "isNotEqualTo", (void *)&ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$3, (void *)&ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$4, "hasValuesWithin", "F", "hasValuesNotWithin", (void *)&ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$5, "usingTolerance", "(F)Lcom/google/common/truth/IterableSubject$UsingCorrespondence<Ljava/lang/Number;Ljava/lang/Number;>;", "()Lcom/google/common/truth/IterableSubject$UsingCorrespondence<Ljava/lang/Float;Ljava/lang/Float;>;", &ComGoogleCommonTruthPrimitiveFloatArraySubject_EXACT_EQUALITY_CORRESPONDENCE, "Lcom/google/common/truth/Correspondence<Ljava/lang/Float;Ljava/lang/Float;>;", "LComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison;", "Lcom/google/common/truth/AbstractArraySubject<Lcom/google/common/truth/PrimitiveFloatArraySubject;[LF;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthPrimitiveFloatArraySubject = { "PrimitiveFloatArraySubject", "com.google.common.truth", ptrTable, methods, fields, 7, 0x11, 11, 1, -1, 21, -1, 22, -1 };
  return &_ComGoogleCommonTruthPrimitiveFloatArraySubject;
}

+ (void)initialize {
  if (self == [ComGoogleCommonTruthPrimitiveFloatArraySubject class]) {
    JreStrongAssignAndConsume(&ComGoogleCommonTruthPrimitiveFloatArraySubject_EXACT_EQUALITY_CORRESPONDENCE, new_ComGoogleCommonTruthPrimitiveFloatArraySubject_$1_init());
    J2OBJC_SET_INITIALIZED(ComGoogleCommonTruthPrimitiveFloatArraySubject)
  }
}

@end

void ComGoogleCommonTruthPrimitiveFloatArraySubject_initWithComGoogleCommonTruthFailureStrategy_withFloatArray_(ComGoogleCommonTruthPrimitiveFloatArraySubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, IOSFloatArray *o) {
  ComGoogleCommonTruthAbstractArraySubject_initWithComGoogleCommonTruthFailureStrategy_withId_(self, failureStrategy, o);
}

ComGoogleCommonTruthPrimitiveFloatArraySubject *new_ComGoogleCommonTruthPrimitiveFloatArraySubject_initWithComGoogleCommonTruthFailureStrategy_withFloatArray_(ComGoogleCommonTruthFailureStrategy *failureStrategy, IOSFloatArray *o) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthPrimitiveFloatArraySubject, initWithComGoogleCommonTruthFailureStrategy_withFloatArray_, failureStrategy, o)
}

ComGoogleCommonTruthPrimitiveFloatArraySubject *create_ComGoogleCommonTruthPrimitiveFloatArraySubject_initWithComGoogleCommonTruthFailureStrategy_withFloatArray_(ComGoogleCommonTruthFailureStrategy *failureStrategy, IOSFloatArray *o) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthPrimitiveFloatArraySubject, initWithComGoogleCommonTruthFailureStrategy_withFloatArray_, failureStrategy, o)
}

IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthPrimitiveFloatArraySubject)

@implementation ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)ofWithFloatArray:(IOSFloatArray *)expected {
  [self ofElementsInWithJavaLangIterable:ComGoogleCommonPrimitivesFloats_asListWithFloatArray_(expected)];
}

- (void)ofElementsInWithJavaLangIterable:(id<JavaLangIterable>)expected {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isEqual:(id)o {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"If you meant to compare float arrays, use .of() or .ofElementsIn() instead.");
}

- (NSUInteger)hash {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Subject.hashCode() is not supported.");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, 7, 8 },
    { NULL, "I", 0x1, 9, -1, -1, -1, 10, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(ofWithFloatArray:);
  methods[2].selector = @selector(ofElementsInWithJavaLangIterable:);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "of", "[F", "ofElementsIn", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Ljava/lang/Number;>;)V", "equals", "LNSObject;", (void *)&ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison__Annotations$0, (void *)&ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison__Annotations$1, "hashCode", (void *)&ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison__Annotations$2, "LComGoogleCommonTruthPrimitiveFloatArraySubject;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison = { "TolerantPrimitiveFloatArrayComparison", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x409, 5, 0, 11, -1, -1, -1, -1 };
  return &_ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison;
}

@end

void ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison_init(ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison *self) {
  NSObject_init(self);
}

IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison)

@implementation ComGoogleCommonTruthPrimitiveFloatArraySubject_$2

- (void)ofElementsInWithJavaLangIterable:(id<JavaLangIterable>)expected {
  ComGoogleCommonTruthFloatSubject_checkToleranceWithFloat_(val$tolerance_);
  IOSFloatArray *actual = ComGoogleCommonBasePreconditions_checkNotNullWithId_([this$0_ actual]);
  id<JavaUtilList> mismatches = create_JavaUtilArrayList_init();
  jint expectedCount = 0;
  for (NSNumber * __strong expectedValue in nil_chk(expected)) {
    if (expectedCount < ((IOSFloatArray *) nil_chk(actual))->size_ && !ComGoogleCommonTruthMathUtil_equalWithinToleranceWithFloat_withFloat_withFloat_(IOSFloatArray_Get(actual, expectedCount), [((NSNumber *) nil_chk(expectedValue)) floatValue], val$tolerance_)) {
      [mismatches addWithId:JavaLangInteger_valueOfWithInt_(expectedCount)];
    }
    expectedCount++;
  }
  if (((IOSFloatArray *) nil_chk(actual))->size_ != expectedCount) {
    [this$0_ failWithRawMessageWithNSString:@"Not true that %s has values within %s of <%s>. Expected length <%s> but got <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], JavaLangFloat_valueOfWithFloat_(val$tolerance_), ComGoogleCommonCollectIterables_toStringWithJavaLangIterable_(expected), JavaLangInteger_valueOfWithInt_(expectedCount), JavaLangInteger_valueOfWithInt_(actual->size_) } count:5 type:NSObject_class_()]];
  }
  if (![mismatches isEmpty]) {
    [this$0_ failWithBadResultsWithNSString:JreStrcat("$F$", @"has values within ", val$tolerance_, @" of") withId:ComGoogleCommonCollectIterables_toStringWithJavaLangIterable_(expected) withNSString:@"differs at indexes" withId:mismatches];
  }
}

- (instancetype)initWithComGoogleCommonTruthPrimitiveFloatArraySubject:(ComGoogleCommonTruthPrimitiveFloatArraySubject *)outer$
                                                             withFloat:(jfloat)capture$0 {
  ComGoogleCommonTruthPrimitiveFloatArraySubject_$2_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(ofElementsInWithJavaLangIterable:);
  methods[1].selector = @selector(initWithComGoogleCommonTruthPrimitiveFloatArraySubject:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonTruthPrimitiveFloatArraySubject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$tolerance_", "F", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ofElementsIn", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Ljava/lang/Number;>;)V", "LComGoogleCommonTruthPrimitiveFloatArraySubject;F", "LComGoogleCommonTruthPrimitiveFloatArraySubject;", "hasValuesWithinWithFloat:" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthPrimitiveFloatArraySubject_$2 = { "", "com.google.common.truth", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, -1, -1 };
  return &_ComGoogleCommonTruthPrimitiveFloatArraySubject_$2;
}

@end

void ComGoogleCommonTruthPrimitiveFloatArraySubject_$2_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject_$2 *self, ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$tolerance_ = capture$0;
  ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison_init(self);
}

ComGoogleCommonTruthPrimitiveFloatArraySubject_$2 *new_ComGoogleCommonTruthPrimitiveFloatArraySubject_$2_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthPrimitiveFloatArraySubject_$2, initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_, outer$, capture$0)
}

ComGoogleCommonTruthPrimitiveFloatArraySubject_$2 *create_ComGoogleCommonTruthPrimitiveFloatArraySubject_$2_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthPrimitiveFloatArraySubject_$2, initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_, outer$, capture$0)
}

@implementation ComGoogleCommonTruthPrimitiveFloatArraySubject_$3

- (void)ofElementsInWithJavaLangIterable:(id<JavaLangIterable>)expected {
  ComGoogleCommonTruthFloatSubject_checkToleranceWithFloat_(val$tolerance_);
  IOSFloatArray *actual = ComGoogleCommonBasePreconditions_checkNotNullWithId_([this$0_ actual]);
  jint expectedCount = 0;
  for (NSNumber * __strong expectedValue in nil_chk(expected)) {
    if (expectedCount < ((IOSFloatArray *) nil_chk(actual))->size_ && ComGoogleCommonTruthMathUtil_notEqualWithinToleranceWithFloat_withFloat_withFloat_(IOSFloatArray_Get(actual, expectedCount), [((NSNumber *) nil_chk(expectedValue)) floatValue], val$tolerance_)) {
      return;
    }
    expectedCount++;
  }
  if (((IOSFloatArray *) nil_chk(actual))->size_ == expectedCount) {
    [this$0_ failWithNSString:JreStrcat("$F$", @"has values not within ", val$tolerance_, @" of") withId:ComGoogleCommonCollectIterables_toStringWithJavaLangIterable_(expected)];
  }
}

- (instancetype)initWithComGoogleCommonTruthPrimitiveFloatArraySubject:(ComGoogleCommonTruthPrimitiveFloatArraySubject *)outer$
                                                             withFloat:(jfloat)capture$0 {
  ComGoogleCommonTruthPrimitiveFloatArraySubject_$3_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(ofElementsInWithJavaLangIterable:);
  methods[1].selector = @selector(initWithComGoogleCommonTruthPrimitiveFloatArraySubject:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonTruthPrimitiveFloatArraySubject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$tolerance_", "F", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ofElementsIn", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Ljava/lang/Number;>;)V", "LComGoogleCommonTruthPrimitiveFloatArraySubject;F", "LComGoogleCommonTruthPrimitiveFloatArraySubject;", "hasValuesNotWithinWithFloat:" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthPrimitiveFloatArraySubject_$3 = { "", "com.google.common.truth", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, -1, -1 };
  return &_ComGoogleCommonTruthPrimitiveFloatArraySubject_$3;
}

@end

void ComGoogleCommonTruthPrimitiveFloatArraySubject_$3_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject_$3 *self, ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$tolerance_ = capture$0;
  ComGoogleCommonTruthPrimitiveFloatArraySubject_TolerantPrimitiveFloatArrayComparison_init(self);
}

ComGoogleCommonTruthPrimitiveFloatArraySubject_$3 *new_ComGoogleCommonTruthPrimitiveFloatArraySubject_$3_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthPrimitiveFloatArraySubject_$3, initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_, outer$, capture$0)
}

ComGoogleCommonTruthPrimitiveFloatArraySubject_$3 *create_ComGoogleCommonTruthPrimitiveFloatArraySubject_$3_initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_(ComGoogleCommonTruthPrimitiveFloatArraySubject *outer$, jfloat capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthPrimitiveFloatArraySubject_$3, initWithComGoogleCommonTruthPrimitiveFloatArraySubject_withFloat_, outer$, capture$0)
}

@implementation ComGoogleCommonTruthPrimitiveFloatArraySubject_$1

- (jboolean)compareWithId:(JavaLangFloat *)actual
                   withId:(JavaLangFloat *)expected {
  return [((JavaLangFloat *) nil_chk(actual)) isEqual:ComGoogleCommonBasePreconditions_checkNotNullWithId_(expected)];
}

- (NSString *)description {
  return @"is exactly equal to";
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonTruthPrimitiveFloatArraySubject_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LJavaLangFloat;LJavaLangFloat;", "(Ljava/lang/Float;Ljava/lang/Float;)Z", "toString", "LComGoogleCommonTruthPrimitiveFloatArraySubject;", "Lcom/google/common/truth/Correspondence<Ljava/lang/Float;Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthPrimitiveFloatArraySubject_$1 = { "", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x8008, 3, 0, 4, -1, -1, 5, -1 };
  return &_ComGoogleCommonTruthPrimitiveFloatArraySubject_$1;
}

@end

void ComGoogleCommonTruthPrimitiveFloatArraySubject_$1_init(ComGoogleCommonTruthPrimitiveFloatArraySubject_$1 *self) {
  ComGoogleCommonTruthCorrespondence_init(self);
}

ComGoogleCommonTruthPrimitiveFloatArraySubject_$1 *new_ComGoogleCommonTruthPrimitiveFloatArraySubject_$1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthPrimitiveFloatArraySubject_$1, init)
}

ComGoogleCommonTruthPrimitiveFloatArraySubject_$1 *create_ComGoogleCommonTruthPrimitiveFloatArraySubject_$1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthPrimitiveFloatArraySubject_$1, init)
}
