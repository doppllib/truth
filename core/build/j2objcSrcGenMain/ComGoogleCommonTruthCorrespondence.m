//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/truth/core/src/main/java/com/google/common/truth/Correspondence.java
//

#include "ComGoogleCommonBasePreconditions.h"
#include "ComGoogleCommonTruthCorrespondence.h"
#include "ComGoogleCommonTruthDoubleSubject.h"
#include "ComGoogleCommonTruthMathUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/annotation/Nullable.h"

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthCorrespondence__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthCorrespondence__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthCorrespondence__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthCorrespondence__Annotations$3();

@interface ComGoogleCommonTruthCorrespondence_TolerantNumericEquality : ComGoogleCommonTruthCorrespondence {
 @public
  jdouble tolerance_;
}

- (instancetype)initWithDouble:(jdouble)tolerance;

- (jboolean)compareWithId:(NSNumber *)actual
                   withId:(NSNumber *)expected;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthCorrespondence_TolerantNumericEquality)

__attribute__((unused)) static void ComGoogleCommonTruthCorrespondence_TolerantNumericEquality_initWithDouble_(ComGoogleCommonTruthCorrespondence_TolerantNumericEquality *self, jdouble tolerance);

__attribute__((unused)) static ComGoogleCommonTruthCorrespondence_TolerantNumericEquality *new_ComGoogleCommonTruthCorrespondence_TolerantNumericEquality_initWithDouble_(jdouble tolerance) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthCorrespondence_TolerantNumericEquality *create_ComGoogleCommonTruthCorrespondence_TolerantNumericEquality_initWithDouble_(jdouble tolerance);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthCorrespondence_TolerantNumericEquality)

@implementation ComGoogleCommonTruthCorrespondence

+ (ComGoogleCommonTruthCorrespondence *)toleranceWithDouble:(jdouble)tolerance {
  return ComGoogleCommonTruthCorrespondence_toleranceWithDouble_(tolerance);
}

- (jboolean)compareWithId:(id)actual
                   withId:(id)expected {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEqual:(id)o {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Correspondence.equals(object) is not supported. If you meant to compare objects, use .compare(actual, expected) instead.");
}

- (NSUInteger)hash {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Correspondence.hashCode() is not supported.");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonTruthCorrespondence_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonTruthCorrespondence;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x401, 3, 4, -1, 5, -1, 6 },
    { NULL, "LNSString;", 0x401, 7, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 8, 9, -1, -1, 10, 11 },
    { NULL, "I", 0x11, 12, -1, -1, -1, 13, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(toleranceWithDouble:);
  methods[1].selector = @selector(compareWithId:withId:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "tolerance", "D", "(D)Lcom/google/common/truth/Correspondence<Ljava/lang/Number;Ljava/lang/Number;>;", "compare", "LNSObject;LNSObject;", "(TA;TE;)Z", (void *)&ComGoogleCommonTruthCorrespondence__Annotations$0, "toString", "equals", "LNSObject;", (void *)&ComGoogleCommonTruthCorrespondence__Annotations$1, (void *)&ComGoogleCommonTruthCorrespondence__Annotations$2, "hashCode", (void *)&ComGoogleCommonTruthCorrespondence__Annotations$3, "LComGoogleCommonTruthCorrespondence_TolerantNumericEquality;", "<A:Ljava/lang/Object;E:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthCorrespondence = { "Correspondence", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x401, 6, 0, -1, 14, -1, 15, -1 };
  return &_ComGoogleCommonTruthCorrespondence;
}

@end

ComGoogleCommonTruthCorrespondence *ComGoogleCommonTruthCorrespondence_toleranceWithDouble_(jdouble tolerance) {
  ComGoogleCommonTruthCorrespondence_initialize();
  return create_ComGoogleCommonTruthCorrespondence_TolerantNumericEquality_initWithDouble_(tolerance);
}

void ComGoogleCommonTruthCorrespondence_init(ComGoogleCommonTruthCorrespondence *self) {
  NSObject_init(self);
}

IOSObjectArray *ComGoogleCommonTruthCorrespondence__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthCorrespondence__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthCorrespondence__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthCorrespondence__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthCorrespondence)

@implementation ComGoogleCommonTruthCorrespondence_TolerantNumericEquality

- (instancetype)initWithDouble:(jdouble)tolerance {
  ComGoogleCommonTruthCorrespondence_TolerantNumericEquality_initWithDouble_(self, tolerance);
  return self;
}

- (jboolean)compareWithId:(NSNumber *)actual
                   withId:(NSNumber *)expected {
  ComGoogleCommonTruthDoubleSubject_checkToleranceWithDouble_(tolerance_);
  jdouble actualDouble = [((NSNumber *) nil_chk(ComGoogleCommonBasePreconditions_checkNotNullWithId_(actual))) doubleValue];
  jdouble expectedDouble = [((NSNumber *) nil_chk(ComGoogleCommonBasePreconditions_checkNotNullWithId_(expected))) doubleValue];
  return ComGoogleCommonTruthMathUtil_equalWithinToleranceWithDouble_withDouble_withDouble_(actualDouble, expectedDouble, tolerance_);
}

- (NSString *)description {
  return JreStrcat("$D$", @"is a finite number within ", tolerance_, @" of");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDouble:);
  methods[1].selector = @selector(compareWithId:withId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tolerance_", "D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "D", "compare", "LNSNumber;LNSNumber;", "(Ljava/lang/Number;Ljava/lang/Number;)Z", "toString", "LComGoogleCommonTruthCorrespondence;", "Lcom/google/common/truth/Correspondence<Ljava/lang/Number;Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthCorrespondence_TolerantNumericEquality = { "TolerantNumericEquality", "com.google.common.truth", ptrTable, methods, fields, 7, 0x1a, 3, 1, 5, -1, -1, 6, -1 };
  return &_ComGoogleCommonTruthCorrespondence_TolerantNumericEquality;
}

@end

void ComGoogleCommonTruthCorrespondence_TolerantNumericEquality_initWithDouble_(ComGoogleCommonTruthCorrespondence_TolerantNumericEquality *self, jdouble tolerance) {
  ComGoogleCommonTruthCorrespondence_init(self);
  self->tolerance_ = tolerance;
}

ComGoogleCommonTruthCorrespondence_TolerantNumericEquality *new_ComGoogleCommonTruthCorrespondence_TolerantNumericEquality_initWithDouble_(jdouble tolerance) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthCorrespondence_TolerantNumericEquality, initWithDouble_, tolerance)
}

ComGoogleCommonTruthCorrespondence_TolerantNumericEquality *create_ComGoogleCommonTruthCorrespondence_TolerantNumericEquality_initWithDouble_(jdouble tolerance) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthCorrespondence_TolerantNumericEquality, initWithDouble_, tolerance)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthCorrespondence_TolerantNumericEquality)
