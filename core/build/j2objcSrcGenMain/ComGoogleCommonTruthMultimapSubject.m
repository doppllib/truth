//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/truth/core/src/main/java/com/google/common/truth/MultimapSubject.java
//

#include "ComGoogleCommonBaseJoiner.h"
#include "ComGoogleCommonBaseObjects.h"
#include "ComGoogleCommonBasePreconditions.h"
#include "ComGoogleCommonCollectLinkedHashMultiset.h"
#include "ComGoogleCommonCollectLinkedListMultimap.h"
#include "ComGoogleCommonCollectListMultimap.h"
#include "ComGoogleCommonCollectLists.h"
#include "ComGoogleCommonCollectMaps.h"
#include "ComGoogleCommonCollectMultimap.h"
#include "ComGoogleCommonCollectSetMultimap.h"
#include "ComGoogleCommonCollectSets.h"
#include "ComGoogleCommonTruthCorrespondence.h"
#include "ComGoogleCommonTruthFailureStrategy.h"
#include "ComGoogleCommonTruthIterableSubject.h"
#include "ComGoogleCommonTruthMultimapSubject.h"
#include "ComGoogleCommonTruthOrdered.h"
#include "ComGoogleCommonTruthSubject.h"
#include "ComGoogleCommonTruthSubjectUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/annotation/Nullable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleCommonTruthMultimapSubject ()

- (id<ComGoogleCommonTruthOrdered>)containsExactlyWithNSString:(NSString *)failVerb
                            withComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)expectedMultimap;

+ (id<JavaUtilCollection>)getWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)multimap
                                                         withId:(id)key;

+ (id<ComGoogleCommonCollectMultimap>)differenceWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)minuend
                                                withComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)subtrahend;

+ (id<JavaUtilList>)differenceWithJavaUtilList:(id<JavaUtilList>)minuend
                              withJavaUtilList:(id<JavaUtilList>)subtrahend;

+ (NSString *)countDuplicatesMultimapWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)multimap;

@end

__attribute__((unused)) static id<ComGoogleCommonTruthOrdered> ComGoogleCommonTruthMultimapSubject_containsExactlyWithNSString_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthMultimapSubject *self, NSString *failVerb, id<ComGoogleCommonCollectMultimap> expectedMultimap);

__attribute__((unused)) static id<JavaUtilCollection> ComGoogleCommonTruthMultimapSubject_getWithComGoogleCommonCollectMultimap_withId_(id<ComGoogleCommonCollectMultimap> multimap, id key);

__attribute__((unused)) static id<ComGoogleCommonCollectMultimap> ComGoogleCommonTruthMultimapSubject_differenceWithComGoogleCommonCollectMultimap_withComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> minuend, id<ComGoogleCommonCollectMultimap> subtrahend);

__attribute__((unused)) static id<JavaUtilList> ComGoogleCommonTruthMultimapSubject_differenceWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> minuend, id<JavaUtilList> subtrahend);

__attribute__((unused)) static NSString *ComGoogleCommonTruthMultimapSubject_countDuplicatesMultimapWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> multimap);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$3();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$4();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$5();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$6();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$7();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$8();

@interface ComGoogleCommonTruthMultimapSubject_IterableValuesForKey : ComGoogleCommonTruthIterableSubject {
 @public
  id key_;
  NSString *stringRepresentation_;
}

- (instancetype)initWithComGoogleCommonTruthMultimapSubject:(ComGoogleCommonTruthMultimapSubject *)outer$
                    withComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                    withComGoogleCommonTruthMultimapSubject:(ComGoogleCommonTruthMultimapSubject *)multimapSubject
                                                     withId:(id)key;

- (NSString *)actualCustomStringRepresentation;

- (id<JavaLangIterable>)actual;

- (id<JavaLangIterable>)getSubject;

- (ComGoogleCommonTruthIterableSubject *)namedWithNSString:(NSString *)arg0
                                         withNSObjectArray:(IOSObjectArray *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthMultimapSubject_IterableValuesForKey)

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthMultimapSubject_IterableValuesForKey, key_, id)
J2OBJC_FIELD_SETTER(ComGoogleCommonTruthMultimapSubject_IterableValuesForKey, stringRepresentation_, NSString *)

__attribute__((unused)) static void ComGoogleCommonTruthMultimapSubject_IterableValuesForKey_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthFailureStrategy_withComGoogleCommonTruthMultimapSubject_withId_(ComGoogleCommonTruthMultimapSubject_IterableValuesForKey *self, ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthFailureStrategy *failureStrategy, ComGoogleCommonTruthMultimapSubject *multimapSubject, id key);

__attribute__((unused)) static ComGoogleCommonTruthMultimapSubject_IterableValuesForKey *new_ComGoogleCommonTruthMultimapSubject_IterableValuesForKey_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthFailureStrategy_withComGoogleCommonTruthMultimapSubject_withId_(ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthFailureStrategy *failureStrategy, ComGoogleCommonTruthMultimapSubject *multimapSubject, id key) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthMultimapSubject_IterableValuesForKey *create_ComGoogleCommonTruthMultimapSubject_IterableValuesForKey_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthFailureStrategy_withComGoogleCommonTruthMultimapSubject_withId_(ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthFailureStrategy *failureStrategy, ComGoogleCommonTruthMultimapSubject *multimapSubject, id key);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject_IterableValuesForKey__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject_IterableValuesForKey__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject_IterableValuesForKey__Annotations$2();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthMultimapSubject_IterableValuesForKey)

@interface ComGoogleCommonTruthMultimapSubject_MultimapInOrder : NSObject < ComGoogleCommonTruthOrdered > {
 @public
  ComGoogleCommonTruthMultimapSubject *this$0_;
  id<ComGoogleCommonCollectMultimap> expectedMultimap_;
}

- (instancetype)initWithComGoogleCommonTruthMultimapSubject:(ComGoogleCommonTruthMultimapSubject *)outer$
                         withComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)expectedMultimap;

- (void)inOrder;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthMultimapSubject_MultimapInOrder)

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthMultimapSubject_MultimapInOrder, this$0_, ComGoogleCommonTruthMultimapSubject *)
J2OBJC_FIELD_SETTER(ComGoogleCommonTruthMultimapSubject_MultimapInOrder, expectedMultimap_, id<ComGoogleCommonCollectMultimap>)

__attribute__((unused)) static void ComGoogleCommonTruthMultimapSubject_MultimapInOrder_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthMultimapSubject_MultimapInOrder *self, ComGoogleCommonTruthMultimapSubject *outer$, id<ComGoogleCommonCollectMultimap> expectedMultimap);

__attribute__((unused)) static ComGoogleCommonTruthMultimapSubject_MultimapInOrder *new_ComGoogleCommonTruthMultimapSubject_MultimapInOrder_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthMultimapSubject *outer$, id<ComGoogleCommonCollectMultimap> expectedMultimap) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthMultimapSubject_MultimapInOrder *create_ComGoogleCommonTruthMultimapSubject_MultimapInOrder_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthMultimapSubject *outer$, id<ComGoogleCommonCollectMultimap> expectedMultimap);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthMultimapSubject_MultimapInOrder)

@interface ComGoogleCommonTruthMultimapSubject_UsingCorrespondence () {
 @public
  ComGoogleCommonTruthMultimapSubject *this$0_;
  ComGoogleCommonTruthCorrespondence *correspondence_;
}

- (instancetype)initWithComGoogleCommonTruthMultimapSubject:(ComGoogleCommonTruthMultimapSubject *)outer$
                     withComGoogleCommonTruthCorrespondence:(ComGoogleCommonTruthCorrespondence *)correspondence;

- (id<ComGoogleCommonTruthOrdered>)containsExactlyEntriesInWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)expectedMultimap;

- (ComGoogleCommonTruthIterableSubject_UsingCorrespondence *)valuesForKeyWithId:(id)key;

- (id<ComGoogleCommonCollectMultimap>)getCastSubject;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence, this$0_, ComGoogleCommonTruthMultimapSubject *)
J2OBJC_FIELD_SETTER(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence, correspondence_, ComGoogleCommonTruthCorrespondence *)

__attribute__((unused)) static void ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence *self, ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence);

__attribute__((unused)) static ComGoogleCommonTruthMultimapSubject_UsingCorrespondence *new_ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthMultimapSubject_UsingCorrespondence *create_ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence);

__attribute__((unused)) static id<ComGoogleCommonCollectMultimap> ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_getCastSubject(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence *self);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject_UsingCorrespondence__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject_UsingCorrespondence__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultimapSubject_UsingCorrespondence__Annotations$2();

@implementation ComGoogleCommonTruthMultimapSubject

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                         withComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)multimap {
  ComGoogleCommonTruthMultimapSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultimap_(self, failureStrategy, multimap);
  return self;
}

- (void)isEmpty {
  if (![((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) isEmpty]) {
    [self failWithNSString:@"is empty"];
  }
}

- (void)isNotEmpty {
  if ([((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) isEmpty]) {
    [self failWithNSString:@"is not empty"];
  }
}

- (void)hasSizeWithInt:(jint)expectedSize {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withNSObjectArray_(expectedSize >= 0, @"expectedSize(%s) must be >= 0", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(expectedSize) } count:1 type:NSObject_class_()]);
  jint actualSize = [((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) size];
  if (actualSize != expectedSize) {
    [self failWithBadResultsWithNSString:@"has a size of" withId:JavaLangInteger_valueOfWithInt_(expectedSize) withNSString:@"is" withId:JavaLangInteger_valueOfWithInt_(actualSize)];
  }
}

- (void)containsKeyWithId:(id)key {
  if (![((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) containsKeyWithId:key]) {
    [self failWithNSString:@"contains key" withId:key];
  }
}

- (void)doesNotContainKeyWithId:(id)key {
  if ([((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) containsKeyWithId:key]) {
    [self failWithNSString:@"does not contain key" withId:key];
  }
}

- (void)containsEntryWithId:(id)key
                     withId:(id)value {
  if (![((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) containsEntryWithId:key withId:value]) {
    id<JavaUtilMap_Entry> entry_ = ComGoogleCommonCollectMaps_immutableEntryWithId_withId_(key, value);
    if ([((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) containsKeyWithId:key]) {
      [self failWithRawMessageWithNSString:@"Not true that %s contains entry <%s>. However, it has a mapping from <%s> to <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], entry_, key, [((id<JavaUtilMap>) nil_chk([((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) asMap])) getWithId:key] } count:4 type:NSObject_class_()]];
    }
    if ([((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) containsValueWithId:value]) {
      id<JavaUtilSet> keys = create_JavaUtilLinkedHashSet_init();
      for (id<JavaUtilMap_Entry> __strong actualEntry in nil_chk([((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) entries])) {
        if (ComGoogleCommonBaseObjects_equalWithId_withId_([((id<JavaUtilMap_Entry>) nil_chk(actualEntry)) getValue], value)) {
          [keys addWithId:[actualEntry getKey]];
        }
      }
      [self failWithRawMessageWithNSString:@"Not true that %s contains entry <%s>. However, the following keys are mapped to <%s>: %s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], entry_, value, keys } count:4 type:NSObject_class_()]];
    }
    [self failWithNSString:@"contains entry" withId:ComGoogleCommonCollectMaps_immutableEntryWithId_withId_(key, value)];
  }
}

- (void)doesNotContainEntryWithId:(id)key
                           withId:(id)value {
  if ([((id<ComGoogleCommonCollectMultimap>) nil_chk([self actual])) containsEntryWithId:key withId:value]) {
    [self failWithNSString:@"does not contain entry" withId:ComGoogleCommonCollectMaps_immutableEntryWithId_withId_(key, value)];
  }
}

- (ComGoogleCommonTruthIterableSubject *)valuesForKeyWithId:(id)key {
  return create_ComGoogleCommonTruthMultimapSubject_IterableValuesForKey_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthFailureStrategy_withComGoogleCommonTruthMultimapSubject_withId_(self, failureStrategy_, self, key);
}

- (void)isEqualToWithId:(id)other {
  if (!ComGoogleCommonBaseObjects_equalWithId_withId_([self actual], other)) {
    if (([ComGoogleCommonCollectListMultimap_class_() isInstance:[self actual]] && [ComGoogleCommonCollectSetMultimap_class_() isInstance:other]) || ([ComGoogleCommonCollectSetMultimap_class_() isInstance:[self actual]] && [ComGoogleCommonCollectListMultimap_class_() isInstance:other])) {
      NSString *mapType1 = ([ComGoogleCommonCollectListMultimap_class_() isInstance:[self actual]]) ? @"ListMultimap" : @"SetMultimap";
      NSString *mapType2 = ([ComGoogleCommonCollectListMultimap_class_() isInstance:other]) ? @"ListMultimap" : @"SetMultimap";
      [self failWithRawMessageWithNSString:@"Not true that %s %s is equal to %s <%s>. A %s cannot equal a %s if either is non-empty." withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ mapType1, [self actualAsString], mapType2, other, mapType1, mapType2 } count:6 type:NSObject_class_()]];
    }
    else {
      if ([ComGoogleCommonCollectListMultimap_class_() isInstance:[self actual]]) {
        [((id<ComGoogleCommonTruthOrdered>) nil_chk([self containsExactlyEntriesInWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>) cast_check(other, ComGoogleCommonCollectMultimap_class_())])) inOrder];
      }
      else if ([ComGoogleCommonCollectSetMultimap_class_() isInstance:[self actual]]) {
        [self containsExactlyEntriesInWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>) cast_check(other, ComGoogleCommonCollectMultimap_class_())];
      }
      [self failWithNSString:@"is equal to" withId:other];
    }
  }
}

- (id<ComGoogleCommonTruthOrdered>)containsExactlyEntriesInWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)expectedMultimap {
  ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(expectedMultimap, @"expectedMultimap");
  return ComGoogleCommonTruthMultimapSubject_containsExactlyWithNSString_withComGoogleCommonCollectMultimap_(self, @"contains exactly", expectedMultimap);
}

- (id<ComGoogleCommonTruthOrdered>)containsExactlyWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)expectedMultimap {
  return [self containsExactlyEntriesInWithComGoogleCommonCollectMultimap:expectedMultimap];
}

- (id<ComGoogleCommonTruthOrdered>)containsExactlyWithNSString:(NSString *)failVerb
                            withComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)expectedMultimap {
  return ComGoogleCommonTruthMultimapSubject_containsExactlyWithNSString_withComGoogleCommonCollectMultimap_(self, failVerb, expectedMultimap);
}

+ (id<JavaUtilCollection>)getWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)multimap
                                                         withId:(id)key {
  return ComGoogleCommonTruthMultimapSubject_getWithComGoogleCommonCollectMultimap_withId_(multimap, key);
}

+ (id<ComGoogleCommonCollectMultimap>)differenceWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)minuend
                                                withComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)subtrahend {
  return ComGoogleCommonTruthMultimapSubject_differenceWithComGoogleCommonCollectMultimap_withComGoogleCommonCollectMultimap_(minuend, subtrahend);
}

+ (id<JavaUtilList>)differenceWithJavaUtilList:(id<JavaUtilList>)minuend
                              withJavaUtilList:(id<JavaUtilList>)subtrahend {
  return ComGoogleCommonTruthMultimapSubject_differenceWithJavaUtilList_withJavaUtilList_(minuend, subtrahend);
}

+ (NSString *)countDuplicatesMultimapWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)multimap {
  return ComGoogleCommonTruthMultimapSubject_countDuplicatesMultimapWithComGoogleCommonCollectMultimap_(multimap);
}

- (ComGoogleCommonTruthMultimapSubject_UsingCorrespondence *)comparingValuesUsingWithComGoogleCommonTruthCorrespondence:(ComGoogleCommonTruthCorrespondence *)correspondence {
  return create_ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthCorrespondence_(self, correspondence);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, 2 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, 7 },
    { NULL, "V", 0x1, 8, 6, -1, -1, -1, 9 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, 12 },
    { NULL, "V", 0x1, 13, 11, -1, -1, -1, 14 },
    { NULL, "LComGoogleCommonTruthIterableSubject;", 0x1, 15, 6, -1, -1, -1, 16 },
    { NULL, "V", 0x1, 17, 6, -1, -1, -1, 18 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x1, 22, 20, -1, 21, 23, -1 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x2, 22, 24, -1, 25, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xa, 26, 27, -1, 28, -1, 29 },
    { NULL, "LComGoogleCommonCollectMultimap;", 0xa, 30, 31, -1, 32, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 30, 33, -1, 34, -1, -1 },
    { NULL, "LNSString;", 0xa, 35, 20, -1, 36, -1, -1 },
    { NULL, "LComGoogleCommonTruthMultimapSubject_UsingCorrespondence;", 0x1, 37, 38, -1, 39, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthFailureStrategy:withComGoogleCommonCollectMultimap:);
  methods[1].selector = @selector(isEmpty);
  methods[2].selector = @selector(isNotEmpty);
  methods[3].selector = @selector(hasSizeWithInt:);
  methods[4].selector = @selector(containsKeyWithId:);
  methods[5].selector = @selector(doesNotContainKeyWithId:);
  methods[6].selector = @selector(containsEntryWithId:withId:);
  methods[7].selector = @selector(doesNotContainEntryWithId:withId:);
  methods[8].selector = @selector(valuesForKeyWithId:);
  methods[9].selector = @selector(isEqualToWithId:);
  methods[10].selector = @selector(containsExactlyEntriesInWithComGoogleCommonCollectMultimap:);
  methods[11].selector = @selector(containsExactlyWithComGoogleCommonCollectMultimap:);
  methods[12].selector = @selector(containsExactlyWithNSString:withComGoogleCommonCollectMultimap:);
  methods[13].selector = @selector(getWithComGoogleCommonCollectMultimap:withId:);
  methods[14].selector = @selector(differenceWithComGoogleCommonCollectMultimap:withComGoogleCommonCollectMultimap:);
  methods[15].selector = @selector(differenceWithJavaUtilList:withJavaUtilList:);
  methods[16].selector = @selector(countDuplicatesMultimapWithComGoogleCommonCollectMultimap:);
  methods[17].selector = @selector(comparingValuesUsingWithComGoogleCommonTruthCorrespondence:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonTruthFailureStrategy;LComGoogleCommonCollectMultimap;", "(Lcom/google/common/truth/FailureStrategy;Lcom/google/common/collect/Multimap<**>;)V", (void *)&ComGoogleCommonTruthMultimapSubject__Annotations$0, "hasSize", "I", "containsKey", "LNSObject;", (void *)&ComGoogleCommonTruthMultimapSubject__Annotations$1, "doesNotContainKey", (void *)&ComGoogleCommonTruthMultimapSubject__Annotations$2, "containsEntry", "LNSObject;LNSObject;", (void *)&ComGoogleCommonTruthMultimapSubject__Annotations$3, "doesNotContainEntry", (void *)&ComGoogleCommonTruthMultimapSubject__Annotations$4, "valuesForKey", (void *)&ComGoogleCommonTruthMultimapSubject__Annotations$5, "isEqualTo", (void *)&ComGoogleCommonTruthMultimapSubject__Annotations$6, "containsExactlyEntriesIn", "LComGoogleCommonCollectMultimap;", "(Lcom/google/common/collect/Multimap<**>;)Lcom/google/common/truth/Ordered;", "containsExactly", (void *)&ComGoogleCommonTruthMultimapSubject__Annotations$7, "LNSString;LComGoogleCommonCollectMultimap;", "(Ljava/lang/String;Lcom/google/common/collect/Multimap<**>;)Lcom/google/common/truth/Ordered;", "get", "LComGoogleCommonCollectMultimap;LNSObject;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lcom/google/common/collect/Multimap<TK;TV;>;Ljava/lang/Object;)Ljava/util/Collection<TV;>;", (void *)&ComGoogleCommonTruthMultimapSubject__Annotations$8, "difference", "LComGoogleCommonCollectMultimap;LComGoogleCommonCollectMultimap;", "(Lcom/google/common/collect/Multimap<**>;Lcom/google/common/collect/Multimap<**>;)Lcom/google/common/collect/Multimap<**>;", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<*>;Ljava/util/List<*>;)Ljava/util/List<*>;", "countDuplicatesMultimap", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lcom/google/common/collect/Multimap<TK;TV;>;)Ljava/lang/String;", "comparingValuesUsing", "LComGoogleCommonTruthCorrespondence;", "<A:Ljava/lang/Object;E:Ljava/lang/Object;>(Lcom/google/common/truth/Correspondence<TA;TE;>;)Lcom/google/common/truth/MultimapSubject$UsingCorrespondence<TA;TE;>;", "LComGoogleCommonTruthMultimapSubject_IterableValuesForKey;LComGoogleCommonTruthMultimapSubject_MultimapInOrder;LComGoogleCommonTruthMultimapSubject_UsingCorrespondence;", "Lcom/google/common/truth/Subject<Lcom/google/common/truth/MultimapSubject;Lcom/google/common/collect/Multimap<**>;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthMultimapSubject = { "MultimapSubject", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x1, 18, 0, -1, 40, -1, 41, -1 };
  return &_ComGoogleCommonTruthMultimapSubject;
}

@end

void ComGoogleCommonTruthMultimapSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthMultimapSubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectMultimap> multimap) {
  ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureStrategy_withId_(self, failureStrategy, multimap);
}

ComGoogleCommonTruthMultimapSubject *new_ComGoogleCommonTruthMultimapSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectMultimap> multimap) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthMultimapSubject, initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultimap_, failureStrategy, multimap)
}

ComGoogleCommonTruthMultimapSubject *create_ComGoogleCommonTruthMultimapSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectMultimap> multimap) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthMultimapSubject, initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultimap_, failureStrategy, multimap)
}

id<ComGoogleCommonTruthOrdered> ComGoogleCommonTruthMultimapSubject_containsExactlyWithNSString_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthMultimapSubject *self, NSString *failVerb, id<ComGoogleCommonCollectMultimap> expectedMultimap) {
  id<ComGoogleCommonCollectMultimap> missing = ComGoogleCommonTruthMultimapSubject_differenceWithComGoogleCommonCollectMultimap_withComGoogleCommonCollectMultimap_(expectedMultimap, [self actual]);
  id<ComGoogleCommonCollectMultimap> extra = ComGoogleCommonTruthMultimapSubject_differenceWithComGoogleCommonCollectMultimap_withComGoogleCommonCollectMultimap_([self actual], expectedMultimap);
  if (![((id<ComGoogleCommonCollectMultimap>) nil_chk(missing)) isEmpty]) {
    if (![((id<ComGoogleCommonCollectMultimap>) nil_chk(extra)) isEmpty]) {
      [self failWithRawMessageWithNSString:@"Not true that %s %s <%s>. It is missing <%s> and has unexpected items <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], failVerb, expectedMultimap, ComGoogleCommonTruthMultimapSubject_countDuplicatesMultimapWithComGoogleCommonCollectMultimap_(missing), ComGoogleCommonTruthMultimapSubject_countDuplicatesMultimapWithComGoogleCommonCollectMultimap_(extra) } count:5 type:NSObject_class_()]];
    }
    else {
      [self failWithBadResultsWithNSString:failVerb withId:expectedMultimap withNSString:@"is missing" withId:ComGoogleCommonTruthMultimapSubject_countDuplicatesMultimapWithComGoogleCommonCollectMultimap_(missing)];
    }
  }
  else if (![((id<ComGoogleCommonCollectMultimap>) nil_chk(extra)) isEmpty]) {
    [self failWithBadResultsWithNSString:failVerb withId:expectedMultimap withNSString:@"has unexpected items" withId:ComGoogleCommonTruthMultimapSubject_countDuplicatesMultimapWithComGoogleCommonCollectMultimap_(extra)];
  }
  return create_ComGoogleCommonTruthMultimapSubject_MultimapInOrder_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonCollectMultimap_(self, expectedMultimap);
}

id<JavaUtilCollection> ComGoogleCommonTruthMultimapSubject_getWithComGoogleCommonCollectMultimap_withId_(id<ComGoogleCommonCollectMultimap> multimap, id key) {
  ComGoogleCommonTruthMultimapSubject_initialize();
  if ([((id<ComGoogleCommonCollectMultimap>) nil_chk(multimap)) containsKeyWithId:key]) {
    return [((id<JavaUtilMap>) nil_chk([multimap asMap])) getWithId:key];
  }
  else {
    return JavaUtilCollections_emptyList();
  }
}

id<ComGoogleCommonCollectMultimap> ComGoogleCommonTruthMultimapSubject_differenceWithComGoogleCommonCollectMultimap_withComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> minuend, id<ComGoogleCommonCollectMultimap> subtrahend) {
  ComGoogleCommonTruthMultimapSubject_initialize();
  ComGoogleCommonCollectLinkedListMultimap *difference = ComGoogleCommonCollectLinkedListMultimap_create();
  for (id __strong key in nil_chk([((id<ComGoogleCommonCollectMultimap>) nil_chk(minuend)) keySet])) {
    id<JavaUtilList> valDifference = ComGoogleCommonTruthMultimapSubject_differenceWithJavaUtilList_withJavaUtilList_(ComGoogleCommonCollectLists_newArrayListWithJavaLangIterable_(ComGoogleCommonTruthMultimapSubject_getWithComGoogleCommonCollectMultimap_withId_(minuend, key)), ComGoogleCommonCollectLists_newArrayListWithJavaLangIterable_(ComGoogleCommonTruthMultimapSubject_getWithComGoogleCommonCollectMultimap_withId_(subtrahend, key)));
    [((ComGoogleCommonCollectLinkedListMultimap *) nil_chk(difference)) putAllWithId:key withJavaLangIterable:valDifference];
  }
  return difference;
}

id<JavaUtilList> ComGoogleCommonTruthMultimapSubject_differenceWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> minuend, id<JavaUtilList> subtrahend) {
  ComGoogleCommonTruthMultimapSubject_initialize();
  ComGoogleCommonCollectLinkedHashMultiset *remaining = ComGoogleCommonCollectLinkedHashMultiset_createWithJavaLangIterable_(subtrahend);
  id<JavaUtilList> difference = ComGoogleCommonCollectLists_newArrayList();
  for (id __strong elem in nil_chk(minuend)) {
    if (![((ComGoogleCommonCollectLinkedHashMultiset *) nil_chk(remaining)) removeWithId:elem]) {
      [((id<JavaUtilList>) nil_chk(difference)) addWithId:elem];
    }
  }
  return difference;
}

NSString *ComGoogleCommonTruthMultimapSubject_countDuplicatesMultimapWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> multimap) {
  ComGoogleCommonTruthMultimapSubject_initialize();
  id<JavaUtilList> entries = create_JavaUtilArrayList_init();
  for (id __strong key in nil_chk([((id<ComGoogleCommonCollectMultimap>) nil_chk(multimap)) keySet])) {
    [entries addWithId:JreStrcat("@C@", key, '=', ComGoogleCommonTruthSubjectUtils_countDuplicatesWithJavaUtilCollection_([multimap getWithId:key]))];
  }
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [sb appendWithNSString:@"{"];
  [((ComGoogleCommonBaseJoiner *) nil_chk(ComGoogleCommonBaseJoiner_onWithNSString_(@", "))) appendToWithJavaLangStringBuilder:sb withJavaLangIterable:entries];
  [sb appendWithNSString:@"}"];
  return [sb description];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthMultimapSubject)

@implementation ComGoogleCommonTruthMultimapSubject_IterableValuesForKey

- (instancetype)initWithComGoogleCommonTruthMultimapSubject:(ComGoogleCommonTruthMultimapSubject *)outer$
                    withComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                    withComGoogleCommonTruthMultimapSubject:(ComGoogleCommonTruthMultimapSubject *)multimapSubject
                                                     withId:(id)key {
  ComGoogleCommonTruthMultimapSubject_IterableValuesForKey_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthFailureStrategy_withComGoogleCommonTruthMultimapSubject_withId_(self, outer$, failureStrategy, multimapSubject, key);
  return self;
}

- (NSString *)actualCustomStringRepresentation {
  return JreStrcat("$@$@$$", @"Values for key <", key_, @"> (<", [self actual], @">) in ", stringRepresentation_);
}

- (void)dealloc {
  RELEASE_(key_);
  RELEASE_(stringRepresentation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, 1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthMultimapSubject:withComGoogleCommonTruthFailureStrategy:withComGoogleCommonTruthMultimapSubject:withId:);
  methods[1].selector = @selector(actualCustomStringRepresentation);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, 2 },
    { "stringRepresentation_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, 3 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonTruthMultimapSubject;LComGoogleCommonTruthFailureStrategy;LComGoogleCommonTruthMultimapSubject;LNSObject;", (void *)&ComGoogleCommonTruthMultimapSubject_IterableValuesForKey__Annotations$0, (void *)&ComGoogleCommonTruthMultimapSubject_IterableValuesForKey__Annotations$1, (void *)&ComGoogleCommonTruthMultimapSubject_IterableValuesForKey__Annotations$2, "LComGoogleCommonTruthMultimapSubject;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthMultimapSubject_IterableValuesForKey = { "IterableValuesForKey", "com.google.common.truth", ptrTable, methods, fields, 7, 0x2, 2, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonTruthMultimapSubject_IterableValuesForKey;
}

@end

void ComGoogleCommonTruthMultimapSubject_IterableValuesForKey_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthFailureStrategy_withComGoogleCommonTruthMultimapSubject_withId_(ComGoogleCommonTruthMultimapSubject_IterableValuesForKey *self, ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthFailureStrategy *failureStrategy, ComGoogleCommonTruthMultimapSubject *multimapSubject, id key) {
  ComGoogleCommonTruthIterableSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangIterable_(self, failureStrategy, [((id<ComGoogleCommonCollectMultimap>) nil_chk(([((ComGoogleCommonTruthMultimapSubject *) nil_chk(multimapSubject)) actual]))) getWithId:key]);
  JreStrongAssign(&self->key_, key);
  JreStrongAssign(&self->stringRepresentation_, [multimapSubject actualAsString]);
}

ComGoogleCommonTruthMultimapSubject_IterableValuesForKey *new_ComGoogleCommonTruthMultimapSubject_IterableValuesForKey_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthFailureStrategy_withComGoogleCommonTruthMultimapSubject_withId_(ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthFailureStrategy *failureStrategy, ComGoogleCommonTruthMultimapSubject *multimapSubject, id key) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthMultimapSubject_IterableValuesForKey, initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthFailureStrategy_withComGoogleCommonTruthMultimapSubject_withId_, outer$, failureStrategy, multimapSubject, key)
}

ComGoogleCommonTruthMultimapSubject_IterableValuesForKey *create_ComGoogleCommonTruthMultimapSubject_IterableValuesForKey_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthFailureStrategy_withComGoogleCommonTruthMultimapSubject_withId_(ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthFailureStrategy *failureStrategy, ComGoogleCommonTruthMultimapSubject *multimapSubject, id key) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthMultimapSubject_IterableValuesForKey, initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthFailureStrategy_withComGoogleCommonTruthMultimapSubject_withId_, outer$, failureStrategy, multimapSubject, key)
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject_IterableValuesForKey__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:4 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject_IterableValuesForKey__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject_IterableValuesForKey__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthMultimapSubject_IterableValuesForKey)

@implementation ComGoogleCommonTruthMultimapSubject_MultimapInOrder

- (instancetype)initWithComGoogleCommonTruthMultimapSubject:(ComGoogleCommonTruthMultimapSubject *)outer$
                         withComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)expectedMultimap {
  ComGoogleCommonTruthMultimapSubject_MultimapInOrder_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonCollectMultimap_(self, outer$, expectedMultimap);
  return self;
}

- (void)inOrder {
  jboolean keysInOrder = [((JavaUtilArrayList *) nil_chk(ComGoogleCommonCollectLists_newArrayListWithJavaLangIterable_([((id<ComGoogleCommonCollectMultimap>) nil_chk([this$0_ actual])) keySet]))) isEqual:ComGoogleCommonCollectLists_newArrayListWithJavaLangIterable_([((id<ComGoogleCommonCollectMultimap>) nil_chk(expectedMultimap_)) keySet])];
  JavaUtilLinkedHashSet *keysWithValuesOutOfOrder = ComGoogleCommonCollectSets_newLinkedHashSet();
  JavaUtilLinkedHashSet *allKeys = ComGoogleCommonCollectSets_newLinkedHashSet();
  [((JavaUtilLinkedHashSet *) nil_chk(allKeys)) addAllWithJavaUtilCollection:[((id<ComGoogleCommonCollectMultimap>) nil_chk([this$0_ actual])) keySet]];
  [allKeys addAllWithJavaUtilCollection:[expectedMultimap_ keySet]];
  for (id __strong key in allKeys) {
    id<JavaUtilList> actualVals = ComGoogleCommonCollectLists_newArrayListWithJavaLangIterable_(ComGoogleCommonTruthMultimapSubject_getWithComGoogleCommonCollectMultimap_withId_([this$0_ actual], key));
    id<JavaUtilList> expectedVals = ComGoogleCommonCollectLists_newArrayListWithJavaLangIterable_(ComGoogleCommonTruthMultimapSubject_getWithComGoogleCommonCollectMultimap_withId_(expectedMultimap_, key));
    if (![((id<JavaUtilList>) nil_chk(actualVals)) isEqual:expectedVals]) {
      [((JavaUtilLinkedHashSet *) nil_chk(keysWithValuesOutOfOrder)) addWithId:key];
    }
  }
  if (!keysInOrder) {
    if (![((JavaUtilLinkedHashSet *) nil_chk(keysWithValuesOutOfOrder)) isEmpty]) {
      [this$0_ failWithRawMessageWithNSString:@"Not true that %s contains exactly <%s> in order. The keys are not in order, and the values for keys <%s> are not in order either" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], expectedMultimap_, keysWithValuesOutOfOrder } count:3 type:NSObject_class_()]];
    }
    else {
      [this$0_ failWithRawMessageWithNSString:@"Not true that %s contains exactly <%s> in order. The keys are not in order" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], expectedMultimap_ } count:2 type:NSObject_class_()]];
    }
  }
  else if (![((JavaUtilLinkedHashSet *) nil_chk(keysWithValuesOutOfOrder)) isEmpty]) {
    [this$0_ failWithRawMessageWithNSString:@"Not true that %s contains exactly <%s> in order. The values for keys <%s> are not in order" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], expectedMultimap_, keysWithValuesOutOfOrder } count:3 type:NSObject_class_()]];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(expectedMultimap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthMultimapSubject:withComGoogleCommonCollectMultimap:);
  methods[1].selector = @selector(inOrder);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonTruthMultimapSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "expectedMultimap_", "LComGoogleCommonCollectMultimap;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonTruthMultimapSubject;LComGoogleCommonCollectMultimap;", "(Lcom/google/common/truth/MultimapSubject;Lcom/google/common/collect/Multimap<**>;)V", "Lcom/google/common/collect/Multimap<**>;", "LComGoogleCommonTruthMultimapSubject;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthMultimapSubject_MultimapInOrder = { "MultimapInOrder", "com.google.common.truth", ptrTable, methods, fields, 7, 0x2, 2, 2, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonTruthMultimapSubject_MultimapInOrder;
}

@end

void ComGoogleCommonTruthMultimapSubject_MultimapInOrder_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthMultimapSubject_MultimapInOrder *self, ComGoogleCommonTruthMultimapSubject *outer$, id<ComGoogleCommonCollectMultimap> expectedMultimap) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->expectedMultimap_, expectedMultimap);
}

ComGoogleCommonTruthMultimapSubject_MultimapInOrder *new_ComGoogleCommonTruthMultimapSubject_MultimapInOrder_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthMultimapSubject *outer$, id<ComGoogleCommonCollectMultimap> expectedMultimap) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthMultimapSubject_MultimapInOrder, initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonCollectMultimap_, outer$, expectedMultimap)
}

ComGoogleCommonTruthMultimapSubject_MultimapInOrder *create_ComGoogleCommonTruthMultimapSubject_MultimapInOrder_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonCollectMultimap_(ComGoogleCommonTruthMultimapSubject *outer$, id<ComGoogleCommonCollectMultimap> expectedMultimap) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthMultimapSubject_MultimapInOrder, initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonCollectMultimap_, outer$, expectedMultimap)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthMultimapSubject_MultimapInOrder)

@implementation ComGoogleCommonTruthMultimapSubject_UsingCorrespondence

- (instancetype)initWithComGoogleCommonTruthMultimapSubject:(ComGoogleCommonTruthMultimapSubject *)outer$
                     withComGoogleCommonTruthCorrespondence:(ComGoogleCommonTruthCorrespondence *)correspondence {
  ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthCorrespondence_(self, outer$, correspondence);
  return self;
}

- (void)containsEntryWithId:(id)expectedKey
                     withId:(id)expectedValue {
  if ([((id<ComGoogleCommonCollectMultimap>) nil_chk([this$0_ actual])) containsKeyWithId:expectedKey]) {
    id<JavaUtilCollection> actualValues = [((id<JavaUtilMap>) nil_chk([((id<ComGoogleCommonCollectMultimap>) nil_chk(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_getCastSubject(self))) asMap])) getWithId:expectedKey];
    for (id __strong actualValue in nil_chk(actualValues)) {
      if ([((ComGoogleCommonTruthCorrespondence *) nil_chk(correspondence_)) compareWithId:actualValue withId:expectedValue]) {
        return;
      }
    }
    [this$0_ failWithRawMessageWithNSString:@"Not true that %s contains at least one entry with key <%s> and a value that %s <%s>. However, it has a mapping from that key to <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], expectedKey, correspondence_, expectedValue, actualValues } count:5 type:NSObject_class_()]];
  }
  else {
    id<JavaUtilSet> keys = create_JavaUtilLinkedHashSet_init();
    for (id<JavaUtilMap_Entry> __strong actualEntry in nil_chk([((id<ComGoogleCommonCollectMultimap>) nil_chk(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_getCastSubject(self))) entries])) {
      if ([((ComGoogleCommonTruthCorrespondence *) nil_chk(correspondence_)) compareWithId:[((id<JavaUtilMap_Entry>) nil_chk(actualEntry)) getValue] withId:expectedValue]) {
        [keys addWithId:[actualEntry getKey]];
      }
    }
    if (![keys isEmpty]) {
      [this$0_ failWithRawMessageWithNSString:@"Not true that %s contains at least one entry with key <%s> and a value that %s <%s>. However, the following keys are mapped to such values: <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], expectedKey, correspondence_, expectedValue, keys } count:5 type:NSObject_class_()]];
    }
    else {
      [this$0_ failWithRawMessageWithNSString:@"Not true that %s contains at least one entry with key <%s> and a value that %s <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], expectedKey, correspondence_, expectedValue } count:4 type:NSObject_class_()]];
    }
  }
}

- (void)doesNotContainEntryWithId:(id)excludedKey
                           withId:(id)excludedValue {
  if ([((id<ComGoogleCommonCollectMultimap>) nil_chk([this$0_ actual])) containsKeyWithId:excludedKey]) {
    id<JavaUtilCollection> actualValues = [((id<JavaUtilMap>) nil_chk([((id<ComGoogleCommonCollectMultimap>) nil_chk(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_getCastSubject(self))) asMap])) getWithId:excludedKey];
    id<JavaUtilList> matchingValues = create_JavaUtilArrayList_init();
    for (id __strong actualValue in nil_chk(actualValues)) {
      if ([((ComGoogleCommonTruthCorrespondence *) nil_chk(correspondence_)) compareWithId:actualValue withId:excludedValue]) {
        [matchingValues addWithId:actualValue];
      }
    }
    if (![matchingValues isEmpty]) {
      [this$0_ failWithRawMessageWithNSString:@"Not true that %s did not contain an entry with key <%s> and a value that %s <%s>. It maps that key to the following such values: <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], excludedKey, correspondence_, excludedValue, matchingValues } count:5 type:NSObject_class_()]];
    }
  }
}

- (id<ComGoogleCommonTruthOrdered>)containsExactlyEntriesInWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)expectedMultimap {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (ComGoogleCommonTruthIterableSubject_UsingCorrespondence *)valuesForKeyWithId:(id)key {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<ComGoogleCommonCollectMultimap>)getCastSubject {
  return ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_getCastSubject(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(correspondence_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, 5 },
    { NULL, "V", 0x1, 6, 3, -1, 4, -1, 7 },
    { NULL, "LComGoogleCommonTruthOrdered;", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, "LComGoogleCommonTruthIterableSubject_UsingCorrespondence;", 0x2, 11, 12, -1, 13, -1, 14 },
    { NULL, "LComGoogleCommonCollectMultimap;", 0x2, -1, -1, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthMultimapSubject:withComGoogleCommonTruthCorrespondence:);
  methods[1].selector = @selector(containsEntryWithId:withId:);
  methods[2].selector = @selector(doesNotContainEntryWithId:withId:);
  methods[3].selector = @selector(containsExactlyEntriesInWithComGoogleCommonCollectMultimap:);
  methods[4].selector = @selector(valuesForKeyWithId:);
  methods[5].selector = @selector(getCastSubject);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonTruthMultimapSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "correspondence_", "LComGoogleCommonTruthCorrespondence;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonTruthMultimapSubject;LComGoogleCommonTruthCorrespondence;", "(Lcom/google/common/truth/MultimapSubject;Lcom/google/common/truth/Correspondence<TA;TE;>;)V", "containsEntry", "LNSObject;LNSObject;", "(Ljava/lang/Object;TE;)V", (void *)&ComGoogleCommonTruthMultimapSubject_UsingCorrespondence__Annotations$0, "doesNotContainEntry", (void *)&ComGoogleCommonTruthMultimapSubject_UsingCorrespondence__Annotations$1, "containsExactlyEntriesIn", "LComGoogleCommonCollectMultimap;", "(Lcom/google/common/collect/Multimap<*+TE;>;)Lcom/google/common/truth/Ordered;", "valuesForKey", "LNSObject;", "(Ljava/lang/Object;)Lcom/google/common/truth/IterableSubject$UsingCorrespondence<TA;TE;>;", (void *)&ComGoogleCommonTruthMultimapSubject_UsingCorrespondence__Annotations$2, "()Lcom/google/common/collect/Multimap<*TA;>;", "Lcom/google/common/truth/Correspondence<TA;TE;>;", "LComGoogleCommonTruthMultimapSubject;", "<A:Ljava/lang/Object;E:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthMultimapSubject_UsingCorrespondence = { "UsingCorrespondence", "com.google.common.truth", ptrTable, methods, fields, 7, 0x11, 6, 2, 17, -1, -1, 18, -1 };
  return &_ComGoogleCommonTruthMultimapSubject_UsingCorrespondence;
}

@end

void ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence *self, ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->correspondence_, ComGoogleCommonBasePreconditions_checkNotNullWithId_(correspondence));
}

ComGoogleCommonTruthMultimapSubject_UsingCorrespondence *new_ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence, initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthCorrespondence_, outer$, correspondence)
}

ComGoogleCommonTruthMultimapSubject_UsingCorrespondence *create_ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthCorrespondence_(ComGoogleCommonTruthMultimapSubject *outer$, ComGoogleCommonTruthCorrespondence *correspondence) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence, initWithComGoogleCommonTruthMultimapSubject_withComGoogleCommonTruthCorrespondence_, outer$, correspondence)
}

id<ComGoogleCommonCollectMultimap> ComGoogleCommonTruthMultimapSubject_UsingCorrespondence_getCastSubject(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence *self) {
  return [self->this$0_ actual];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject_UsingCorrespondence__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject_UsingCorrespondence__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultimapSubject_UsingCorrespondence__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthMultimapSubject_UsingCorrespondence)
