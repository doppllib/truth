//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonTruthTruth")
#ifdef RESTRICT_ComGoogleCommonTruthTruth
#define INCLUDE_ALL_ComGoogleCommonTruthTruth 0
#else
#define INCLUDE_ALL_ComGoogleCommonTruthTruth 1
#endif
#undef RESTRICT_ComGoogleCommonTruthTruth

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonTruthTruth_) && (INCLUDE_ALL_ComGoogleCommonTruthTruth || defined(INCLUDE_ComGoogleCommonTruthTruth))
#define ComGoogleCommonTruthTruth_

@class ComGoogleCommonBaseOptional;
@class ComGoogleCommonTruthAbstractVerb_DelegatedVerb;
@class ComGoogleCommonTruthAtomicLongMapSubject;
@class ComGoogleCommonTruthBigDecimalSubject;
@class ComGoogleCommonTruthBooleanSubject;
@class ComGoogleCommonTruthClassSubject;
@class ComGoogleCommonTruthComparableSubject;
@class ComGoogleCommonTruthDoubleSubject;
@class ComGoogleCommonTruthFailureStrategy;
@class ComGoogleCommonTruthFloatSubject;
@class ComGoogleCommonTruthGuavaOptionalSubject;
@class ComGoogleCommonTruthIntegerSubject;
@class ComGoogleCommonTruthIterableSubject;
@class ComGoogleCommonTruthListMultimapSubject;
@class ComGoogleCommonTruthLongSubject;
@class ComGoogleCommonTruthMapSubject;
@class ComGoogleCommonTruthMultimapSubject;
@class ComGoogleCommonTruthMultisetSubject;
@class ComGoogleCommonTruthObjectArraySubject;
@class ComGoogleCommonTruthPrimitiveBooleanArraySubject;
@class ComGoogleCommonTruthPrimitiveByteArraySubject;
@class ComGoogleCommonTruthPrimitiveCharArraySubject;
@class ComGoogleCommonTruthPrimitiveDoubleArraySubject;
@class ComGoogleCommonTruthPrimitiveFloatArraySubject;
@class ComGoogleCommonTruthPrimitiveIntArraySubject;
@class ComGoogleCommonTruthPrimitiveLongArraySubject;
@class ComGoogleCommonTruthPrimitiveShortArraySubject;
@class ComGoogleCommonTruthSetMultimapSubject;
@class ComGoogleCommonTruthSortedMapSubject;
@class ComGoogleCommonTruthSortedSetSubject;
@class ComGoogleCommonTruthStringSubject;
@class ComGoogleCommonTruthSubject;
@class ComGoogleCommonTruthSubjectFactory;
@class ComGoogleCommonTruthTableSubject;
@class ComGoogleCommonTruthTestVerb;
@class ComGoogleCommonTruthThrowableSubject;
@class ComGoogleCommonUtilConcurrentAtomicLongMap;
@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSClass;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@class JavaLangBoolean;
@class JavaLangDouble;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaMathBigDecimal;
@protocol ComGoogleCommonCollectListMultimap;
@protocol ComGoogleCommonCollectMultimap;
@protocol ComGoogleCommonCollectMultiset;
@protocol ComGoogleCommonCollectSetMultimap;
@protocol ComGoogleCommonCollectTable;
@protocol JavaLangComparable;
@protocol JavaLangIterable;
@protocol JavaUtilMap;
@protocol JavaUtilSortedMap;
@protocol JavaUtilSortedSet;

@interface ComGoogleCommonTruthTruth : NSObject

#pragma mark Public

+ (ComGoogleCommonTruthTestVerb *)assert_;

+ (ComGoogleCommonTruthAbstractVerb_DelegatedVerb *)assertAboutWithComGoogleCommonTruthSubjectFactory:(ComGoogleCommonTruthSubjectFactory *)factory;

+ (ComGoogleCommonTruthAtomicLongMapSubject *)assertThatWithComGoogleCommonUtilConcurrentAtomicLongMap:(ComGoogleCommonUtilConcurrentAtomicLongMap *)target;

+ (ComGoogleCommonTruthBigDecimalSubject *)assertThatWithJavaMathBigDecimal:(JavaMathBigDecimal *)target;

+ (ComGoogleCommonTruthBooleanSubject *)assertThatWithJavaLangBoolean:(JavaLangBoolean *)target;

+ (ComGoogleCommonTruthPrimitiveBooleanArraySubject *)assertThatWithBooleanArray:(IOSBooleanArray *)target;

+ (ComGoogleCommonTruthPrimitiveByteArraySubject *)assertThatWithByteArray:(IOSByteArray *)target;

+ (ComGoogleCommonTruthPrimitiveCharArraySubject *)assertThatWithCharArray:(IOSCharArray *)target;

+ (ComGoogleCommonTruthClassSubject *)assertThatWithIOSClass:(IOSClass *)target;

+ (ComGoogleCommonTruthDoubleSubject *)assertThatWithJavaLangDouble:(JavaLangDouble *)target;

+ (ComGoogleCommonTruthPrimitiveDoubleArraySubject *)assertThatWithDoubleArray:(IOSDoubleArray *)target;

+ (ComGoogleCommonTruthFloatSubject *)assertThatWithJavaLangFloat:(JavaLangFloat *)target;

+ (ComGoogleCommonTruthPrimitiveFloatArraySubject *)assertThatWithFloatArray:(IOSFloatArray *)target;

+ (ComGoogleCommonTruthPrimitiveIntArraySubject *)assertThatWithIntArray:(IOSIntArray *)target;

+ (ComGoogleCommonTruthIntegerSubject *)assertThatWithJavaLangInteger:(JavaLangInteger *)target;

+ (ComGoogleCommonTruthIterableSubject *)assertThatWithJavaLangIterable:(id<JavaLangIterable>)target;

+ (ComGoogleCommonTruthListMultimapSubject *)assertThatWithComGoogleCommonCollectListMultimap:(id<ComGoogleCommonCollectListMultimap>)target;

+ (ComGoogleCommonTruthLongSubject *)assertThatWithJavaLangLong:(JavaLangLong *)target;

+ (ComGoogleCommonTruthPrimitiveLongArraySubject *)assertThatWithLongArray:(IOSLongArray *)target;

+ (ComGoogleCommonTruthMapSubject *)assertThatWithJavaUtilMap:(id<JavaUtilMap>)target;

+ (ComGoogleCommonTruthMultimapSubject *)assertThatWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap>)target;

+ (ComGoogleCommonTruthMultisetSubject *)assertThatWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset>)target;

+ (ComGoogleCommonTruthSubject *)assertThatWithId:(id)target;

+ (ComGoogleCommonTruthGuavaOptionalSubject *)assertThatWithComGoogleCommonBaseOptional:(ComGoogleCommonBaseOptional *)target;

+ (ComGoogleCommonTruthSetMultimapSubject *)assertThatWithComGoogleCommonCollectSetMultimap:(id<ComGoogleCommonCollectSetMultimap>)target;

+ (ComGoogleCommonTruthPrimitiveShortArraySubject *)assertThatWithShortArray:(IOSShortArray *)target;

+ (ComGoogleCommonTruthSortedMapSubject *)assertThatWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)target;

+ (ComGoogleCommonTruthSortedSetSubject *)assertThatWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)target;

+ (ComGoogleCommonTruthStringSubject *)assertThatWithNSString:(NSString *)target;

+ (ComGoogleCommonTruthComparableSubject *)assertThatWithJavaLangComparable:(id<JavaLangComparable>)target;

+ (ComGoogleCommonTruthObjectArraySubject *)assertThatWithNSObjectArray:(IOSObjectArray *)target;

+ (ComGoogleCommonTruthTableSubject *)assertThatWithComGoogleCommonCollectTable:(id<ComGoogleCommonCollectTable>)target;

+ (ComGoogleCommonTruthThrowableSubject *)assertThatWithNSException:(NSException *)target;

+ (ComGoogleCommonTruthTestVerb *)assertWithMessageWithNSString:(NSString *)messageToPrepend;

+ (ComGoogleCommonTruthTestVerb *)assertWithMessageWithNSString:(NSString *)format
                                              withNSObjectArray:(IOSObjectArray *)args;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonTruthTruth)

inline ComGoogleCommonTruthFailureStrategy *ComGoogleCommonTruthTruth_get_THROW_ASSERTION_ERROR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonTruthFailureStrategy *ComGoogleCommonTruthTruth_THROW_ASSERTION_ERROR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonTruthTruth, THROW_ASSERTION_ERROR, ComGoogleCommonTruthFailureStrategy *)

FOUNDATION_EXPORT ComGoogleCommonTruthTestVerb *ComGoogleCommonTruthTruth_assert_();

FOUNDATION_EXPORT ComGoogleCommonTruthTestVerb *ComGoogleCommonTruthTruth_assertWithMessageWithNSString_(NSString *messageToPrepend);

FOUNDATION_EXPORT ComGoogleCommonTruthTestVerb *ComGoogleCommonTruthTruth_assertWithMessageWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *args);

FOUNDATION_EXPORT ComGoogleCommonTruthAbstractVerb_DelegatedVerb *ComGoogleCommonTruthTruth_assertAboutWithComGoogleCommonTruthSubjectFactory_(ComGoogleCommonTruthSubjectFactory *factory);

FOUNDATION_EXPORT ComGoogleCommonTruthComparableSubject *ComGoogleCommonTruthTruth_assertThatWithJavaLangComparable_(id<JavaLangComparable> target);

FOUNDATION_EXPORT ComGoogleCommonTruthBigDecimalSubject *ComGoogleCommonTruthTruth_assertThatWithJavaMathBigDecimal_(JavaMathBigDecimal *target);

FOUNDATION_EXPORT ComGoogleCommonTruthSubject *ComGoogleCommonTruthTruth_assertThatWithId_(id target);

FOUNDATION_EXPORT ComGoogleCommonTruthClassSubject *ComGoogleCommonTruthTruth_assertThatWithIOSClass_(IOSClass *target);

FOUNDATION_EXPORT ComGoogleCommonTruthThrowableSubject *ComGoogleCommonTruthTruth_assertThatWithNSException_(NSException *target);

FOUNDATION_EXPORT ComGoogleCommonTruthLongSubject *ComGoogleCommonTruthTruth_assertThatWithJavaLangLong_(JavaLangLong *target);

FOUNDATION_EXPORT ComGoogleCommonTruthDoubleSubject *ComGoogleCommonTruthTruth_assertThatWithJavaLangDouble_(JavaLangDouble *target);

FOUNDATION_EXPORT ComGoogleCommonTruthFloatSubject *ComGoogleCommonTruthTruth_assertThatWithJavaLangFloat_(JavaLangFloat *target);

FOUNDATION_EXPORT ComGoogleCommonTruthIntegerSubject *ComGoogleCommonTruthTruth_assertThatWithJavaLangInteger_(JavaLangInteger *target);

FOUNDATION_EXPORT ComGoogleCommonTruthBooleanSubject *ComGoogleCommonTruthTruth_assertThatWithJavaLangBoolean_(JavaLangBoolean *target);

FOUNDATION_EXPORT ComGoogleCommonTruthStringSubject *ComGoogleCommonTruthTruth_assertThatWithNSString_(NSString *target);

FOUNDATION_EXPORT ComGoogleCommonTruthIterableSubject *ComGoogleCommonTruthTruth_assertThatWithJavaLangIterable_(id<JavaLangIterable> target);

FOUNDATION_EXPORT ComGoogleCommonTruthSortedSetSubject *ComGoogleCommonTruthTruth_assertThatWithJavaUtilSortedSet_(id<JavaUtilSortedSet> target);

FOUNDATION_EXPORT ComGoogleCommonTruthObjectArraySubject *ComGoogleCommonTruthTruth_assertThatWithNSObjectArray_(IOSObjectArray *target);

FOUNDATION_EXPORT ComGoogleCommonTruthPrimitiveBooleanArraySubject *ComGoogleCommonTruthTruth_assertThatWithBooleanArray_(IOSBooleanArray *target);

FOUNDATION_EXPORT ComGoogleCommonTruthPrimitiveShortArraySubject *ComGoogleCommonTruthTruth_assertThatWithShortArray_(IOSShortArray *target);

FOUNDATION_EXPORT ComGoogleCommonTruthPrimitiveIntArraySubject *ComGoogleCommonTruthTruth_assertThatWithIntArray_(IOSIntArray *target);

FOUNDATION_EXPORT ComGoogleCommonTruthPrimitiveLongArraySubject *ComGoogleCommonTruthTruth_assertThatWithLongArray_(IOSLongArray *target);

FOUNDATION_EXPORT ComGoogleCommonTruthPrimitiveByteArraySubject *ComGoogleCommonTruthTruth_assertThatWithByteArray_(IOSByteArray *target);

FOUNDATION_EXPORT ComGoogleCommonTruthPrimitiveCharArraySubject *ComGoogleCommonTruthTruth_assertThatWithCharArray_(IOSCharArray *target);

FOUNDATION_EXPORT ComGoogleCommonTruthPrimitiveFloatArraySubject *ComGoogleCommonTruthTruth_assertThatWithFloatArray_(IOSFloatArray *target);

FOUNDATION_EXPORT ComGoogleCommonTruthPrimitiveDoubleArraySubject *ComGoogleCommonTruthTruth_assertThatWithDoubleArray_(IOSDoubleArray *target);

FOUNDATION_EXPORT ComGoogleCommonTruthGuavaOptionalSubject *ComGoogleCommonTruthTruth_assertThatWithComGoogleCommonBaseOptional_(ComGoogleCommonBaseOptional *target);

FOUNDATION_EXPORT ComGoogleCommonTruthMapSubject *ComGoogleCommonTruthTruth_assertThatWithJavaUtilMap_(id<JavaUtilMap> target);

FOUNDATION_EXPORT ComGoogleCommonTruthSortedMapSubject *ComGoogleCommonTruthTruth_assertThatWithJavaUtilSortedMap_(id<JavaUtilSortedMap> target);

FOUNDATION_EXPORT ComGoogleCommonTruthMultimapSubject *ComGoogleCommonTruthTruth_assertThatWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> target);

FOUNDATION_EXPORT ComGoogleCommonTruthListMultimapSubject *ComGoogleCommonTruthTruth_assertThatWithComGoogleCommonCollectListMultimap_(id<ComGoogleCommonCollectListMultimap> target);

FOUNDATION_EXPORT ComGoogleCommonTruthSetMultimapSubject *ComGoogleCommonTruthTruth_assertThatWithComGoogleCommonCollectSetMultimap_(id<ComGoogleCommonCollectSetMultimap> target);

FOUNDATION_EXPORT ComGoogleCommonTruthMultisetSubject *ComGoogleCommonTruthTruth_assertThatWithComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> target);

FOUNDATION_EXPORT ComGoogleCommonTruthTableSubject *ComGoogleCommonTruthTruth_assertThatWithComGoogleCommonCollectTable_(id<ComGoogleCommonCollectTable> target);

FOUNDATION_EXPORT ComGoogleCommonTruthAtomicLongMapSubject *ComGoogleCommonTruthTruth_assertThatWithComGoogleCommonUtilConcurrentAtomicLongMap_(ComGoogleCommonUtilConcurrentAtomicLongMap *target);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthTruth)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonTruthTruth")
