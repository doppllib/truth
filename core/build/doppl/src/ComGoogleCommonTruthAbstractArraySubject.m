//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComGoogleCommonTruthAbstractArraySubject.h"
#include "ComGoogleCommonTruthFailureStrategy.h"
#include "ComGoogleCommonTruthPlatform.h"
#include "ComGoogleCommonTruthSubject.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "javax/annotation/Nullable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthAbstractArraySubject__Annotations$0();

@implementation ComGoogleCommonTruthAbstractArraySubject

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy * __nonnull)failureStrategy
                                                     withId:(id __nullable)subject {
  ComGoogleCommonTruthAbstractArraySubject_initWithComGoogleCommonTruthFailureStrategy_withId_(self, failureStrategy, subject);
  return self;
}

- (void)isEmpty {
  if (![((id<JavaUtilList>) nil_chk([self listRepresentation])) isEmpty]) {
    [self failWithNSString:@"is empty"];
  }
}

- (void)isNotEmpty {
  if ([((id<JavaUtilList>) nil_chk([self listRepresentation])) isEmpty]) {
    [self failWithNSString:@"is not empty"];
  }
}

- (void)hasLengthWithInt:(jint)length {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(length >= 0, @"length (%s) must be >= 0");
  if ([((id<JavaUtilList>) nil_chk([self listRepresentation])) size] != length) {
    [self failWithNSString:@"has length" withId:JavaLangInteger_valueOfWithInt_(length)];
  }
}

- (NSString *)underlyingType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)listRepresentation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)actualCustomStringRepresentation {
  return ([self internalCustomName] == nil) ? JreStrcat("C$$$@", '(', [self underlyingType], [self brackets], @") ", [self listRepresentation]) : @"";
}

- (void)failWithBadTypeWithId:(id __nonnull)expected {
  NSString *expectedBrackets = @"";
  IOSClass *expectedType = [nil_chk(expected) java_getClass];
  while ([((IOSClass *) nil_chk(expectedType)) isArray]) {
    JreStrAppend(&expectedBrackets, "$", @"[]");
    expectedType = [expectedType getComponentType];
  }
  NSString *expectedTypeString = JreStrcat("$$", [expectedType getName], expectedBrackets);
  [self failWithRawMessageWithNSString:@"Incompatible types compared. expected: %s, actual: %s%s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ ComGoogleCommonTruthPlatform_compressTypeWithNSString_(expectedTypeString), [self underlyingType], [self brackets] } count:3 type:NSObject_class_()]];
}

- (NSString *)brackets {
  return @"[]";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, 2 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x400, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthFailureStrategy:withId:);
  methods[1].selector = @selector(isEmpty);
  methods[2].selector = @selector(isNotEmpty);
  methods[3].selector = @selector(hasLengthWithInt:);
  methods[4].selector = @selector(underlyingType);
  methods[5].selector = @selector(listRepresentation);
  methods[6].selector = @selector(actualCustomStringRepresentation);
  methods[7].selector = @selector(failWithBadTypeWithId:);
  methods[8].selector = @selector(brackets);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonTruthFailureStrategy;LNSObject;", "(Lcom/google/common/truth/FailureStrategy;TT;)V", (void *)&ComGoogleCommonTruthAbstractArraySubject__Annotations$0, "hasLength", "I", "()Ljava/util/List<*>;", "failWithBadType", "LNSObject;", "<S:Lcom/google/common/truth/AbstractArraySubject<TS;TT;>;T:Ljava/lang/Object;>Lcom/google/common/truth/Subject<TS;TT;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthAbstractArraySubject = { "AbstractArraySubject", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x401, 9, 0, -1, -1, -1, 8, -1 };
  return &_ComGoogleCommonTruthAbstractArraySubject;
}

@end

void ComGoogleCommonTruthAbstractArraySubject_initWithComGoogleCommonTruthFailureStrategy_withId_(ComGoogleCommonTruthAbstractArraySubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, id subject) {
  ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureStrategy_withId_(self, failureStrategy, subject);
}

IOSObjectArray *ComGoogleCommonTruthAbstractArraySubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthAbstractArraySubject)
