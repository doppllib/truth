//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComGoogleCommonTruthComparableSubject.h"
#include "ComGoogleCommonTruthFailureStrategy.h"
#include "ComGoogleCommonTruthFloatSubject.h"
#include "ComGoogleCommonTruthMathUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Float.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/annotation/Nullable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jint ComGoogleCommonTruthFloatSubject_get_NEG_ZERO_BITS();
static jint ComGoogleCommonTruthFloatSubject_NEG_ZERO_BITS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonTruthFloatSubject, NEG_ZERO_BITS, jint)

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthFloatSubject__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthFloatSubject__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthFloatSubject__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthFloatSubject__Annotations$3();

@interface ComGoogleCommonTruthFloatSubject_TolerantFloatComparison ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComGoogleCommonTruthFloatSubject_TolerantFloatComparison_init(ComGoogleCommonTruthFloatSubject_TolerantFloatComparison *self);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthFloatSubject_TolerantFloatComparison__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthFloatSubject_TolerantFloatComparison__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthFloatSubject_TolerantFloatComparison__Annotations$2();

@interface ComGoogleCommonTruthFloatSubject_1 : ComGoogleCommonTruthFloatSubject_TolerantFloatComparison {
 @public
  ComGoogleCommonTruthFloatSubject *this$0_;
  jfloat val$tolerance_;
}

- (instancetype)initWithComGoogleCommonTruthFloatSubject:(ComGoogleCommonTruthFloatSubject *)outer$
                                               withFloat:(jfloat)capture$0;

- (void)ofWithFloat:(jfloat)expected;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthFloatSubject_1)

__attribute__((unused)) static void ComGoogleCommonTruthFloatSubject_1_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject_1 *self, ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0);

__attribute__((unused)) static ComGoogleCommonTruthFloatSubject_1 *new_ComGoogleCommonTruthFloatSubject_1_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthFloatSubject_1 *create_ComGoogleCommonTruthFloatSubject_1_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0);

@interface ComGoogleCommonTruthFloatSubject_2 : ComGoogleCommonTruthFloatSubject_TolerantFloatComparison {
 @public
  ComGoogleCommonTruthFloatSubject *this$0_;
  jfloat val$tolerance_;
}

- (instancetype)initWithComGoogleCommonTruthFloatSubject:(ComGoogleCommonTruthFloatSubject *)outer$
                                               withFloat:(jfloat)capture$0;

- (void)ofWithFloat:(jfloat)expected;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthFloatSubject_2)

__attribute__((unused)) static void ComGoogleCommonTruthFloatSubject_2_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject_2 *self, ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0);

__attribute__((unused)) static ComGoogleCommonTruthFloatSubject_2 *new_ComGoogleCommonTruthFloatSubject_2_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthFloatSubject_2 *create_ComGoogleCommonTruthFloatSubject_2_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0);

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonTruthFloatSubject)

@implementation ComGoogleCommonTruthFloatSubject

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                                          withJavaLangFloat:(JavaLangFloat *)subject {
  ComGoogleCommonTruthFloatSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangFloat_(self, failureStrategy, subject);
  return self;
}

- (ComGoogleCommonTruthFloatSubject_TolerantFloatComparison *)isWithinWithFloat:(jfloat)tolerance {
  return create_ComGoogleCommonTruthFloatSubject_1_initWithComGoogleCommonTruthFloatSubject_withFloat_(self, tolerance);
}

- (ComGoogleCommonTruthFloatSubject_TolerantFloatComparison *)isNotWithinWithFloat:(jfloat)tolerance {
  return create_ComGoogleCommonTruthFloatSubject_2_initWithComGoogleCommonTruthFloatSubject_withFloat_(self, tolerance);
}

- (void)isEqualToWithJavaLangFloat:(JavaLangFloat *)other {
  [super isEqualToWithId:other];
}

- (void)isNotEqualToWithJavaLangFloat:(JavaLangFloat *)other {
  [super isNotEqualToWithId:other];
}

- (void)isEquivalentAccordingToCompareToWithJavaLangComparable:(JavaLangFloat *)other {
  [super isEquivalentAccordingToCompareToWithJavaLangComparable:other];
}

+ (void)checkToleranceWithFloat:(jfloat)tolerance {
  ComGoogleCommonTruthFloatSubject_checkToleranceWithFloat_(tolerance);
}

- (void)isZero {
  if ([self actual] == nil || [((JavaLangFloat *) nil_chk([self actual])) floatValue] != 0.0f) {
    [self failWithNSString:@"is zero"];
  }
}

- (void)isNonZero {
  if ([self actual] == nil || [((JavaLangFloat *) nil_chk([self actual])) floatValue] == 0.0f) {
    [self failWithNSString:@"is non-zero"];
  }
}

- (void)isPositiveInfinity {
  [self isEqualToWithJavaLangFloat:JavaLangFloat_valueOfWithFloat_(JavaLangFloat_POSITIVE_INFINITY)];
}

- (void)isNegativeInfinity {
  [self isEqualToWithJavaLangFloat:JavaLangFloat_valueOfWithFloat_(JavaLangFloat_NEGATIVE_INFINITY)];
}

- (void)isNaN {
  [self isEqualToWithJavaLangFloat:JavaLangFloat_valueOfWithFloat_(JavaLangFloat_NaN)];
}

- (void)isFinite {
  if ([self actual] == nil || [((JavaLangFloat *) nil_chk([self actual])) isNaN] || [((JavaLangFloat *) nil_chk([self actual])) isInfinite]) {
    [self failWithRawMessageWithNSString:@"%s should have been finite" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString] } count:1 type:NSObject_class_()]];
  }
}

- (void)isNotNaN {
  if ([self actual] == nil || [((JavaLangFloat *) nil_chk([self actual])) isNaN]) {
    [self failWithRawMessageWithNSString:@"%s should not have been NaN" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString] } count:1 type:NSObject_class_()]];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, 1 },
    { NULL, "LComGoogleCommonTruthFloatSubject_TolerantFloatComparison;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonTruthFloatSubject_TolerantFloatComparison;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, -1, -1, 7 },
    { NULL, "V", 0x11, 8, 6, -1, -1, -1, 9 },
    { NULL, "V", 0x11, 10, 6, -1, -1, 11, -1 },
    { NULL, "V", 0x8, 12, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthFailureStrategy:withJavaLangFloat:);
  methods[1].selector = @selector(isWithinWithFloat:);
  methods[2].selector = @selector(isNotWithinWithFloat:);
  methods[3].selector = @selector(isEqualToWithJavaLangFloat:);
  methods[4].selector = @selector(isNotEqualToWithJavaLangFloat:);
  methods[5].selector = @selector(isEquivalentAccordingToCompareToWithJavaLangComparable:);
  methods[6].selector = @selector(checkToleranceWithFloat:);
  methods[7].selector = @selector(isZero);
  methods[8].selector = @selector(isNonZero);
  methods[9].selector = @selector(isPositiveInfinity);
  methods[10].selector = @selector(isNegativeInfinity);
  methods[11].selector = @selector(isNaN);
  methods[12].selector = @selector(isFinite);
  methods[13].selector = @selector(isNotNaN);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NEG_ZERO_BITS", "I", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonTruthFailureStrategy;LJavaLangFloat;", (void *)&ComGoogleCommonTruthFloatSubject__Annotations$0, "isWithin", "F", "isNotWithin", "isEqualTo", "LJavaLangFloat;", (void *)&ComGoogleCommonTruthFloatSubject__Annotations$1, "isNotEqualTo", (void *)&ComGoogleCommonTruthFloatSubject__Annotations$2, "isEquivalentAccordingToCompareTo", (void *)&ComGoogleCommonTruthFloatSubject__Annotations$3, "checkTolerance", &ComGoogleCommonTruthFloatSubject_NEG_ZERO_BITS, "LComGoogleCommonTruthFloatSubject_TolerantFloatComparison;", "Lcom/google/common/truth/ComparableSubject<Lcom/google/common/truth/FloatSubject;Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthFloatSubject = { "FloatSubject", "com.google.common.truth", ptrTable, methods, fields, 7, 0x11, 14, 1, -1, 14, -1, 15, -1 };
  return &_ComGoogleCommonTruthFloatSubject;
}

+ (void)initialize {
  if (self == [ComGoogleCommonTruthFloatSubject class]) {
    ComGoogleCommonTruthFloatSubject_NEG_ZERO_BITS = JavaLangFloat_floatToIntBitsWithFloat_(-0.0f);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonTruthFloatSubject)
  }
}

@end

void ComGoogleCommonTruthFloatSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangFloat_(ComGoogleCommonTruthFloatSubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, JavaLangFloat *subject) {
  ComGoogleCommonTruthComparableSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangComparable_(self, failureStrategy, subject);
}

ComGoogleCommonTruthFloatSubject *new_ComGoogleCommonTruthFloatSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangFloat_(ComGoogleCommonTruthFailureStrategy *failureStrategy, JavaLangFloat *subject) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthFloatSubject, initWithComGoogleCommonTruthFailureStrategy_withJavaLangFloat_, failureStrategy, subject)
}

ComGoogleCommonTruthFloatSubject *create_ComGoogleCommonTruthFloatSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangFloat_(ComGoogleCommonTruthFailureStrategy *failureStrategy, JavaLangFloat *subject) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthFloatSubject, initWithComGoogleCommonTruthFailureStrategy_withJavaLangFloat_, failureStrategy, subject)
}

void ComGoogleCommonTruthFloatSubject_checkToleranceWithFloat_(jfloat tolerance) {
  ComGoogleCommonTruthFloatSubject_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(!JavaLangFloat_isNaNWithFloat_(tolerance), @"tolerance cannot be NaN");
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withNSObjectArray_(tolerance >= 0.0f, @"tolerance (%s) cannot be negative", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(tolerance) } count:1 type:NSObject_class_()]);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withNSObjectArray_(JavaLangFloat_floatToIntBitsWithFloat_(tolerance) != ComGoogleCommonTruthFloatSubject_NEG_ZERO_BITS, @"tolerance (%s) cannot be negative", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(tolerance) } count:1 type:NSObject_class_()]);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(tolerance != JavaLangFloat_POSITIVE_INFINITY, @"tolerance cannot be POSITIVE_INFINITY");
}

IOSObjectArray *ComGoogleCommonTruthFloatSubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthFloatSubject__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthFloatSubject__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthFloatSubject__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthFloatSubject)

@implementation ComGoogleCommonTruthFloatSubject_TolerantFloatComparison

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonTruthFloatSubject_TolerantFloatComparison_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)ofWithFloat:(jfloat)expectedFloat {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isEqual:(id)o {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"If you meant to compare floats, use .of(float) instead.");
}

- (NSUInteger)hash {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Subject.hashCode() is not supported.");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, 4, 5 },
    { NULL, "I", 0x1, 6, -1, -1, -1, 7, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(ofWithFloat:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "of", "F", "equals", "LNSObject;", (void *)&ComGoogleCommonTruthFloatSubject_TolerantFloatComparison__Annotations$0, (void *)&ComGoogleCommonTruthFloatSubject_TolerantFloatComparison__Annotations$1, "hashCode", (void *)&ComGoogleCommonTruthFloatSubject_TolerantFloatComparison__Annotations$2, "LComGoogleCommonTruthFloatSubject;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthFloatSubject_TolerantFloatComparison = { "TolerantFloatComparison", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x409, 4, 0, 8, -1, -1, -1, -1 };
  return &_ComGoogleCommonTruthFloatSubject_TolerantFloatComparison;
}

@end

void ComGoogleCommonTruthFloatSubject_TolerantFloatComparison_init(ComGoogleCommonTruthFloatSubject_TolerantFloatComparison *self) {
  NSObject_init(self);
}

IOSObjectArray *ComGoogleCommonTruthFloatSubject_TolerantFloatComparison__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthFloatSubject_TolerantFloatComparison__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthFloatSubject_TolerantFloatComparison__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthFloatSubject_TolerantFloatComparison)

@implementation ComGoogleCommonTruthFloatSubject_1

- (instancetype)initWithComGoogleCommonTruthFloatSubject:(ComGoogleCommonTruthFloatSubject *)outer$
                                               withFloat:(jfloat)capture$0 {
  ComGoogleCommonTruthFloatSubject_1_initWithComGoogleCommonTruthFloatSubject_withFloat_(self, outer$, capture$0);
  return self;
}

- (void)ofWithFloat:(jfloat)expected {
  JavaLangFloat *actual = [this$0_ actual];
  ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withNSObjectArray_(actual, @"actual value cannot be null. tolerance=%s expected=%s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(val$tolerance_), JavaLangFloat_valueOfWithFloat_(expected) } count:2 type:NSObject_class_()]);
  ComGoogleCommonTruthFloatSubject_checkToleranceWithFloat_(val$tolerance_);
  if (!ComGoogleCommonTruthMathUtil_equalWithinToleranceWithFloat_withFloat_withFloat_([((JavaLangFloat *) nil_chk(actual)) floatValue], expected, val$tolerance_)) {
    [this$0_ failWithRawMessageWithNSString:@"%s and <%s> should have been finite values within <%s> of each other" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], JavaLangFloat_valueOfWithFloat_(expected), JavaLangFloat_valueOfWithFloat_(val$tolerance_) } count:3 type:NSObject_class_()]];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthFloatSubject:withFloat:);
  methods[1].selector = @selector(ofWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonTruthFloatSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$tolerance_", "F", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "of", "F", "LComGoogleCommonTruthFloatSubject;", "isWithinWithFloat:" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthFloatSubject_1 = { "", "com.google.common.truth", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonTruthFloatSubject_1;
}

@end

void ComGoogleCommonTruthFloatSubject_1_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject_1 *self, ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$tolerance_ = capture$0;
  ComGoogleCommonTruthFloatSubject_TolerantFloatComparison_init(self);
}

ComGoogleCommonTruthFloatSubject_1 *new_ComGoogleCommonTruthFloatSubject_1_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthFloatSubject_1, initWithComGoogleCommonTruthFloatSubject_withFloat_, outer$, capture$0)
}

ComGoogleCommonTruthFloatSubject_1 *create_ComGoogleCommonTruthFloatSubject_1_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthFloatSubject_1, initWithComGoogleCommonTruthFloatSubject_withFloat_, outer$, capture$0)
}

@implementation ComGoogleCommonTruthFloatSubject_2

- (instancetype)initWithComGoogleCommonTruthFloatSubject:(ComGoogleCommonTruthFloatSubject *)outer$
                                               withFloat:(jfloat)capture$0 {
  ComGoogleCommonTruthFloatSubject_2_initWithComGoogleCommonTruthFloatSubject_withFloat_(self, outer$, capture$0);
  return self;
}

- (void)ofWithFloat:(jfloat)expected {
  JavaLangFloat *actual = [this$0_ actual];
  ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withNSObjectArray_(actual, @"actual value cannot be null. tolerance=%s expected=%s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(val$tolerance_), JavaLangFloat_valueOfWithFloat_(expected) } count:2 type:NSObject_class_()]);
  ComGoogleCommonTruthFloatSubject_checkToleranceWithFloat_(val$tolerance_);
  if (!ComGoogleCommonTruthMathUtil_notEqualWithinToleranceWithFloat_withFloat_withFloat_([((JavaLangFloat *) nil_chk(actual)) floatValue], expected, val$tolerance_)) {
    [this$0_ failWithRawMessageWithNSString:@"%s and <%s> should have been finite values not within <%s> of each other" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [this$0_ actualAsString], JavaLangFloat_valueOfWithFloat_(expected), JavaLangFloat_valueOfWithFloat_(val$tolerance_) } count:3 type:NSObject_class_()]];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthFloatSubject:withFloat:);
  methods[1].selector = @selector(ofWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonTruthFloatSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$tolerance_", "F", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "of", "F", "LComGoogleCommonTruthFloatSubject;", "isNotWithinWithFloat:" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthFloatSubject_2 = { "", "com.google.common.truth", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonTruthFloatSubject_2;
}

@end

void ComGoogleCommonTruthFloatSubject_2_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject_2 *self, ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$tolerance_ = capture$0;
  ComGoogleCommonTruthFloatSubject_TolerantFloatComparison_init(self);
}

ComGoogleCommonTruthFloatSubject_2 *new_ComGoogleCommonTruthFloatSubject_2_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthFloatSubject_2, initWithComGoogleCommonTruthFloatSubject_withFloat_, outer$, capture$0)
}

ComGoogleCommonTruthFloatSubject_2 *create_ComGoogleCommonTruthFloatSubject_2_initWithComGoogleCommonTruthFloatSubject_withFloat_(ComGoogleCommonTruthFloatSubject *outer$, jfloat capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthFloatSubject_2, initWithComGoogleCommonTruthFloatSubject_withFloat_, outer$, capture$0)
}
