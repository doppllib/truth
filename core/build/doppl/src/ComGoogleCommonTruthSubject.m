//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComGoogleCommonTruthFailureStrategy.h"
#include "ComGoogleCommonTruthPlatform.h"
#include "ComGoogleCommonTruthStringUtil.h"
#include "ComGoogleCommonTruthSubject.h"
#include "ComGoogleCommonTruthSubjectUtils.h"
#include "ComGoogleCommonTruthTestVerb.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Objects.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Predicate.h"
#include "com/google/common/base/Predicates.h"
#include "com/google/common/collect/Iterables.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonTruthSubject () {
 @public
  id actual_;
  NSString *customName_;
}

- (void)doEqualCheckWithId:(id)rawSubject
                    withId:(id)rawOther
               withBoolean:(jboolean)expectEqual;

+ (jboolean)isIntegralBoxedPrimitiveWithId:(id)o;

+ (JavaLangLong *)integralValueWithId:(id)o;

- (void)failComparingToStringsWithNSString:(NSString *)verb
                                    withId:(id)subject
                                    withId:(id)other
                                    withId:(id)displayOther
                               withBoolean:(jboolean)compareToStrings;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthSubject, actual_, id)
J2OBJC_FIELD_SETTER(ComGoogleCommonTruthSubject, customName_, NSString *)

__attribute__((unused)) static void ComGoogleCommonTruthSubject_doEqualCheckWithId_withId_withBoolean_(ComGoogleCommonTruthSubject *self, id rawSubject, id rawOther, jboolean expectEqual);

__attribute__((unused)) static jboolean ComGoogleCommonTruthSubject_isIntegralBoxedPrimitiveWithId_(id o);

__attribute__((unused)) static JavaLangLong *ComGoogleCommonTruthSubject_integralValueWithId_(id o);

__attribute__((unused)) static id ComGoogleCommonTruthSubject_actual(ComGoogleCommonTruthSubject *self);

__attribute__((unused)) static NSString *ComGoogleCommonTruthSubject_actualAsString(ComGoogleCommonTruthSubject *self);

__attribute__((unused)) static void ComGoogleCommonTruthSubject_failWithNSString_(ComGoogleCommonTruthSubject *self, NSString *proposition);

__attribute__((unused)) static void ComGoogleCommonTruthSubject_failWithNSString_withId_(ComGoogleCommonTruthSubject *self, NSString *verb, id other);

__attribute__((unused)) static void ComGoogleCommonTruthSubject_failComparingToStringsWithNSString_withId_withId_withId_withBoolean_(ComGoogleCommonTruthSubject *self, NSString *verb, id subject, id other, id displayOther, jboolean compareToStrings);

__attribute__((unused)) static void ComGoogleCommonTruthSubject_failWithBadResultsWithNSString_withId_withNSString_withId_(ComGoogleCommonTruthSubject *self, NSString *verb, id expected, NSString *failVerb, id actual);

__attribute__((unused)) static void ComGoogleCommonTruthSubject_failWithoutSubjectWithNSString_(ComGoogleCommonTruthSubject *self, NSString *proposition);

__attribute__((unused)) static void ComGoogleCommonTruthSubject_failWithoutActualWithNSString_(ComGoogleCommonTruthSubject *self, NSString *proposition);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$3();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$4();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$5();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$6();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$7();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$8();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$9();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$10();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$11();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$12();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$13();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$14();

@implementation ComGoogleCommonTruthSubject

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                                                     withId:(id)actual {
  ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureStrategy_withId_(self, failureStrategy, actual);
  return self;
}

- (NSString *)internalCustomName {
  return customName_;
}

- (ComGoogleCommonTruthSubject *)namedWithNSString:(NSString *)format
                                 withNSObjectArray:(IOSObjectArray *)args {
  ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(format, @"Name passed to named() cannot be null.");
  JreStrongAssign(&self->customName_, ComGoogleCommonTruthStringUtil_formatWithNSString_withNSObjectArray_(format, args));
  return self;
}

- (void)isNull {
  if (ComGoogleCommonTruthSubject_actual(self) != nil) {
    ComGoogleCommonTruthSubject_failWithNSString_(self, @"is null");
  }
}

- (void)isNotNull {
  if (ComGoogleCommonTruthSubject_actual(self) == nil) {
    ComGoogleCommonTruthSubject_failWithoutActualWithNSString_(self, @"is a non-null reference");
  }
}

- (void)isEqualToWithId:(id)other {
  ComGoogleCommonTruthSubject_doEqualCheckWithId_withId_withBoolean_(self, ComGoogleCommonTruthSubject_actual(self), other, true);
}

- (void)isNotEqualToWithId:(id)other {
  ComGoogleCommonTruthSubject_doEqualCheckWithId_withId_withBoolean_(self, ComGoogleCommonTruthSubject_actual(self), other, false);
}

- (void)doEqualCheckWithId:(id)rawSubject
                    withId:(id)rawOther
               withBoolean:(jboolean)expectEqual {
  ComGoogleCommonTruthSubject_doEqualCheckWithId_withId_withBoolean_(self, rawSubject, rawOther, expectEqual);
}

+ (jboolean)isIntegralBoxedPrimitiveWithId:(id)o {
  return ComGoogleCommonTruthSubject_isIntegralBoxedPrimitiveWithId_(o);
}

+ (JavaLangLong *)integralValueWithId:(id)o {
  return ComGoogleCommonTruthSubject_integralValueWithId_(o);
}

- (void)isSameAsWithId:(id)other {
  if (ComGoogleCommonTruthSubject_actual(self) != other) {
    ComGoogleCommonTruthSubject_failComparingToStringsWithNSString_withId_withId_withId_withBoolean_(self, @"is the same instance as", ComGoogleCommonTruthSubject_actual(self), other, other, true);
  }
}

- (void)isNotSameAsWithId:(id)other {
  if (ComGoogleCommonTruthSubject_actual(self) == other) {
    ComGoogleCommonTruthSubject_failWithNSString_withId_(self, @"is not the same instance as", other);
  }
}

- (void)isInstanceOfWithIOSClass:(IOSClass *)clazz {
  if (clazz == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"clazz");
  }
  if (!ComGoogleCommonTruthPlatform_isInstanceOfTypeWithId_withIOSClass_(ComGoogleCommonTruthSubject_actual(self), clazz)) {
    if (ComGoogleCommonTruthSubject_actual(self) != nil) {
      ComGoogleCommonTruthSubject_failWithBadResultsWithNSString_withId_withNSString_withId_(self, @"is an instance of", [clazz getName], @"is an instance of", [[nil_chk(ComGoogleCommonTruthSubject_actual(self)) java_getClass] getName]);
    }
    else {
      ComGoogleCommonTruthSubject_failWithNSString_withId_(self, @"is an instance of", [clazz getName]);
    }
  }
}

- (void)isNotInstanceOfWithIOSClass:(IOSClass *)clazz {
  if (clazz == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"clazz");
  }
  if (ComGoogleCommonTruthSubject_actual(self) == nil) {
    return;
  }
  if (ComGoogleCommonTruthPlatform_isInstanceOfTypeWithId_withIOSClass_(ComGoogleCommonTruthSubject_actual(self), clazz)) {
    [self failWithRawMessageWithNSString:@"%s expected not to be an instance of %s, but was." withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ ComGoogleCommonTruthSubject_actualAsString(self), [clazz getName] } count:2 type:NSObject_class_()]];
  }
}

- (void)isInWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  if (!ComGoogleCommonCollectIterables_containsWithJavaLangIterable_withId_(iterable, ComGoogleCommonTruthSubject_actual(self))) {
    ComGoogleCommonTruthSubject_failWithNSString_withId_(self, @"is equal to any element in", iterable);
  }
}

- (void)isAnyOfWithId:(id)first
               withId:(id)second
    withNSObjectArray:(IOSObjectArray *)rest {
  id<JavaUtilList> list = ComGoogleCommonTruthSubjectUtils_accumulateWithId_withId_withNSObjectArray_(first, second, rest);
  if (![((id<JavaUtilList>) nil_chk(list)) containsWithId:ComGoogleCommonTruthSubject_actual(self)]) {
    ComGoogleCommonTruthSubject_failWithNSString_withId_(self, @"is equal to any of", list);
  }
}

- (void)isNotInWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  jint index = ComGoogleCommonCollectIterables_indexOfWithJavaLangIterable_withComGoogleCommonBasePredicate_(iterable, ComGoogleCommonBasePredicates_equalToWithId_(ComGoogleCommonTruthSubject_actual(self)));
  if (index != -1) {
    [self failWithRawMessageWithNSString:@"Not true that %s is not in %s. It was found at index %s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ ComGoogleCommonTruthSubject_actualAsString(self), iterable, JavaLangInteger_valueOfWithInt_(index) } count:3 type:NSObject_class_()]];
  }
}

- (void)isNoneOfWithId:(id)first
                withId:(id)second
     withNSObjectArray:(IOSObjectArray *)rest {
  [self isNotInWithJavaLangIterable:ComGoogleCommonTruthSubjectUtils_accumulateWithId_withId_withNSObjectArray_(first, second, rest)];
}

- (id)getSubject {
  return actual_;
}

- (id)actual {
  return ComGoogleCommonTruthSubject_actual(self);
}

- (NSString *)getDisplaySubject {
  NSString *formatted = [self actualCustomStringRepresentation];
  if (customName_ != nil) {
    return JreStrcat("$$", customName_, ([((NSString *) nil_chk(formatted)) java_isEmpty] ? @"" : JreStrcat("$$$", @" (<", formatted, @">)")));
  }
  else {
    return JreStrcat("C$C", '<', formatted, '>');
  }
}

- (NSString *)actualAsString {
  return ComGoogleCommonTruthSubject_actualAsString(self);
}

- (NSString *)actualCustomStringRepresentation {
  return NSString_java_valueOf_(ComGoogleCommonTruthSubject_actual(self));
}

- (ComGoogleCommonTruthTestVerb *)check {
  return create_ComGoogleCommonTruthTestVerb_initWithComGoogleCommonTruthFailureStrategy_(failureStrategy_);
}

- (void)failWithNSString:(NSString *)proposition {
  ComGoogleCommonTruthSubject_failWithNSString_(self, proposition);
}

- (void)failWithNSString:(NSString *)verb
                  withId:(id)other {
  ComGoogleCommonTruthSubject_failWithNSString_withId_(self, verb, other);
}

- (void)failComparingToStringsWithNSString:(NSString *)verb
                                    withId:(id)subject
                                    withId:(id)other
                                    withId:(id)displayOther
                               withBoolean:(jboolean)compareToStrings {
  ComGoogleCommonTruthSubject_failComparingToStringsWithNSString_withId_withId_withId_withBoolean_(self, verb, subject, other, displayOther, compareToStrings);
}

- (void)failWithNSString:(NSString *)verb
       withNSObjectArray:(IOSObjectArray *)messageParts {
  if (((IOSObjectArray *) nil_chk(messageParts))->size_ == 0) {
    ComGoogleCommonTruthSubject_failWithNSString_(self, verb);
  }
  else if (messageParts->size_ == 1) {
    ComGoogleCommonTruthSubject_failWithNSString_withId_(self, verb, IOSObjectArray_Get(messageParts, 0));
  }
  else {
    JavaLangStringBuilder *message = create_JavaLangStringBuilder_initWithNSString_(@"Not true that ");
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([message appendWithNSString:ComGoogleCommonTruthSubject_actualAsString(self)])) appendWithNSString:@" "])) appendWithNSString:verb];
    {
      IOSObjectArray *a__ = messageParts;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id part = *b__++;
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([message appendWithNSString:@" <"])) appendWithId:part])) appendWithNSString:@">"];
      }
    }
    [((ComGoogleCommonTruthFailureStrategy *) nil_chk(failureStrategy_)) failWithNSString:[message description]];
  }
}

- (void)failWithBadResultsWithNSString:(NSString *)verb
                                withId:(id)expected
                          withNSString:(NSString *)failVerb
                                withId:(id)actual {
  ComGoogleCommonTruthSubject_failWithBadResultsWithNSString_withId_withNSString_withId_(self, verb, expected, failVerb, actual);
}

- (void)failWithCustomSubjectWithNSString:(NSString *)verb
                                   withId:(id)expected
                                   withId:(id)actual {
  NSString *message = ComGoogleCommonTruthStringUtil_formatWithNSString_withNSObjectArray_(@"Not true that <%s> %s <%s>", [IOSObjectArray arrayWithObjects:(id[]){ (actual == nil) ? @"null reference" : actual, verb, expected } count:3 type:NSObject_class_()]);
  [((ComGoogleCommonTruthFailureStrategy *) nil_chk(failureStrategy_)) failWithNSString:message];
}

- (void)failWithoutSubjectWithNSString:(NSString *)proposition {
  ComGoogleCommonTruthSubject_failWithoutSubjectWithNSString_(self, proposition);
}

- (void)failWithoutActualWithNSString:(NSString *)proposition {
  ComGoogleCommonTruthSubject_failWithoutActualWithNSString_(self, proposition);
}

- (void)failWithRawMessageWithNSString:(NSString *)message
                     withNSObjectArray:(IOSObjectArray *)parameters {
  [((ComGoogleCommonTruthFailureStrategy *) nil_chk(failureStrategy_)) failWithNSString:ComGoogleCommonTruthStringUtil_formatWithNSString_withNSObjectArray_(message, parameters)];
}

- (jboolean)isEqual:(id)o {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"If you meant to test object equality, use .isEqualTo(other) instead.");
}

- (NSUInteger)hash {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Subject.hashCode() is not supported.");
}

- (void)dealloc {
  RELEASE_(failureStrategy_);
  RELEASE_(actual_);
  RELEASE_(customName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, 2 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonTruthSubject;", 0x81, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, 8 },
    { NULL, "V", 0x1, 9, 7, -1, -1, -1, 10 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, 13 },
    { NULL, "Z", 0xa, 14, 7, -1, -1, -1, 15 },
    { NULL, "LJavaLangLong;", 0xa, 16, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 7, -1, -1, -1, 18 },
    { NULL, "V", 0x1, 19, 7, -1, -1, -1, 20 },
    { NULL, "V", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, 24, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x81, 28, 29, -1, -1, -1, 30 },
    { NULL, "V", 0x1, 31, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x81, 32, 29, -1, -1, -1, 33 },
    { NULL, "LNSObject;", 0x4, -1, -1, -1, 34, 35, -1 },
    { NULL, "LNSObject;", 0x14, -1, -1, -1, 34, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, 36, -1 },
    { NULL, "LNSString;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonTruthTestVerb;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 37, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x94, 37, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 46, 38, -1, -1, 47, -1 },
    { NULL, "V", 0x14, 48, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x84, 49, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 50, 7, -1, -1, 51, 52 },
    { NULL, "I", 0x11, 53, -1, -1, -1, 54, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthFailureStrategy:withId:);
  methods[1].selector = @selector(internalCustomName);
  methods[2].selector = @selector(namedWithNSString:withNSObjectArray:);
  methods[3].selector = @selector(isNull);
  methods[4].selector = @selector(isNotNull);
  methods[5].selector = @selector(isEqualToWithId:);
  methods[6].selector = @selector(isNotEqualToWithId:);
  methods[7].selector = @selector(doEqualCheckWithId:withId:withBoolean:);
  methods[8].selector = @selector(isIntegralBoxedPrimitiveWithId:);
  methods[9].selector = @selector(integralValueWithId:);
  methods[10].selector = @selector(isSameAsWithId:);
  methods[11].selector = @selector(isNotSameAsWithId:);
  methods[12].selector = @selector(isInstanceOfWithIOSClass:);
  methods[13].selector = @selector(isNotInstanceOfWithIOSClass:);
  methods[14].selector = @selector(isInWithJavaLangIterable:);
  methods[15].selector = @selector(isAnyOfWithId:withId:withNSObjectArray:);
  methods[16].selector = @selector(isNotInWithJavaLangIterable:);
  methods[17].selector = @selector(isNoneOfWithId:withId:withNSObjectArray:);
  methods[18].selector = @selector(getSubject);
  methods[19].selector = @selector(actual);
  methods[20].selector = @selector(getDisplaySubject);
  methods[21].selector = @selector(actualAsString);
  methods[22].selector = @selector(actualCustomStringRepresentation);
  methods[23].selector = @selector(check);
  methods[24].selector = @selector(failWithNSString:);
  methods[25].selector = @selector(failWithNSString:withId:);
  methods[26].selector = @selector(failComparingToStringsWithNSString:withId:withId:withId:withBoolean:);
  methods[27].selector = @selector(failWithNSString:withNSObjectArray:);
  methods[28].selector = @selector(failWithBadResultsWithNSString:withId:withNSString:withId:);
  methods[29].selector = @selector(failWithCustomSubjectWithNSString:withId:withId:);
  methods[30].selector = @selector(failWithoutSubjectWithNSString:);
  methods[31].selector = @selector(failWithoutActualWithNSString:);
  methods[32].selector = @selector(failWithRawMessageWithNSString:withNSObjectArray:);
  methods[33].selector = @selector(isEqual:);
  methods[34].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "failureStrategy_", "LComGoogleCommonTruthFailureStrategy;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "actual_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 55, -1 },
    { "customName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonTruthFailureStrategy;LNSObject;", "(Lcom/google/common/truth/FailureStrategy;TT;)V", (void *)&ComGoogleCommonTruthSubject__Annotations$0, "named", "LNSString;[LNSObject;", "(Ljava/lang/String;[Ljava/lang/Object;)TS;", "isEqualTo", "LNSObject;", (void *)&ComGoogleCommonTruthSubject__Annotations$1, "isNotEqualTo", (void *)&ComGoogleCommonTruthSubject__Annotations$2, "doEqualCheck", "LNSObject;LNSObject;Z", (void *)&ComGoogleCommonTruthSubject__Annotations$3, "isIntegralBoxedPrimitive", (void *)&ComGoogleCommonTruthSubject__Annotations$4, "integralValue", "isSameAs", (void *)&ComGoogleCommonTruthSubject__Annotations$5, "isNotSameAs", (void *)&ComGoogleCommonTruthSubject__Annotations$6, "isInstanceOf", "LIOSClass;", "(Ljava/lang/Class<*>;)V", "isNotInstanceOf", "isIn", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)V", "isAnyOf", "LNSObject;LNSObject;[LNSObject;", (void *)&ComGoogleCommonTruthSubject__Annotations$7, "isNotIn", "isNoneOf", (void *)&ComGoogleCommonTruthSubject__Annotations$8, "()TT;", (void *)&ComGoogleCommonTruthSubject__Annotations$9, (void *)&ComGoogleCommonTruthSubject__Annotations$10, "fail", "LNSString;", "LNSString;LNSObject;", "failComparingToStrings", "LNSString;LNSObject;LNSObject;LNSObject;Z", "failWithBadResults", "LNSString;LNSObject;LNSString;LNSObject;", "failWithCustomSubject", "LNSString;LNSObject;LNSObject;", "failWithoutSubject", (void *)&ComGoogleCommonTruthSubject__Annotations$11, "failWithoutActual", "failWithRawMessage", "equals", (void *)&ComGoogleCommonTruthSubject__Annotations$12, (void *)&ComGoogleCommonTruthSubject__Annotations$13, "hashCode", (void *)&ComGoogleCommonTruthSubject__Annotations$14, "TT;", "<S:Lcom/google/common/truth/Subject<TS;TT;>;T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthSubject = { "Subject", "com.google.common.truth", ptrTable, methods, fields, 7, 0x1, 35, 3, -1, -1, -1, 56, -1 };
  return &_ComGoogleCommonTruthSubject;
}

@end

void ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureStrategy_withId_(ComGoogleCommonTruthSubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, id actual) {
  NSObject_init(self);
  JreStrongAssign(&self->customName_, nil);
  JreStrongAssign(&self->failureStrategy_, ComGoogleCommonBasePreconditions_checkNotNullWithId_(failureStrategy));
  JreStrongAssign(&self->actual_, actual);
}

ComGoogleCommonTruthSubject *new_ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureStrategy_withId_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id actual) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthSubject, initWithComGoogleCommonTruthFailureStrategy_withId_, failureStrategy, actual)
}

ComGoogleCommonTruthSubject *create_ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureStrategy_withId_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id actual) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthSubject, initWithComGoogleCommonTruthFailureStrategy_withId_, failureStrategy, actual)
}

void ComGoogleCommonTruthSubject_doEqualCheckWithId_withId_withBoolean_(ComGoogleCommonTruthSubject *self, id rawSubject, id rawOther, jboolean expectEqual) {
  id subject;
  id other;
  if (ComGoogleCommonTruthSubject_isIntegralBoxedPrimitiveWithId_(rawSubject) && ComGoogleCommonTruthSubject_isIntegralBoxedPrimitiveWithId_(rawOther)) {
    subject = ComGoogleCommonTruthSubject_integralValueWithId_(rawSubject);
    other = ComGoogleCommonTruthSubject_integralValueWithId_(rawOther);
  }
  else {
    subject = rawSubject;
    other = rawOther;
  }
  if (ComGoogleCommonBaseObjects_equalWithId_withId_(subject, other) != expectEqual) {
    ComGoogleCommonTruthSubject_failComparingToStringsWithNSString_withId_withId_withId_withBoolean_(self, expectEqual ? @"is equal to" : @"is not equal to", subject, other, rawOther, expectEqual);
  }
}

jboolean ComGoogleCommonTruthSubject_isIntegralBoxedPrimitiveWithId_(id o) {
  ComGoogleCommonTruthSubject_initialize();
  return [o isKindOfClass:[JavaLangByte class]] || [o isKindOfClass:[JavaLangShort class]] || [o isKindOfClass:[JavaLangCharacter class]] || [o isKindOfClass:[JavaLangInteger class]] || [o isKindOfClass:[JavaLangLong class]];
}

JavaLangLong *ComGoogleCommonTruthSubject_integralValueWithId_(id o) {
  ComGoogleCommonTruthSubject_initialize();
  if ([o isKindOfClass:[JavaLangCharacter class]]) {
    return JavaLangLong_valueOfWithLong_((jlong) [((JavaLangCharacter *) nil_chk(((JavaLangCharacter *) cast_chk(o, [JavaLangCharacter class])))) charValue]);
  }
  else if ([o isKindOfClass:[NSNumber class]]) {
    return JavaLangLong_valueOfWithLong_([((NSNumber *) nil_chk(((NSNumber *) cast_chk(o, [NSNumber class])))) longLongValue]);
  }
  else {
    @throw create_JavaLangAssertionError_initWithId_(JreStrcat("@$", o, @" must be either a Character or a Number."));
  }
}

id ComGoogleCommonTruthSubject_actual(ComGoogleCommonTruthSubject *self) {
  return [self getSubject];
}

NSString *ComGoogleCommonTruthSubject_actualAsString(ComGoogleCommonTruthSubject *self) {
  return [self getDisplaySubject];
}

void ComGoogleCommonTruthSubject_failWithNSString_(ComGoogleCommonTruthSubject *self, NSString *proposition) {
  [((ComGoogleCommonTruthFailureStrategy *) nil_chk(self->failureStrategy_)) failWithNSString:JreStrcat("$$C$", @"Not true that ", ComGoogleCommonTruthSubject_actualAsString(self), ' ', proposition)];
}

void ComGoogleCommonTruthSubject_failWithNSString_withId_(ComGoogleCommonTruthSubject *self, NSString *verb, id other) {
  ComGoogleCommonTruthSubject_failComparingToStringsWithNSString_withId_withId_withId_withBoolean_(self, verb, ComGoogleCommonTruthSubject_actual(self), other, other, false);
}

void ComGoogleCommonTruthSubject_failComparingToStringsWithNSString_withId_withId_withId_withBoolean_(ComGoogleCommonTruthSubject *self, NSString *verb, id subject, id other, id displayOther, jboolean compareToStrings) {
  JavaLangStringBuilder *message = [((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(@"Not true that ") appendWithNSString:ComGoogleCommonTruthSubject_actualAsString(self)])) appendWithNSString:@" "];
  jboolean neitherNull = (other != nil) && (subject != nil);
  jboolean sameToStrings = neitherNull && [((NSString *) nil_chk([nil_chk(subject) description])) isEqual:[nil_chk(other) description]];
  jboolean needsClassDisambiguation = neitherNull && sameToStrings && ![[nil_chk(subject) java_getClass] isEqual:[nil_chk(other) java_getClass]];
  if (needsClassDisambiguation) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(message)) appendWithNSString:@"("])) appendWithNSString:[[nil_chk(subject) java_getClass] getName]])) appendWithNSString:@") "];
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(message)) appendWithNSString:verb])) appendWithNSString:@" <"])) appendWithId:displayOther])) appendWithNSString:@">"];
  if (needsClassDisambiguation) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([message appendWithNSString:@" ("])) appendWithNSString:[[nil_chk(other) java_getClass] getName]])) appendWithNSString:@")"];
  }
  if (!needsClassDisambiguation && sameToStrings && compareToStrings) {
    [message appendWithNSString:@" (although their toString() representations are the same)"];
  }
  [((ComGoogleCommonTruthFailureStrategy *) nil_chk(self->failureStrategy_)) failWithNSString:[message description]];
}

void ComGoogleCommonTruthSubject_failWithBadResultsWithNSString_withId_withNSString_withId_(ComGoogleCommonTruthSubject *self, NSString *verb, id expected, NSString *failVerb, id actual) {
  NSString *message = ComGoogleCommonTruthStringUtil_formatWithNSString_withNSObjectArray_(@"Not true that %s %s <%s>. It %s <%s>", [IOSObjectArray arrayWithObjects:(id[]){ ComGoogleCommonTruthSubject_actualAsString(self), verb, expected, failVerb, (actual == nil) ? @"null reference" : actual } count:5 type:NSObject_class_()]);
  [((ComGoogleCommonTruthFailureStrategy *) nil_chk(self->failureStrategy_)) failWithNSString:message];
}

void ComGoogleCommonTruthSubject_failWithoutSubjectWithNSString_(ComGoogleCommonTruthSubject *self, NSString *proposition) {
  NSString *strSubject = self->customName_ == nil ? @"the subject" : JreStrcat("C$C", '"', self->customName_, '"');
  [((ComGoogleCommonTruthFailureStrategy *) nil_chk(self->failureStrategy_)) failWithNSString:ComGoogleCommonTruthStringUtil_formatWithNSString_withNSObjectArray_(@"Not true that %s %s", [IOSObjectArray arrayWithObjects:(id[]){ strSubject, proposition } count:2 type:NSObject_class_()])];
}

void ComGoogleCommonTruthSubject_failWithoutActualWithNSString_(ComGoogleCommonTruthSubject *self, NSString *proposition) {
  ComGoogleCommonTruthSubject_failWithoutSubjectWithNSString_(self, proposition);
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSubject__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthSubject)
