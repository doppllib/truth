//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComGoogleCommonTruthFailureStrategy.h"
#include "ComGoogleCommonTruthMapSubject.h"
#include "ComGoogleCommonTruthSortedMapSubject.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Objects.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/ForwardingSortedMap.h"
#include "com/google/common/collect/Iterables.h"
#include "com/google/common/collect/Maps.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/Map.h"
#include "java/util/NavigableMap.h"
#include "java/util/NavigableSet.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "javax/annotation/Nullable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleCommonTruthSortedMapSubject () {
 @public
  id<JavaUtilNavigableMap> actualAsNavigableMap_;
}

- (id<JavaUtilNavigableMap>)actualAsNavigableMap;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthSortedMapSubject, actualAsNavigableMap_, id<JavaUtilNavigableMap>)

__attribute__((unused)) static id<JavaUtilNavigableMap> ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(ComGoogleCommonTruthSortedMapSubject *self);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSortedMapSubject__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSortedMapSubject__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSortedMapSubject__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthSortedMapSubject__Annotations$3();

@interface ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap : ComGoogleCommonCollectForwardingSortedMap < JavaUtilNavigableMap > {
 @public
  id<JavaUtilSortedMap> delegate_;
}

+ (id<JavaUtilNavigableMap>)wrapIfNecessaryWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

- (instancetype)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)delegate;

- (id<JavaUtilSortedMap>)delegate;

- (id<JavaUtilMap_Entry>)ceilingEntryWithId:(id)key;

- (id)ceilingKeyWithId:(id)key;

- (id<JavaUtilNavigableSet>)descendingKeySet;

- (id<JavaUtilNavigableMap>)descendingMap;

- (id<JavaUtilMap_Entry>)firstEntry;

- (id<JavaUtilMap_Entry>)floorEntryWithId:(id)key;

- (id)floorKeyWithId:(id)key;

- (id<JavaUtilNavigableMap>)headMapWithId:(id)toKey
                              withBoolean:(jboolean)inclusive;

- (id<JavaUtilMap_Entry>)higherEntryWithId:(id)key;

- (id)higherKeyWithId:(id)key;

- (id<JavaUtilMap_Entry>)lastEntry;

- (id<JavaUtilMap_Entry>)lowerEntryWithId:(id)key;

- (id)lowerKeyWithId:(id)key;

- (id<JavaUtilNavigableSet>)navigableKeySet;

- (id<JavaUtilMap_Entry>)pollFirstEntry;

- (id<JavaUtilMap_Entry>)pollLastEntry;

- (id<JavaUtilNavigableMap>)subMapWithId:(id)fromKey
                             withBoolean:(jboolean)fromInclusive
                                  withId:(id)toKey
                             withBoolean:(jboolean)toInclusive;

- (id<JavaUtilNavigableMap>)tailMapWithId:(id)fromKey
                              withBoolean:(jboolean)inclusive;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap)

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap, delegate_, id<JavaUtilSortedMap>)

__attribute__((unused)) static id<JavaUtilNavigableMap> ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_wrapIfNecessaryWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

__attribute__((unused)) static void ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_initWithJavaUtilSortedMap_(ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap *self, id<JavaUtilSortedMap> delegate);

__attribute__((unused)) static ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap *new_ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_initWithJavaUtilSortedMap_(id<JavaUtilSortedMap> delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap *create_ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_initWithJavaUtilSortedMap_(id<JavaUtilSortedMap> delegate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap)

@implementation ComGoogleCommonTruthSortedMapSubject

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                                      withJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  ComGoogleCommonTruthSortedMapSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaUtilSortedMap_(self, failureStrategy, map);
  return self;
}

- (ComGoogleCommonTruthSortedMapSubject *)namedWithNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args {
  [super namedWithNSString:format withNSObjectArray:args];
  return self;
}

- (void)hasFirstKeyWithId:(id)key {
  if ([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) isEmpty]) {
    [self failWithNSString:@"has first key" withId:key];
  }
  if (!ComGoogleCommonBaseObjects_equalWithId_withId_([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) firstKey], key)) {
    if ([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) containsKeyWithId:key]) {
      [self failWithRawMessageWithNSString:@"Not true that %s has first key <%s>. It does contain this key, but the first key is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], key, [((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) firstKey] } count:3 type:NSObject_class_()]];
    }
    [self failWithRawMessageWithNSString:@"Not true that %s has first key <%s>. It does not contain this key, and the first key is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], key, [((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) firstKey] } count:3 type:NSObject_class_()]];
  }
}

- (void)hasFirstEntryWithId:(id)key
                     withId:(id)value {
  id<JavaUtilMap_Entry> expectedEntry = ComGoogleCommonCollectMaps_immutableEntryWithId_withId_(key, value);
  if ([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) isEmpty]) {
    [self failWithNSString:@"has first entry" withId:expectedEntry];
  }
  id<JavaUtilMap_Entry> actualFirstEntry = [((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) firstEntry];
  if (!ComGoogleCommonBaseObjects_equalWithId_withId_(actualFirstEntry, expectedEntry)) {
    id actualFirstKey = [((id<JavaUtilMap_Entry>) nil_chk(actualFirstEntry)) getKey];
    if ([((id<JavaUtilSet>) nil_chk([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) entrySet])) containsWithId:expectedEntry]) {
      [self failWithRawMessageWithNSString:@"Not true that %s has first entry <%s>. It does contain this entry, but the first entry is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, actualFirstEntry } count:3 type:NSObject_class_()]];
    }
    if (ComGoogleCommonBaseObjects_equalWithId_withId_(actualFirstKey, key)) {
      [self failWithRawMessageWithNSString:@"Not true that %s has first entry <%s>, the first value is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, [actualFirstEntry getValue] } count:3 type:NSObject_class_()]];
    }
    if (ComGoogleCommonBaseObjects_equalWithId_withId_([actualFirstEntry getValue], value)) {
      [self failWithRawMessageWithNSString:@"Not true that %s has first entry <%s>, the first key is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, actualFirstKey } count:3 type:NSObject_class_()]];
    }
    if ([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) containsKeyWithId:key]) {
      [self failWithRawMessageWithNSString:@"Not true that %s has first entry <%s>. It does contain this key, but the key is mapped to <%s>, and the first entry is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, [((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) getWithId:key], actualFirstEntry } count:4 type:NSObject_class_()]];
    }
    if ([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) containsValueWithId:value]) {
      id<JavaUtilSet> keys = create_JavaUtilLinkedHashSet_init();
      for (id<JavaUtilMap_Entry> __strong actualEntry in nil_chk([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) entrySet])) {
        if (ComGoogleCommonBaseObjects_equalWithId_withId_([((id<JavaUtilMap_Entry>) nil_chk(actualEntry)) getValue], value)) {
          [keys addWithId:[actualEntry getKey]];
        }
      }
      [self failWithRawMessageWithNSString:@"Not true that %s has first entry <%s>. It does contain this value, but the value is mapped from the keys <%s>, and the first entry is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, keys, actualFirstEntry } count:4 type:NSObject_class_()]];
    }
    [self failWithRawMessageWithNSString:@"Not true that %s has first entry <%s>. It does not contain this entry, and the first entry is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, actualFirstEntry } count:3 type:NSObject_class_()]];
  }
}

- (void)hasLastKeyWithId:(id)key {
  if ([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) isEmpty]) {
    [self failWithNSString:@"has last key" withId:key];
  }
  if (!ComGoogleCommonBaseObjects_equalWithId_withId_([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) lastKey], key)) {
    if ([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) containsKeyWithId:key]) {
      [self failWithRawMessageWithNSString:@"Not true that %s has last key <%s>. It does contain this key, but the last key is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], key, [((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) lastKey] } count:3 type:NSObject_class_()]];
    }
    [self failWithRawMessageWithNSString:@"Not true that %s has last key <%s>. It does not contain this key, and the last key is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], key, [((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) lastKey] } count:3 type:NSObject_class_()]];
  }
}

- (void)hasLastEntryWithId:(id)key
                    withId:(id)value {
  id<JavaUtilMap_Entry> expectedEntry = ComGoogleCommonCollectMaps_immutableEntryWithId_withId_(key, value);
  if ([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) isEmpty]) {
    [self failWithNSString:@"has last entry" withId:expectedEntry];
  }
  id<JavaUtilMap_Entry> actualLastEntry = [((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) lastEntry];
  if (!ComGoogleCommonBaseObjects_equalWithId_withId_(actualLastEntry, expectedEntry)) {
    id actualLastKey = [((id<JavaUtilMap_Entry>) nil_chk(actualLastEntry)) getKey];
    if ([((id<JavaUtilSet>) nil_chk([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) entrySet])) containsWithId:expectedEntry]) {
      [self failWithRawMessageWithNSString:@"Not true that %s has last entry <%s>. It does contain this entry, but the last entry is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, actualLastEntry } count:3 type:NSObject_class_()]];
    }
    if (ComGoogleCommonBaseObjects_equalWithId_withId_(actualLastKey, key)) {
      [self failWithRawMessageWithNSString:@"Not true that %s has last entry <%s>, the last value is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, [actualLastEntry getValue] } count:3 type:NSObject_class_()]];
    }
    if (ComGoogleCommonBaseObjects_equalWithId_withId_([actualLastEntry getValue], value)) {
      [self failWithRawMessageWithNSString:@"Not true that %s has last entry <%s>, the last key is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, actualLastKey } count:3 type:NSObject_class_()]];
    }
    if ([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) containsKeyWithId:key]) {
      [self failWithRawMessageWithNSString:@"Not true that %s has last entry <%s>. It does contain this key, but the key is mapped to <%s>, and the last entry is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, [((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) getWithId:key], actualLastEntry } count:4 type:NSObject_class_()]];
    }
    if ([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) containsValueWithId:value]) {
      id<JavaUtilSet> keys = create_JavaUtilLinkedHashSet_init();
      for (id<JavaUtilMap_Entry> __strong actualEntry in nil_chk([((id<JavaUtilNavigableMap>) nil_chk(ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self))) entrySet])) {
        if (ComGoogleCommonBaseObjects_equalWithId_withId_([((id<JavaUtilMap_Entry>) nil_chk(actualEntry)) getValue], value)) {
          [keys addWithId:[actualEntry getKey]];
        }
      }
      [self failWithRawMessageWithNSString:@"Not true that %s has last entry <%s>. It does contain this value, but the value is mapped from the keys <%s>, and the last entry is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, keys, actualLastEntry } count:4 type:NSObject_class_()]];
    }
    [self failWithRawMessageWithNSString:@"Not true that %s has last entry <%s>. It does not contain this entry, and the last entry is <%s>" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self actualAsString], expectedEntry, actualLastEntry } count:3 type:NSObject_class_()]];
  }
}

- (id<JavaUtilNavigableMap>)actualAsNavigableMap {
  return ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(self);
}

- (void)dealloc {
  RELEASE_(actualAsNavigableMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LComGoogleCommonTruthSortedMapSubject;", 0x81, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, 6 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, 9 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, 11 },
    { NULL, "V", 0x1, 12, 8, -1, -1, -1, 13 },
    { NULL, "LJavaUtilNavigableMap;", 0x2, -1, -1, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthFailureStrategy:withJavaUtilSortedMap:);
  methods[1].selector = @selector(namedWithNSString:withNSObjectArray:);
  methods[2].selector = @selector(hasFirstKeyWithId:);
  methods[3].selector = @selector(hasFirstEntryWithId:withId:);
  methods[4].selector = @selector(hasLastKeyWithId:);
  methods[5].selector = @selector(hasLastEntryWithId:withId:);
  methods[6].selector = @selector(actualAsNavigableMap);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actualAsNavigableMap_", "LJavaUtilNavigableMap;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonTruthFailureStrategy;LJavaUtilSortedMap;", "(Lcom/google/common/truth/FailureStrategy;Ljava/util/SortedMap<**>;)V", "named", "LNSString;[LNSObject;", "hasFirstKey", "LNSObject;", (void *)&ComGoogleCommonTruthSortedMapSubject__Annotations$0, "hasFirstEntry", "LNSObject;LNSObject;", (void *)&ComGoogleCommonTruthSortedMapSubject__Annotations$1, "hasLastKey", (void *)&ComGoogleCommonTruthSortedMapSubject__Annotations$2, "hasLastEntry", (void *)&ComGoogleCommonTruthSortedMapSubject__Annotations$3, "()Ljava/util/NavigableMap<**>;", "Ljava/util/NavigableMap<**>;", "LComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthSortedMapSubject = { "SortedMapSubject", "com.google.common.truth", ptrTable, methods, fields, 7, 0x11, 7, 1, -1, 16, -1, -1, -1 };
  return &_ComGoogleCommonTruthSortedMapSubject;
}

@end

void ComGoogleCommonTruthSortedMapSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaUtilSortedMap_(ComGoogleCommonTruthSortedMapSubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, id<JavaUtilSortedMap> map) {
  ComGoogleCommonTruthMapSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaUtilMap_(self, failureStrategy, map);
  JreStrongAssign(&self->actualAsNavigableMap_, map == nil ? nil : ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_wrapIfNecessaryWithJavaUtilSortedMap_(map));
}

ComGoogleCommonTruthSortedMapSubject *new_ComGoogleCommonTruthSortedMapSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaUtilSortedMap_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<JavaUtilSortedMap> map) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthSortedMapSubject, initWithComGoogleCommonTruthFailureStrategy_withJavaUtilSortedMap_, failureStrategy, map)
}

ComGoogleCommonTruthSortedMapSubject *create_ComGoogleCommonTruthSortedMapSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaUtilSortedMap_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<JavaUtilSortedMap> map) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthSortedMapSubject, initWithComGoogleCommonTruthFailureStrategy_withJavaUtilSortedMap_, failureStrategy, map)
}

id<JavaUtilNavigableMap> ComGoogleCommonTruthSortedMapSubject_actualAsNavigableMap(ComGoogleCommonTruthSortedMapSubject *self) {
  return self->actualAsNavigableMap_;
}

IOSObjectArray *ComGoogleCommonTruthSortedMapSubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSortedMapSubject__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSortedMapSubject__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthSortedMapSubject__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthSortedMapSubject)

@implementation ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap

+ (id<JavaUtilNavigableMap>)wrapIfNecessaryWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  return ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_wrapIfNecessaryWithJavaUtilSortedMap_(map);
}

- (instancetype)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)delegate {
  ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_initWithJavaUtilSortedMap_(self, delegate);
  return self;
}

- (id<JavaUtilSortedMap>)delegate {
  return delegate_;
}

- (id<JavaUtilMap_Entry>)ceilingEntryWithId:(id)key {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id)ceilingKeyWithId:(id)key {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilNavigableSet>)descendingKeySet {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilNavigableMap>)descendingMap {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilMap_Entry>)firstEntry {
  id<JavaUtilIterator> entryIterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilSortedMap>) nil_chk([self delegate])) entrySet])) iterator];
  return [((id<JavaUtilIterator>) nil_chk(entryIterator)) hasNext] ? [entryIterator next] : nil;
}

- (id<JavaUtilMap_Entry>)floorEntryWithId:(id)key {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id)floorKeyWithId:(id)key {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilNavigableMap>)headMapWithId:(id)toKey
                              withBoolean:(jboolean)inclusive {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilMap_Entry>)higherEntryWithId:(id)key {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id)higherKeyWithId:(id)key {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilMap_Entry>)lastEntry {
  @try {
    id lastKey = [((id<JavaUtilSortedMap>) nil_chk([self delegate])) lastKey];
    return ComGoogleCommonCollectIterables_getOnlyElementWithJavaLangIterable_([((id<JavaUtilSortedMap>) nil_chk([((id<JavaUtilSortedMap>) nil_chk([self delegate])) tailMapWithId:lastKey])) entrySet]);
  }
  @catch (JavaUtilNoSuchElementException *e) {
    return nil;
  }
}

- (id<JavaUtilMap_Entry>)lowerEntryWithId:(id)key {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id)lowerKeyWithId:(id)key {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilNavigableSet>)navigableKeySet {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilMap_Entry>)pollFirstEntry {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilMap_Entry>)pollLastEntry {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilNavigableMap>)subMapWithId:(id)fromKey
                             withBoolean:(jboolean)fromInclusive
                                  withId:(id)toKey
                             withBoolean:(jboolean)toInclusive {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilNavigableMap>)tailMapWithId:(id)fromKey
                              withBoolean:(jboolean)inclusive {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)dealloc {
  RELEASE_(delegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilNavigableMap;", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilSortedMap;", 0x4, -1, -1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 6, -1, 9, -1, -1 },
    { NULL, "LJavaUtilNavigableSet;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LJavaUtilNavigableMap;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, 13, 6, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, 6, -1, 9, -1, -1 },
    { NULL, "LJavaUtilNavigableMap;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, 18, 6, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 6, -1, 9, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, 20, 6, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 6, -1, 9, -1, -1 },
    { NULL, "LJavaUtilNavigableSet;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LJavaUtilNavigableMap;", 0x1, 22, 23, -1, 24, -1, -1 },
    { NULL, "LJavaUtilNavigableMap;", 0x1, 25, 16, -1, 17, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(wrapIfNecessaryWithJavaUtilSortedMap:);
  methods[1].selector = @selector(initWithJavaUtilSortedMap:);
  methods[2].selector = @selector(delegate);
  methods[3].selector = @selector(ceilingEntryWithId:);
  methods[4].selector = @selector(ceilingKeyWithId:);
  methods[5].selector = @selector(descendingKeySet);
  methods[6].selector = @selector(descendingMap);
  methods[7].selector = @selector(firstEntry);
  methods[8].selector = @selector(floorEntryWithId:);
  methods[9].selector = @selector(floorKeyWithId:);
  methods[10].selector = @selector(headMapWithId:withBoolean:);
  methods[11].selector = @selector(higherEntryWithId:);
  methods[12].selector = @selector(higherKeyWithId:);
  methods[13].selector = @selector(lastEntry);
  methods[14].selector = @selector(lowerEntryWithId:);
  methods[15].selector = @selector(lowerKeyWithId:);
  methods[16].selector = @selector(navigableKeySet);
  methods[17].selector = @selector(pollFirstEntry);
  methods[18].selector = @selector(pollLastEntry);
  methods[19].selector = @selector(subMapWithId:withBoolean:withId:withBoolean:);
  methods[20].selector = @selector(tailMapWithId:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LJavaUtilSortedMap;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
  };
  static const void *ptrTable[] = { "wrapIfNecessary", "LJavaUtilSortedMap;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/SortedMap<TK;TV;>;)Ljava/util/NavigableMap<TK;TV;>;", "(Ljava/util/SortedMap<TK;TV;>;)V", "()Ljava/util/SortedMap<TK;TV;>;", "ceilingEntry", "LNSObject;", "(TK;)Ljava/util/Map$Entry<TK;TV;>;", "ceilingKey", "(TK;)TK;", "()Ljava/util/NavigableSet<TK;>;", "()Ljava/util/NavigableMap<TK;TV;>;", "()Ljava/util/Map$Entry<TK;TV;>;", "floorEntry", "floorKey", "headMap", "LNSObject;Z", "(TK;Z)Ljava/util/NavigableMap<TK;TV;>;", "higherEntry", "higherKey", "lowerEntry", "lowerKey", "subMap", "LNSObject;ZLNSObject;Z", "(TK;ZTK;Z)Ljava/util/NavigableMap<TK;TV;>;", "tailMap", "Ljava/util/SortedMap<TK;TV;>;", "LComGoogleCommonTruthSortedMapSubject;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Lcom/google/common/collect/ForwardingSortedMap<TK;TV;>;Ljava/util/NavigableMap<TK;TV;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap = { "SortedMapAsNavigableMap", "com.google.common.truth", ptrTable, methods, fields, 7, 0xa, 21, 1, 27, -1, -1, 28, -1 };
  return &_ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap;
}

@end

id<JavaUtilNavigableMap> ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_wrapIfNecessaryWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map) {
  ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_initialize();
  if ([JavaUtilNavigableMap_class_() isInstance:map]) {
    return (id<JavaUtilNavigableMap>) cast_check(map, JavaUtilNavigableMap_class_());
  }
  return create_ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_initWithJavaUtilSortedMap_(map);
}

void ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_initWithJavaUtilSortedMap_(ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap *self, id<JavaUtilSortedMap> delegate) {
  ComGoogleCommonCollectForwardingSortedMap_init(self);
  JreStrongAssign(&self->delegate_, ComGoogleCommonBasePreconditions_checkNotNullWithId_(delegate));
}

ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap *new_ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_initWithJavaUtilSortedMap_(id<JavaUtilSortedMap> delegate) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap, initWithJavaUtilSortedMap_, delegate)
}

ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap *create_ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap_initWithJavaUtilSortedMap_(id<JavaUtilSortedMap> delegate) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap, initWithJavaUtilSortedMap_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthSortedMapSubject_SortedMapAsNavigableMap)
