//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonTruthTableSubject")
#ifdef RESTRICT_ComGoogleCommonTruthTableSubject
#define INCLUDE_ALL_ComGoogleCommonTruthTableSubject 0
#else
#define INCLUDE_ALL_ComGoogleCommonTruthTableSubject 1
#endif
#undef RESTRICT_ComGoogleCommonTruthTableSubject

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonTruthTableSubject_) && (INCLUDE_ALL_ComGoogleCommonTruthTableSubject || defined(INCLUDE_ComGoogleCommonTruthTableSubject))
#define ComGoogleCommonTruthTableSubject_

#define RESTRICT_ComGoogleCommonTruthSubject 1
#define INCLUDE_ComGoogleCommonTruthSubject 1
#include "ComGoogleCommonTruthSubject.h"

@class ComGoogleCommonTruthFailureStrategy;
@class IOSObjectArray;
@protocol ComGoogleCommonCollectTable;

@interface ComGoogleCommonTruthTableSubject : ComGoogleCommonTruthSubject

#pragma mark Public

- (void)containsWithId:(id)rowKey
                withId:(id)columnKey;

- (void)containsCellWithId:(id)rowKey
                    withId:(id)colKey
                    withId:(id)value;

- (void)containsColumnWithId:(id)columnKey;

- (void)containsRowWithId:(id)rowKey;

- (void)containsValueWithId:(id)value;

- (void)doesNotContainWithId:(id)rowKey
                      withId:(id)columnKey;

- (void)doesNotContainCellWithId:(id)rowKey
                          withId:(id)colKey
                          withId:(id)value;

- (void)hasSizeWithInt:(jint)expectedSize;

- (void)isEmpty;

- (void)isNotEmpty;

- (ComGoogleCommonTruthTableSubject *)namedWithNSString:(NSString *)arg0
                                      withNSObjectArray:(IOSObjectArray *)arg1;

#pragma mark Protected

- (id<ComGoogleCommonCollectTable>)actual;

- (id<ComGoogleCommonCollectTable>)getSubject;

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                            withComGoogleCommonCollectTable:(id<ComGoogleCommonCollectTable>)table;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthTableSubject)

FOUNDATION_EXPORT void ComGoogleCommonTruthTableSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectTable_(ComGoogleCommonTruthTableSubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectTable> table);

FOUNDATION_EXPORT ComGoogleCommonTruthTableSubject *new_ComGoogleCommonTruthTableSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectTable_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectTable> table) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonTruthTableSubject *create_ComGoogleCommonTruthTableSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectTable_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectTable> table);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthTableSubject)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonTruthTableSubject")
