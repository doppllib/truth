//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonTruthDoubleSubject")
#ifdef RESTRICT_ComGoogleCommonTruthDoubleSubject
#define INCLUDE_ALL_ComGoogleCommonTruthDoubleSubject 0
#else
#define INCLUDE_ALL_ComGoogleCommonTruthDoubleSubject 1
#endif
#undef RESTRICT_ComGoogleCommonTruthDoubleSubject

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonTruthDoubleSubject_) && (INCLUDE_ALL_ComGoogleCommonTruthDoubleSubject || defined(INCLUDE_ComGoogleCommonTruthDoubleSubject))
#define ComGoogleCommonTruthDoubleSubject_

#define RESTRICT_ComGoogleCommonTruthComparableSubject 1
#define INCLUDE_ComGoogleCommonTruthComparableSubject 1
#include "ComGoogleCommonTruthComparableSubject.h"

@class ComGoogleCommonTruthDoubleSubject_TolerantDoubleComparison;
@class ComGoogleCommonTruthFailureStrategy;
@class IOSObjectArray;
@class JavaLangDouble;

@interface ComGoogleCommonTruthDoubleSubject : ComGoogleCommonTruthComparableSubject

#pragma mark Public

- (void)isEqualToWithJavaLangDouble:(JavaLangDouble *)other;

- (void)isEquivalentAccordingToCompareToWithJavaLangComparable:(JavaLangDouble *)other;

- (void)isFinite;

- (void)isNaN;

- (void)isNegativeInfinity;

- (void)isNonZero;

- (void)isNotEqualToWithJavaLangDouble:(JavaLangDouble *)other;

- (void)isNotNaN;

- (ComGoogleCommonTruthDoubleSubject_TolerantDoubleComparison *)isNotWithinWithDouble:(jdouble)tolerance;

- (void)isPositiveInfinity;

- (ComGoogleCommonTruthDoubleSubject_TolerantDoubleComparison *)isWithinWithDouble:(jdouble)tolerance;

- (void)isZero;

- (ComGoogleCommonTruthDoubleSubject *)namedWithNSString:(NSString *)arg0
                                       withNSObjectArray:(IOSObjectArray *)arg1;

#pragma mark Protected

- (JavaLangDouble *)actual;

- (JavaLangDouble *)getSubject;

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                                         withJavaLangDouble:(JavaLangDouble *)subject;

+ (void)checkToleranceWithDouble:(jdouble)tolerance;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonTruthDoubleSubject)

FOUNDATION_EXPORT void ComGoogleCommonTruthDoubleSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangDouble_(ComGoogleCommonTruthDoubleSubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, JavaLangDouble *subject);

FOUNDATION_EXPORT ComGoogleCommonTruthDoubleSubject *new_ComGoogleCommonTruthDoubleSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangDouble_(ComGoogleCommonTruthFailureStrategy *failureStrategy, JavaLangDouble *subject) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonTruthDoubleSubject *create_ComGoogleCommonTruthDoubleSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangDouble_(ComGoogleCommonTruthFailureStrategy *failureStrategy, JavaLangDouble *subject);

FOUNDATION_EXPORT void ComGoogleCommonTruthDoubleSubject_checkToleranceWithDouble_(jdouble tolerance);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthDoubleSubject)

#endif

#if !defined (ComGoogleCommonTruthDoubleSubject_TolerantDoubleComparison_) && (INCLUDE_ALL_ComGoogleCommonTruthDoubleSubject || defined(INCLUDE_ComGoogleCommonTruthDoubleSubject_TolerantDoubleComparison))
#define ComGoogleCommonTruthDoubleSubject_TolerantDoubleComparison_

@interface ComGoogleCommonTruthDoubleSubject_TolerantDoubleComparison : NSObject

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (void)ofWithDouble:(jdouble)expectedDouble;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthDoubleSubject_TolerantDoubleComparison)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthDoubleSubject_TolerantDoubleComparison)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonTruthDoubleSubject")
