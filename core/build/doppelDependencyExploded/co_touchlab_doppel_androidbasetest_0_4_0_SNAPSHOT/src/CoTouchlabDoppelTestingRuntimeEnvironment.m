//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/core-doppl/androidbasetest/src/main/java/co/touchlab/doppel/testing/RuntimeEnvironment.java
//

#include "AndroidAppApplication.h"
#include "CoTouchlabDoppelTestingRuntimeEnvironment.h"
#include "J2ObjC_source.h"

AndroidAppApplication *CoTouchlabDoppelTestingRuntimeEnvironment_application;

@implementation CoTouchlabDoppelTestingRuntimeEnvironment

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabDoppelTestingRuntimeEnvironment_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "application", "LAndroidAppApplication;", .constantValue.asLong = 0, 0x9, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &CoTouchlabDoppelTestingRuntimeEnvironment_application };
  static const J2ObjcClassInfo _CoTouchlabDoppelTestingRuntimeEnvironment = { "RuntimeEnvironment", "co.touchlab.doppel.testing", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, -1, -1, -1, -1 };
  return &_CoTouchlabDoppelTestingRuntimeEnvironment;
}

@end

void CoTouchlabDoppelTestingRuntimeEnvironment_init(CoTouchlabDoppelTestingRuntimeEnvironment *self) {
  NSObject_init(self);
}

CoTouchlabDoppelTestingRuntimeEnvironment *new_CoTouchlabDoppelTestingRuntimeEnvironment_init() {
  J2OBJC_NEW_IMPL(CoTouchlabDoppelTestingRuntimeEnvironment, init)
}

CoTouchlabDoppelTestingRuntimeEnvironment *create_CoTouchlabDoppelTestingRuntimeEnvironment_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabDoppelTestingRuntimeEnvironment, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDoppelTestingRuntimeEnvironment)
