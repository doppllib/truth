//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/core-doppl/androidbasetest/src/main/java/co/touchlab/doppel/testing/DoppelRobolectricTestRunner.java
//

#include "AndroidAppApplication.h"
#include "CoTouchlabDoppelTestingDoppelRobolectricTestRunner.h"
#include "CoTouchlabDoppelTestingPlatformUtils.h"
#include "CoTouchlabDoppelTestingRuntimeEnvironment.h"
#include "CoTouchlabDoppelTestingTestingContext.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/List.h"
#include "org/junit/After.h"
#include "org/junit/Before.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/notification/RunListener.h"
#include "org/junit/runner/notification/RunNotifier.h"
#include "org/junit/runners/BlockJUnit4ClassRunner.h"
#include "org/junit/runners/model/TestClass.h"

@interface CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1 : OrgJunitRunnerNotificationRunListener

- (void)testRunStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1)

__attribute__((unused)) static void CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1_init(CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1 *self);

__attribute__((unused)) static CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1 *new_CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1 *create_CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1_init();

@implementation CoTouchlabDoppelTestingDoppelRobolectricTestRunner

- (instancetype)initWithIOSClass:(IOSClass *)testClass {
  CoTouchlabDoppelTestingDoppelRobolectricTestRunner_initWithIOSClass_(self, testClass);
  return self;
}

- (void)runWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  if (CoTouchlabDoppelTestingPlatformUtils_isJ2objc()) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Running: ", [((IOSClass *) nil_chk([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getJavaClass])) getName])];
    [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(notifier)) addListenerWithOrgJunitRunnerNotificationRunListener:create_CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1_init()];
    [super runWithOrgJunitRunnerNotificationRunNotifier:notifier];
  }
}

- (void)validateInstanceMethodsWithJavaUtilList:(id<JavaUtilList>)errors {
  if (CoTouchlabDoppelTestingPlatformUtils_isJ2objc()) [super validateInstanceMethodsWithJavaUtilList:errors];
  else {
    [self validatePublicVoidNoArgMethodsWithIOSClass:OrgJunitAfter_class_() withBoolean:false withJavaUtilList:errors];
    [self validatePublicVoidNoArgMethodsWithIOSClass:OrgJunitBefore_class_() withBoolean:false withJavaUtilList:errors];
    [self validateTestMethodsWithJavaUtilList:errors];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(runWithOrgJunitRunnerNotificationRunNotifier:);
  methods[2].selector = @selector(validateInstanceMethodsWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIOSClass;", "LOrgJunitRunnersModelInitializationError;", "(Ljava/lang/Class<*>;)V", "run", "LOrgJunitRunnerNotificationRunNotifier;", "validateInstanceMethods", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Throwable;>;)V" };
  static const J2ObjcClassInfo _CoTouchlabDoppelTestingDoppelRobolectricTestRunner = { "DoppelRobolectricTestRunner", "co.touchlab.doppel.testing", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabDoppelTestingDoppelRobolectricTestRunner;
}

@end

void CoTouchlabDoppelTestingDoppelRobolectricTestRunner_initWithIOSClass_(CoTouchlabDoppelTestingDoppelRobolectricTestRunner *self, IOSClass *testClass) {
  OrgJunitRunnersBlockJUnit4ClassRunner_initWithIOSClass_(self, testClass);
  if (CoTouchlabDoppelTestingPlatformUtils_isJ2objc()) {
    JavaIoFile *rootDir = create_JavaIoFile_initWithNSString_(JreStrcat("$J", @"/Users/kgalligan/temp/test_", JavaLangSystem_currentTimeMillis()));
    [rootDir mkdirs];
    JreStrongAssignAndConsume(JreLoadStaticRef(CoTouchlabDoppelTestingRuntimeEnvironment, application), new_CoTouchlabDoppelTestingTestingContext_initWithJavaIoFile_(rootDir));
  }
}

CoTouchlabDoppelTestingDoppelRobolectricTestRunner *new_CoTouchlabDoppelTestingDoppelRobolectricTestRunner_initWithIOSClass_(IOSClass *testClass) {
  J2OBJC_NEW_IMPL(CoTouchlabDoppelTestingDoppelRobolectricTestRunner, initWithIOSClass_, testClass)
}

CoTouchlabDoppelTestingDoppelRobolectricTestRunner *create_CoTouchlabDoppelTestingDoppelRobolectricTestRunner_initWithIOSClass_(IOSClass *testClass) {
  J2OBJC_CREATE_IMPL(CoTouchlabDoppelTestingDoppelRobolectricTestRunner, initWithIOSClass_, testClass)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDoppelTestingDoppelRobolectricTestRunner)

@implementation CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1

- (void)testRunStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C$", @"testRunStarted: ", [((OrgJunitRunnerDescription *) nil_chk(description_)) getMethodName], '/', [description_ getDisplayName])];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testRunStartedWithOrgJunitRunnerDescription:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "testRunStarted", "LOrgJunitRunnerDescription;", "LJavaLangException;", "LCoTouchlabDoppelTestingDoppelRobolectricTestRunner;", "runWithOrgJunitRunnerNotificationRunNotifier:" };
  static const J2ObjcClassInfo _CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1 = { "", "co.touchlab.doppel.testing", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, -1, -1 };
  return &_CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1;
}

@end

void CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1_init(CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1 *self) {
  OrgJunitRunnerNotificationRunListener_init(self);
}

CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1 *new_CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1_init() {
  J2OBJC_NEW_IMPL(CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1, init)
}

CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1 *create_CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabDoppelTestingDoppelRobolectricTestRunner_$1, init)
}
