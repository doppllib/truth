//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/truth/core/src/main/java/com/google/common/truth/MultisetSubject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonTruthMultisetSubject")
#ifdef RESTRICT_ComGoogleCommonTruthMultisetSubject
#define INCLUDE_ALL_ComGoogleCommonTruthMultisetSubject 0
#else
#define INCLUDE_ALL_ComGoogleCommonTruthMultisetSubject 1
#endif
#undef RESTRICT_ComGoogleCommonTruthMultisetSubject

#if !defined (ComGoogleCommonTruthMultisetSubject_) && (INCLUDE_ALL_ComGoogleCommonTruthMultisetSubject || defined(INCLUDE_ComGoogleCommonTruthMultisetSubject))
#define ComGoogleCommonTruthMultisetSubject_

#define RESTRICT_ComGoogleCommonTruthIterableSubject 1
#define INCLUDE_ComGoogleCommonTruthIterableSubject 1
#include "ComGoogleCommonTruthIterableSubject.h"

@class ComGoogleCommonTruthFailureStrategy;
@class IOSObjectArray;
@protocol ComGoogleCommonCollectMultiset;
@protocol JavaLangIterable;

@interface ComGoogleCommonTruthMultisetSubject : ComGoogleCommonTruthIterableSubject

#pragma mark Public

- (void)hasCountWithId:(id)element
               withInt:(jint)expectedCount;

- (ComGoogleCommonTruthMultisetSubject *)namedWithNSString:(NSString *)format
                                         withNSObjectArray:(IOSObjectArray *)args;

#pragma mark Protected

- (id<JavaLangIterable>)actual;

- (id<JavaLangIterable>)getSubject;

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                         withComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset>)multiset;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthMultisetSubject)

FOUNDATION_EXPORT void ComGoogleCommonTruthMultisetSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultiset_(ComGoogleCommonTruthMultisetSubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectMultiset> multiset);

FOUNDATION_EXPORT ComGoogleCommonTruthMultisetSubject *new_ComGoogleCommonTruthMultisetSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultiset_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectMultiset> multiset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonTruthMultisetSubject *create_ComGoogleCommonTruthMultisetSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultiset_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectMultiset> multiset);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthMultisetSubject)

#endif

#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonTruthMultisetSubject")
