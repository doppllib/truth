//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/truth/core/src/main/java/com/google/common/truth/MultisetSubject.java
//

#include "ComGoogleCommonBasePreconditions.h"
#include "ComGoogleCommonCollectMultiset.h"
#include "ComGoogleCommonTruthFailureStrategy.h"
#include "ComGoogleCommonTruthIterableSubject.h"
#include "ComGoogleCommonTruthMultisetSubject.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/annotation/Nullable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultisetSubject__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonTruthMultisetSubject__Annotations$1();

@implementation ComGoogleCommonTruthMultisetSubject

- (instancetype)initWithComGoogleCommonTruthFailureStrategy:(ComGoogleCommonTruthFailureStrategy *)failureStrategy
                         withComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset>)multiset {
  ComGoogleCommonTruthMultisetSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultiset_(self, failureStrategy, multiset);
  return self;
}

- (ComGoogleCommonTruthMultisetSubject *)namedWithNSString:(NSString *)format
                                         withNSObjectArray:(IOSObjectArray *)args {
  [super namedWithNSString:format withNSObjectArray:args];
  return self;
}

- (void)hasCountWithId:(id)element
               withInt:(jint)expectedCount {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withNSObjectArray_(expectedCount >= 0, @"expectedCount(%s) must be >= 0", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(expectedCount) } count:1 type:NSObject_class_()]);
  jint actualCount = [((id<ComGoogleCommonCollectMultiset>) nil_chk(((id<ComGoogleCommonCollectMultiset>) cast_check([self actual], ComGoogleCommonCollectMultiset_class_())))) countWithId:element];
  if (actualCount != expectedCount) {
    [self failWithBadResultsWithNSString:JreStrcat("$@$", @"has a count for <", element, @"> of") withId:JavaLangInteger_valueOfWithInt_(expectedCount) withNSString:@"is" withId:JavaLangInteger_valueOfWithInt_(actualCount)];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, 2 },
    { NULL, "LComGoogleCommonTruthMultisetSubject;", 0x81, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, -1, -1, 7 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonTruthFailureStrategy:withComGoogleCommonCollectMultiset:);
  methods[1].selector = @selector(namedWithNSString:withNSObjectArray:);
  methods[2].selector = @selector(hasCountWithId:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonTruthFailureStrategy;LComGoogleCommonCollectMultiset;", "(Lcom/google/common/truth/FailureStrategy;Lcom/google/common/collect/Multiset<*>;)V", (void *)&ComGoogleCommonTruthMultisetSubject__Annotations$0, "named", "LNSString;[LNSObject;", "hasCount", "LNSObject;I", (void *)&ComGoogleCommonTruthMultisetSubject__Annotations$1 };
  static const J2ObjcClassInfo _ComGoogleCommonTruthMultisetSubject = { "MultisetSubject", "com.google.common.truth", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonTruthMultisetSubject;
}

@end

void ComGoogleCommonTruthMultisetSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultiset_(ComGoogleCommonTruthMultisetSubject *self, ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectMultiset> multiset) {
  ComGoogleCommonTruthIterableSubject_initWithComGoogleCommonTruthFailureStrategy_withJavaLangIterable_(self, failureStrategy, multiset);
}

ComGoogleCommonTruthMultisetSubject *new_ComGoogleCommonTruthMultisetSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultiset_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectMultiset> multiset) {
  J2OBJC_NEW_IMPL(ComGoogleCommonTruthMultisetSubject, initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultiset_, failureStrategy, multiset)
}

ComGoogleCommonTruthMultisetSubject *create_ComGoogleCommonTruthMultisetSubject_initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultiset_(ComGoogleCommonTruthFailureStrategy *failureStrategy, id<ComGoogleCommonCollectMultiset> multiset) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonTruthMultisetSubject, initWithComGoogleCommonTruthFailureStrategy_withComGoogleCommonCollectMultiset_, failureStrategy, multiset)
}

IOSObjectArray *ComGoogleCommonTruthMultisetSubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonTruthMultisetSubject__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonTruthMultisetSubject)
